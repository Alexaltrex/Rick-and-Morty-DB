{"version":3,"sources":["Components/Header/Header.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","store/sidebar-reducer.ts","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Episodes/Episode/Episode.tsx","Components/Main/Episodes/Episodes.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator/Paginator.tsx","Components/Main/Characters/SearchCharacters/SearchCharacters.jsx","DAL/api.ts","store/characters-reducer.ts","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","store/episodes-reducer.ts","Components/Main/Episodes/EpisodesContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","Components/Main/Main.jsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","appBar","zIndex","drawer","Header","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","SidebarItem","to","primary","icon","currentItem","ownIndex","setCurrentItem","ListItem","onClick","selected","button","component","RouterLink","color","initialState","type","sidebarReducer","state","action","SidebarItemContainer","connect","sidebar","width","flexShrink","drawerPaper","drawerContainer","overflow","Sidebar","Drawer","paper","List","Locations","paragraph","item","backgroundColor","ListItemLink","props","renderLink","React","useMemo","forwardRef","itemProps","ref","Episode","episode","id","name","marginRight","textTransform","count","marginTop","marginBottom","Episodes","episodes","currentPage","totalPagesCount","getEpisodes","setCurrentEpisode","useState","panelIsOpen","setPanelIsOpen","episodesElements","map","key","useEffect","Collapse","in","timeout","unmountOnExit","Button","startIcon","root","media","height","Character","character","Grid","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","spacing","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","Pagination","onChange","event","page","showFirstButton","showLastButton","shape","RenderTextField","label","input","meta","touched","invalid","error","custom","TextField","placeholder","helperText","RenderSelectField","children","FormControl","InputLabel","htmlFor","Select","native","inputProps","field","ReduxSearchCharactersForm","reduxForm","form","validate","values","empty","str","test","errors","species","gender","_error","console","log","handleSubmit","submitting","pristine","reset","onSubmit","Field","size","value","disabled","SearchCharacters","setShowCharactersFromSearch","setSearchingParams","setCurrentPage","formValue","instance","axios","create","baseURL","charactersAPI","get","response","data","url","searchingParams","status","episodesAPI","initialized","characters","totalCharactersCount","currentCharacter","currentCharacterId","next","prev","isLoading","showCharactersFromSearch","searchError","episodesOfCurrentCharacter","charactersAC","charactersData","charactersReducer","results","info","pages","SearchCharactersContainer","Characters","getCharacters","getCharactersFromSearch","charactersElements","totalOutputCount","Badge","badgeContent","max","CircularProgress","container","alignContent","justify","wrap","CharactersContainer","dispatch","a","buttons","card","borderRadius","boxShadow","row","display","gridTemplateColumns","borderBottom","paddingLeft","RowCustom","leftContent","rightContent","CharacterInfo","match","getCurrentCharacter","setCurrentCharacterId","params","localeCurrentCharacterId","setLocaleCurrentCharacterId","idNext","idPrev","endIcon","origin","location","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","withRouter","totalEpisodesCount","currentEpisode","charactersOfCurrentEpisode","episodesAC","episodesData","episodesReducer","EpisodesContainer","getState","resultWithTotalPageCount","arrPages","i","push","pageNumber","resultsArray","chip","margin","padding","paddingRight","avatar","EpisodeInfo","getCurrentEpisode","toLocaleLowerCase","air_date","Avatar","alt","src","EpisodeInfoContainer","getCurrentEpisodeResponse","content","flexGrow","Main","exact","path","render","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b4bd5954.chunk.js","sourcesContent":["import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Rick and Morty DB\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\ntype PropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    currentItem: number\r\n    ownIndex: number\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\n\r\nconst SidebarItem: React.FC<PropsType> = ({to, primary, icon, currentItem, ownIndex, setCurrentItem}) => {\r\n    const onClick = () => {\r\n        setCurrentItem(ownIndex);\r\n    }\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon color='primary'>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;","const SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype setCurrentItemType = {\r\n    type: typeof SET_CURRENT_ITEM\r\n    currentItem: number\r\n}\r\n\r\nexport const setCurrentItem = (currentItem: number): setCurrentItemType => ({type: SET_CURRENT_ITEM, currentItem});\r\n\r\nexport default sidebarReducer;","import {connect} from \"react-redux\";\r\n\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {setCurrentItem} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {setCurrentItem})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React, {useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n}));\r\n\r\nconst Sidebar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <Toolbar/>\r\n\r\n            <div className={classes.drawerContainer}>\r\n\r\n                <List>\r\n                    <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n                </List>\r\n\r\n            </div>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\n\r\nconst Locations = () => {\r\n    return (\r\n        <Typography paragraph>\r\n            Locations\r\n        </Typography>\r\n    )\r\n};\r\n\r\nexport default Locations;","import React from \"react\";\r\nimport {EpisodeType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\ntype PropsType = {\r\n    episode: EpisodeType\r\n}\r\n\r\nconst onClick = () => {\r\n\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Episode = (props: PropsType) => {\r\n    const classes = useStyles();\r\n    const {episode} = props;\r\n    return (\r\n        <ListItemLink\r\n            to={`/episodes/${episode.id}`}\r\n            primary={`${episode.episode} - ${episode.name}`}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Episode;","import React, {useEffect, useState} from \"react\";\r\nimport {EpisodeType} from \"../../../Types/Types\";\r\nimport Episode from \"./Episode/Episode\";\r\nimport {Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\ntype PropTypes = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    getEpisodes: (currentPage: number) => void\r\n    setCurrentEpisode: (currentPage: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\nconst Episodes: React.FC<PropTypes> = (props) => {\r\n    const {episodes, totalPagesCount, currentPage, getEpisodes, setCurrentEpisode} = props;\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n    const classes = useStyles();\r\n    let episodesElements = episodes.map(item => <Episode key={item.id} episode={item}/>);\r\n    const onSearchEpisodesClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n    const onShowAllClick = () => {\r\n        //setShowCharactersFromSearch(false)\r\n        //setCurrentPage(1);\r\n    }\r\n    useEffect(() => {\r\n        getEpisodes(currentPage);\r\n    }, [currentPage]);\r\n    return (\r\n        <>\r\n            <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                Test\r\n            </Collapse>\r\n            <Button onClick={onSearchEpisodesClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n            <Button onClick={onShowAllClick}\r\n                    // disabled={!showEpisodesFromSearch}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n            <List>\r\n                {episodesElements}\r\n            </List>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Episodes;\r\n","import React from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\ntype PropTypes = {\r\n    character: CharacterType\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n});\r\n\r\nconst Character: React.FC<PropTypes> = ({character}) => {\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n\r\n    }\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                onClick={onClick}\r\n                                to={`characters/${character.id}`}>\r\n                    <CardMedia className={classes.media}\r\n                               image={character.image}\r\n                    />\r\n                </CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\">\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(2),\r\n                marginBottom: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n","import React from 'react';\r\nimport {Button, TextField, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field} from 'redux-form'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n///////////////////////////////////////////////////////////////\r\nconst RenderTextField = ({\r\n                             label,\r\n                             input,\r\n                             meta: {touched, invalid, error},\r\n                             ...custom\r\n                         }) => (\r\n\r\n    <TextField\r\n        label={label}\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n        {...input}\r\n        {...custom}\r\n    />\r\n\r\n\r\n);\r\n\r\n/////////////////////////////////////////////////////////////\r\nconst RenderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => (\r\n    <FormControl>\r\n        <InputLabel htmlFor={label}>{label}</InputLabel>\r\n        <Select\r\n            native\r\n            {...input}\r\n            {...custom}\r\n            inputProps={{\r\n                name: label,\r\n                id: label\r\n            }}\r\n        >\r\n            {children}\r\n        </Select>\r\n\r\n    </FormControl>\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchCharactersForm = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'/>\r\n            </div>\r\n            <div>\r\n                <Field name='status' className={classes.field} component={RenderSelectField} label='Status'>\r\n                    <option value={''}></option>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={RenderSelectField} label='Gender'>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate = (values) => {\r\n    const empty = (str) => /^\\s+$/.test(str)\r\n    let errors = {};\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) &&\r\n        !values.gender && !values.gender\r\n        && (!values.species || empty(values.species)) &&\r\n        (!values.type || empty(values.type))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    console.log(errors)\r\n    return errors\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchCharactersForm = reduxForm({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\nconst SearchCharacters = (props) => {\r\n    const {setShowCharactersFromSearch, setSearchingParams, setCurrentPage} = props;\r\n\r\n    const onSubmit = (formValue) => {\r\n        // if (в форму введены валидные данный) {\r\n        // setSearchingParams(formValue)\r\n        // setShowCharactersFromSearch(true);\r\n        // }\r\n\r\n        console.log(formValue)\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFromSearch(true);\r\n\r\n    }\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters","import axios from \"axios\";\r\nimport {CharactersDataType, CharacterType, EpisodesDataType, EpisodeType, SearchingParamsType} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rickandmortyapi.com/api/'\r\n});\r\n\r\nexport const charactersAPI = {\r\n    async getCharacters(currentPage = 1) {\r\n        let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCharacterByUrl(url: string) {\r\n        let response = await axios.get<CharacterType>(url);\r\n        return response.data\r\n    },\r\n    async getCurrentCharacter(id: number) {\r\n        let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        console.log(response)\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    }\r\n};","import {CharactersDataType, CharacterType, EpisodeType, InfoType, SearchingParamsType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    initialized: false, // нужен?\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    currentCharacterId: null as null | number,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    showCharactersFromSearch: false,\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    searchError: false,\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER_ID': {\r\n            return {...state, currentCharacterId: action.currentCharacterId}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM_SEARCH': {\r\n            return {...state, showCharactersFromSearch: action.showCharactersFromSearch}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: {...state.searchingParams, ...action.searchingParams}\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_SEARCH_ERROR': {\r\n            return {\r\n                ...state, searchError: action.searchError\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {\r\n                ...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setInitialized: () => ({type: 'SET_INITIALIZED'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'CHARACTERS/TOGGLE_LOADING', isLoading} as const),\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentCharacterId: (currentCharacterId: number) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER_ID',\r\n        currentCharacterId\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM_SEARCH',\r\n        showCharactersFromSearch\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setSearchError: (searchError: boolean) => ({type: 'CHARACTERS/SET_SEARCH_ERROR', searchError} as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    dispatch(charactersAC.toggleLoading(true));\r\n    let data = await charactersAPI.getCharacters(currentPage);\r\n    dispatch(charactersAC.setCharacters(data));\r\n    dispatch(charactersAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(charactersAC.toggleLoading(true));\r\n    let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n    dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n    // получение информации о эпизодах, относящихся к текущему характеру:\r\n    // в currentCharacter содержится только массив ссылок на эпизоды\r\n    const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n\r\n    dispatch(charactersAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(charactersAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setSearchError(false))\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        console.log('error')\r\n        // console.log(data)\r\n        dispatch(charactersAC.setSearchError(true));\r\n    } finally {\r\n        dispatch(charactersAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default charactersReducer;","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowCharactersFromSearch = charactersAC.setShowCharactersFromSearch;\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {setShowCharactersFromSearch, setSearchingParams, setCurrentPage})(SearchCharacters);\r\n\r\ntype MapStatePropsType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    setSearchingParams: (searchingParams: SearchingParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nexport default SearchCharactersContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CharacterType, SearchingParamsType} from \"../../../Types/Types\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport {Badge, CircularProgress, Collapse} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\ntype PropTypes = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    showCharactersFromSearch: boolean\r\n    searchingParams: SearchingParamsType\r\n    isLoading: boolean\r\n    searchError: boolean\r\n    totalCharactersCount: number\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingParamsType, currentPage: number) => void\r\n}\r\n\r\nconst Characters: React.FC<PropTypes> = (props: PropTypes) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage, totalCharactersCount,\r\n        getCharacters, setCurrentPage, searchError,\r\n        showCharactersFromSearch, setShowCharactersFromSearch,\r\n        getCharactersFromSearch, searchingParams, isLoading\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!showCharactersFromSearch) {\r\n            getCharacters(currentPage);\r\n        } else {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFromSearch]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowCharactersFromSearch(false)\r\n        setCurrentPage(1);\r\n    }\r\n\r\n    let totalOutputCount = searchError ? 0 : totalCharactersCount;\r\n\r\n    return (\r\n        <>\r\n            <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchCharactersContainer/>\r\n            </Collapse>\r\n            <Button onClick={onSearchCharactersClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n            <Button onClick={onShowAllClick}\r\n                    disabled={!showCharactersFromSearch}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n\r\n            <div className={classes.count}>\r\n                {`Total characters count: `}\r\n                <Badge badgeContent={totalOutputCount} color=\"primary\" max={99999}>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {searchError ? null : <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                                             onPaginatorItemClick={onPaginatorItemClick}\r\n                                             currentPage={currentPage}\r\n            />}\r\n            {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                searchError ? null :\r\n                    <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                        {charactersElements}\r\n                    </Grid>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, SearchingParamsType} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    showCharactersFromSearch: boolean\r\n    searchingParams: SearchingParamsType\r\n    isLoading: boolean\r\n    searchError: boolean\r\n    totalCharactersCount: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingParamsType, currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    showCharactersFromSearch: state.characters.showCharactersFromSearch,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.characters.isLoading,\r\n    searchError: state.characters.searchError,\r\n    totalCharactersCount: state.characters.totalCharactersCount\r\n    });\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFromSearch = charactersAC.setShowCharactersFromSearch\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {getCharacters, setCurrentPage, setShowCharactersFromSearch, getCharactersFromSearch})(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardMedia,\r\n    CircularProgress, createStyles,\r\n    Grid, List, ListItem,\r\n    Paper,\r\n    Table, TableBody, TableCell,\r\n    TableContainer,\r\n    TableRow, Theme, withStyles\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\n\r\nconst useStyles = makeStyles({\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        borderBottom: '1px #ccc solid',\r\n        paddingLeft: 10,\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n    episode: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    }\r\n\r\n});\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles()\r\n    const {icon, primary, to} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.episode}>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='subtitle1'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\ntype PropsType = {\r\n    currentCharacter: CharacterType\r\n    totalCharactersCount: number\r\n    isLoading: boolean\r\n    currentCharacterId: number\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentCharacterId: (id: number) => void\r\n    match: any\r\n    episodesOfCurrentCharacter: Array<EpisodeType>\r\n}\r\n\r\ntype PropTypes = {\r\n    leftContent: string\r\n    rightContent: string\r\n}\r\n\r\nconst RowCustom: React.FC<PropTypes> = (props: PropTypes) => {\r\n    const classes = useStyles()\r\n    const {leftContent, rightContent} = props\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1'>{leftContent}</Typography>\r\n            <Typography variant='h6' color='primary'>{rightContent}</Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, totalCharactersCount, match, currentCharacterId,\r\n        getCurrentCharacter, isLoading, setCurrentCharacterId, episodesOfCurrentCharacter\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    let id = +match.params.id;\r\n\r\n    const [localeCurrentCharacterId, setLocaleCurrentCharacterId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setLocaleCurrentCharacterId(id);\r\n        getCurrentCharacter(id);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (localeCurrentCharacterId) {\r\n            getCurrentCharacter(localeCurrentCharacterId);\r\n        }\r\n    }, [localeCurrentCharacterId]);\r\n\r\n    const onClickPrev = () => {\r\n        setLocaleCurrentCharacterId(localeCurrentCharacterId - 1);\r\n    }\r\n\r\n    const onClickNext = () => {\r\n        setLocaleCurrentCharacterId(localeCurrentCharacterId + 1);\r\n    }\r\n    let idNext = id + 1;\r\n    let idPrev = id - 1;\r\n\r\n    return (\r\n        <div>\r\n            {currentCharacter &&\r\n            <div>\r\n                <Grid container justify='space-between' className={classes.buttons}>\r\n                    <Button\r\n                        onClick={onClickPrev}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters/${idPrev}`}\r\n                        disabled={(currentCharacter.id === 1) || isLoading} //\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<ArrowBackIcon/>}\r\n                    >\r\n                        Previous character\r\n                    </Button>\r\n\r\n                    <Button\r\n                        disabled={isLoading}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters`}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<PeopleIcon/>}\r\n                    >\r\n                        Back to characters\r\n                    </Button>\r\n\r\n                    <Button\r\n                        onClick={onClickNext}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters/${idNext}`}\r\n                        disabled={(currentCharacter.id === totalCharactersCount) || isLoading}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        endIcon={<ArrowForwardIcon/>}\r\n                    >\r\n                        Next character\r\n                    </Button>\r\n                </Grid>\r\n\r\n\r\n                {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                    <div>\r\n                        <Card className={classes.card}>\r\n                            <CardMedia\r\n                                className={classes.media}\r\n                                image={currentCharacter.image}/>\r\n                        </Card>\r\n                        <RowCustom leftContent='Name:' rightContent={currentCharacter.name}/>\r\n                        <RowCustom leftContent='Gender:' rightContent={currentCharacter.gender}/>\r\n                        <RowCustom leftContent='Status:' rightContent={currentCharacter.status}/>\r\n                        <RowCustom leftContent='Species:' rightContent={currentCharacter.species}/>\r\n                        {currentCharacter.type &&\r\n                        <RowCustom leftContent='Subspecies:' rightContent={currentCharacter.type}/>}\r\n                        <RowCustom leftContent='Origin location:' rightContent={currentCharacter.origin.name}/>\r\n                        <RowCustom leftContent='Last known location endpoint:'\r\n                                   rightContent={currentCharacter.location.name}/>\r\n\r\n                        <Typography variant='h6' color='primary'>\r\n                            List of episodes in which this character appeared:\r\n                        </Typography>\r\n                        <List>\r\n                            {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                key={episode.id}\r\n                                to={`/episodes/${episode.id}`}\r\n                                primary={`${episode.episode} - ${episode.name}`}>\r\n                            </ListItemLink>)}\r\n                        </List>\r\n                    </div>\r\n\r\n\r\n                }\r\n\r\n\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getCurrentCharacter} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    totalCharactersCount: number\r\n    isLoading: boolean\r\n    currentCharacterId: number | null\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentCharacterId: (id: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentCharacter: state.characters.currentCharacter,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    isLoading: state.characters.isLoading,\r\n    currentCharacterId: state.characters.currentCharacterId,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter\r\n});\r\n\r\nconst setCurrentCharacterId = charactersAC.setCurrentCharacterId;\r\n\r\nconst CharacterInfoContainer = compose(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps,\r\n    {getCurrentCharacter, setCurrentCharacterId}), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import {CharacterType, EpisodesDataType, EpisodeType, InfoType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    initialized: false, // нужен?\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType>\r\n\r\nexport const episodesAC = {\r\n    setInitialized: () => ({type: 'SET_INITIALIZED'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'TOGGLE_LOADING', isLoading} as const),\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({type: 'SET_CURRENT_EPISODE', currentEpisode} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const)\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(episodesAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount ; i++){  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись всех эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(episodesAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(episodesAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(episodesAC.toggleLoading(false));\r\n};\r\n\r\nexport default episodesReducer;","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {EpisodeType} from \"../../../Types/Types\";\r\nimport Episodes from \"./Episodes\";\r\nimport {episodesAC, getEpisodes} from \"../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getEpisodes: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    episodes: state.episodes.episodes,\r\n    totalPagesCount: state.episodes.totalPagesCount,\r\n    currentPage: state.episodes.currentPage\r\n});\r\n\r\nconst setCurrentPage = episodesAC.setCurrentPage;\r\n\r\nconst EpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {getEpisodes, setCurrentPage})(Episodes);\r\n\r\nexport default EpisodesContainer;","import React, {useEffect} from \"react\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Button,\r\n    CircularProgress,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n    button: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 5,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});\r\n\r\ntype PropsType = {\r\n    currentEpisode: EpisodeType\r\n    isLoading: boolean\r\n    getCurrentEpisode: (id: number) => void\r\n    charactersOfCurrentEpisode: Array<CharacterType>\r\n    match: any\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode, setCurrentItem} = props;\r\n    let id = match.params.id;\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        getCurrentEpisode(id);\r\n        console.log(currentEpisode)\r\n    }, []);\r\n\r\n    const onClick = () => {\r\n        setCurrentItem(2);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentEpisode && charactersOfCurrentEpisode &&\r\n            <div>\r\n                <Typography color='error' variant='h5'>\r\n                    {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                </Typography>\r\n                <Typography color='textSecondary' variant='h6'>\r\n                    The air date: {currentEpisode.air_date}\r\n                </Typography>\r\n                <Typography color='textPrimary' variant='h6'>\r\n                    List of characters who have been seen in the episode:\r\n                </Typography>\r\n                {isLoading ? <CircularProgress/> : <div>\r\n                    {charactersOfCurrentEpisode.map(character => <Button variant='contained'\r\n                                                                         key={character.id}\r\n                                                                         onClick={onClick}\r\n                                                                         color={'default'}\r\n                                                                         className={classes.button}\r\n                                                                         component={RouterLink}\r\n                                                                         to={`/characters/${character.id}`}\r\n                                                                         size='large'>\r\n                            <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                            {character.name}\r\n                        </Button>\r\n                    )}\r\n                </div>}\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {setCurrentItem} from \"../../../../store/sidebar-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.episodes.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n});\r\n\r\nconst EpisodeInfoContainer = compose(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentItem}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {Route} from \"react-router-dom\";\r\nimport Locations from \"./Locations/Locations\";\r\nimport Episodes from \"./Episodes/Episodes\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodesContainer from \"./Episodes/EpisodesContainer\";\r\nimport EpisodeInfo from \"./Episodes/EpisodeInfo/EpisodeInfo\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst Main = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n            <Toolbar/>\r\n            <Route exact path='/characters' component={CharactersContainer}/>\r\n            <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n            <Route path='/locations' component={Locations}/>\r\n            <Route exact path='/episodes' component={EpisodesContainer}/>\r\n            <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      root: {\n        display: 'flex',\n      }\n    }),\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n      <div className={classes.root}>\n        <Header/>\n        <Sidebar/>\n        <Main/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}