{"version":3,"sources":["Components/Header/Header.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","store/sidebar-reducer.ts","DAL/api.ts","store/app-reducer.ts","store/characters-reducer.ts","store/episodes-reducer.ts","store/locations-reducer.ts","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator/Paginator.tsx","Components/Common/RenderTextField/RenderTextField.jsx","Helpers/Validators.ts","Components/Common/renderSelectField.jsx","Components/Main/Characters/SearchCharacters/SearchCharacters.tsx","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Common/Preloader/Preloader.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Common/RowCustom/RowCustom.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","Components/Main/Episodes/Episode/Episode.tsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodes.tsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodesContainer.tsx","Components/Main/Episodes/Episodes.tsx","Components/Main/Episodes/EpisodesContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","Components/Main/Locations/Location/Location.tsx","Components/Main/Locations/SearchLocations/SearchLocations.tsx","Components/Main/Locations/SearchLocations/SearchLocationsContainer.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Locations/LocationsContainer.tsx","Components/Main/Locations/LocationInfo/LocationInfo.tsx","Components/Main/Locations/LocationInfo/LocationInfoContainer.tsx","Components/Main/Main.jsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","appBar","zIndex","drawer","Header","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","SidebarItem","props","to","primary","icon","currentItem","ownIndex","setCurrentSidebarMenuItem","setShowCharactersFrom","setShowEpisodesFrom","setShowLocationsFrom","ListItem","onClick","selected","button","component","RouterLink","color","initialState","sidebarAC","type","sidebarReducer","state","action","instance","axios","create","baseURL","charactersAPI","currentPage","get","response","data","url","id","searchingParams","str","name","gender","status","species","episodesAPI","episode","locationsAPI","dimension","isLoading","lanError","appAC","appReducer","characters","totalCharactersCount","totalPagesCount","currentCharacter","next","prev","showCharactersFrom","episodesOfCurrentCharacter","aroundId","prevId","nextId","charactersAC","charactersData","charactersReducer","results","info","count","pages","episodes","totalEpisodesCount","currentEpisode","charactersOfCurrentEpisode","showEpisodesFrom","episodesAC","episodesData","episodesReducer","locations","totalLocationsCount","currentLocation","charactersOfCurrentLocation","showLocationsFrom","currentLocationId","locationsAC","locationsData","locationsReducer","SidebarItemContainer","connect","sidebar","width","flexShrink","drawerPaper","drawerContainer","overflow","Sidebar","Drawer","paper","List","root","media","height","Character","character","Grid","item","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","marginTop","spacing","marginBottom","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","Pagination","onChange","event","page","showFirstButton","showLastButton","shape","RenderTextField","label","input","meta","touched","invalid","error","custom","TextField","placeholder","helperText","empty","test","RenderSelectField","children","FormControl","InputLabel","htmlFor","Select","native","inputProps","textField","marginRight","selectField","textTransform","ReduxSearchCharactersForm","reduxForm","form","validate","values","errors","_error","handleSubmit","submitting","pristine","reset","onSubmit","Field","size","value","Button","startIcon","disabled","SearchCharacters","setSearchingParams","setCurrentPage","formValue","console","log","SearchCharactersContainer","circular","display","justifyContent","Preloader","CircularProgress","Characters","getCharacters","getCharactersFromSearch","useState","panelIsOpen","setPanelIsOpen","useEffect","charactersElements","map","key","React","open","setOpen","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","DialogTitle","DialogContent","DialogActions","autoFocus","Collapse","in","timeout","unmountOnExit","Badge","badgeContent","max","showZero","length","container","alignContent","justify","wrap","CharactersContainer","app","dispatch","a","row","gridTemplateColumns","borderBottom","paddingLeft","backgroundColor","RowCustom","leftContent","rightContent","card","borderRadius","boxShadow","cardContainer","titleOfList","padding","textAlign","paddingTop","paddingBottom","characterInfoBlock","flexWrap","alignItems","characterInfo","flexGrow","ListItemLink","renderLink","itemProps","ref","CharacterInfo","match","getCurrentCharacter","getAroundId","setEpisodes","direction","setDirection","params","onEpisodeClick","episodesOfCurrentCharacterData","endIcon","origin","location","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","targetId","change","getState","positionTargetIdInCharacters","findIndex","el","prevCharactersData","nextCharactersData","withRouter","useMemo","forwardRef","Episode","field","ReduxSearchEpisodesForm","SearchEpisodes","SearchEpisodesContainer","Episodes","getEpisodes","getEpisodesFromSearch","episodesElements","EpisodesContainer","resultWithTotalPageCount","arrPages","i","push","pageNumber","resultsArray","characterItem","paddingRight","margin","buttons","avatar","EpisodeInfo","getCurrentEpisode","setCharacters","onCharacterClick","charactersOfCurrentEpisodeData","sort","b","toLocaleLowerCase","air_date","Avatar","alt","src","EpisodeInfoContainer","getCurrentEpisodeResponse","positionTargetIdInEpisodes","e","Location","setCurrentLocationId","ReduxSearchLocationsForm","SearchLocations","SearchLocationsContainer","alphabetButton","minWidth","Locations","getLocations","getLocationsFromSearch","selectedLetter","setSelectedLetter","locationsElements","alphabetCustom","forEach","includes","arrayOfButtons","LocationsContainer","LocationInfo","getCurrentLocation","charactersOfCurrentLocationData","LocationInfoContainer","currentLocationResponse","residents","positionTargetIdInLocations","content","Main","exact","path","render","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.98d8e4a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Rick and Morty DB\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {SidebarItemPropsType} from \"./SidebarItemContainer\";\r\n\r\nconst SidebarItem: React.FC<SidebarItemPropsType> = (props) => {\r\n    const {to, primary, icon, currentItem, ownIndex, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setShowLocationsFrom} = props;\r\n\r\n    const onClick = () => {\r\n        setCurrentSidebarMenuItem(ownIndex);\r\n        if (ownIndex === 1) {\r\n            setShowCharactersFrom('all')\r\n        }\r\n        if (ownIndex === 2) {\r\n            setShowLocationsFrom('all')\r\n        }\r\n        if (ownIndex === 3) {\r\n            setShowEpisodesFrom('all')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon color='primary'>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;","import {GetActionsType} from \"./store\";\r\nimport {charactersAC} from \"./characters-reducer\";\r\n\r\nconst SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype CharactersActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: CharactersActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => ({type: SET_CURRENT_ITEM, currentItem} as const)\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import axios from \"axios\";\r\nimport {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType, LocationsDataType, LocationType,\r\n    SearchingCharactersParamsType, SearchingEpisodesParamsType, SearchingLocationsParamsType,\r\n\r\n} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rickandmortyapi.com/api/'\r\n});\r\n\r\nexport const charactersAPI = {\r\n    async getCharacters(currentPage = 1) {\r\n        let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCharacterByUrl(url: string) {\r\n        let response = await axios.get<CharacterType>(url);\r\n        return response.data\r\n    },\r\n    async getCurrentCharacter(id: number) {\r\n        let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingCharactersParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    },\r\n    async searchEpisodes(searchingParams: SearchingEpisodesParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.episode) str = `${str}&episode=${searchingParams.episode}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<EpisodesDataType>(`episode/?${str}`);\r\n        return response.data\r\n\r\n    }\r\n};\r\n\r\nexport const locationsAPI = {\r\n    async getLocations(currentPage = 1) {\r\n        let response = await instance.get<LocationsDataType>(`location/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentLocation(id: number) {\r\n        let response = await instance.get<LocationType>(`location/${id}`);\r\n        return response.data\r\n    },\r\n    async getLocationByUrl(url: string) {\r\n        let response = await axios.get<LocationType>(url);\r\n        return response.data\r\n    },\r\n    async searchLocations(searchingParams: SearchingLocationsParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.type) str = `${str}&episode=${searchingParams.type}`;\r\n        if (searchingParams.dimension) str = `${str}&episode=${searchingParams.dimension}`;\r\n        str = `${str}&page=${currentPage}`;\r\n        let response = await instance.get<LocationsDataType>(`location/?${str}`);\r\n        return response.data\r\n    }\r\n};","import {GetActionsType, StateType} from \"./store\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    lanError: false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\n\r\n\r\nexport default appReducer;","import {CharactersDataType, CharacterType, EpisodeType, SearchingCharactersParamsType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0,\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    showCharactersFrom: 'all' as 'all' | 'search' | 'episode' | 'location',\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {...state, searchingParams: action.searchingParams}\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM': {\r\n            return {...state, showCharactersFrom: action.showCharactersFrom}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType | null) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'CHARACTERS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM', showCharactersFrom\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType | AppActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.getCharacters(currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n        dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n        // получение информации о эпизодах, относящихся к текущему характеру:\r\n        // в currentCharacter содержится только массив ссылок на эпизоды\r\n        const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingCharactersParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        const charactersData = {} as CharactersDataType;\r\n        charactersData.results = []\r\n        charactersData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(charactersAC.setCharacters(charactersData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId = null, nextId = null;\r\n        const currentPage = getState().characters.currentPage;\r\n        const totalCharactersCount = getState().characters.totalCharactersCount;\r\n        const characters = getState().characters.characters;\r\n        const totalPagesCount = getState().characters.totalPagesCount;\r\n        const searchingParams = getState().characters.searchingParams;\r\n        const showCharactersFrom = getState().characters.showCharactersFrom;\r\n        // позиция id, на который переходим, целевого, в массиве characters (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInCharacters = getState().characters.characters.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА //////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'all') {\r\n            //console.log('ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА')\r\n            if (targetId > 1) {\r\n                prevId = targetId - 1;\r\n            } else {\r\n                prevId = null;\r\n            }\r\n            if (targetId < totalCharactersCount) {\r\n                nextId = targetId + 1;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n            // если целевой ид не на текущей странице и предыдущая страница существует\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ПОИСКА /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'search') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            prevId = null\r\n            // если целевой ид на текущей станице и не первый - prevId = characters[positionTargetIdInCharacters - 1]\r\n            if (positionTargetIdInCharacters > 0) {\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            }\r\n            // если целевой ид на текущей станице и первый и предыдущая страница существует - prevId - последний на предыдущей странице\r\n            if (positionTargetIdInCharacters === 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[19].id;\r\n            }\r\n            // если целевой ид не на текущей странице, предыдущая страница существует - prevId - предпоследний на предыдущей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[18].id;\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            nextId = null;\r\n            // целевой ид на текущий странице, но не последний - nextId = characters[positionCurrentIdInCharacters + 1]\r\n            if (positionTargetIdInCharacters > -1 && positionTargetIdInCharacters < characters.length - 1) { //целевой ид на текущий странице, но не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            }\r\n            // целевой ид на текущий странице и последний, следующая страница существует - nextId - первый на следующей странице\r\n            if (positionTargetIdInCharacters === characters.length - 1 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                nextId = nextCharactersData.results[0].id; // первый на следующей странице\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1 - nextId - второй на следующей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    nextId = nextCharactersData.results[1].id; // второй на следующей странице\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ЭПИЗОДА ИЛИ ИЗ ЛОКАЦИИ /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'episode' || showCharactersFrom === 'location') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters > 0) {// если целевой ид не первый\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            } else {\r\n                prevId = null\r\n            }\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters < characters.length - 1) { //целевой ид не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n        }\r\n        dispatch(charactersAC.setAroundId(prevId, nextId));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default charactersReducer;","import {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType,\r\n    SearchingEpisodesParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {charactersAC} from \"./characters-reducer\";\r\n\r\nconst initialState = {\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>,\r\n    showEpisodesFrom: 'all' as 'all' | 'search' | 'character',\r\n    searchingParams: {\r\n        name: '', episode: ''\r\n    },\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'EPISODES/SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'EPISODES/SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        case 'EPISODES/SET_SHOW_EPISODES_FROM': {\r\n            return {...state, showEpisodesFrom: action.showEpisodesFrom}\r\n        }\r\n        case 'EPISODES/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'EPISODES/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType | AppActionsType>\r\n\r\nexport const episodesAC = {\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'EPISODES/SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({\r\n        type: 'EPISODES/SET_CURRENT_EPISODE',\r\n        currentEpisode\r\n    } as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const),\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => ({\r\n        type: 'EPISODES/SET_SHOW_EPISODES_FROM', showEpisodesFrom\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => ({\r\n        type: 'EPISODES/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'EPISODES/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись ВСЕХ эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getEpisodesFromSearch = (searchingParams: SearchingEpisodesParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        console.log(searchingParams)\r\n        const resultWithTotalPageCount = await episodesAPI.searchEpisodes(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ эпизодов\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n\r\n        const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.searchEpisodes(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as EpisodesDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<EpisodeType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(episodesAC.setEpisodes(data));\r\n    } catch (e) {\r\n        const episodesData = {} as EpisodesDataType;\r\n        episodesData.results = []\r\n        episodesData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(episodesAC.setEpisodes(episodesData));\r\n\r\n\r\n\r\n\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const episodes = getState().episodes.episodes;\r\n        // позиция id, на который переходим, целевого, в массиве episodes (т.е. на текущей странице)\r\n        const positionTargetIdInEpisodes = getState().episodes.episodes.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes > 0) {// если целевой ид не первый\r\n            prevId = episodes[positionTargetIdInEpisodes - 1].id\r\n        } else {\r\n            prevId = null\r\n        }\r\n        // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes < episodes.length - 1) { //целевой ид не последний\r\n            nextId = episodes[positionTargetIdInEpisodes + 1].id;\r\n        } else {\r\n            nextId = null;\r\n        }\r\n\r\n        dispatch(episodesAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default episodesReducer;","import {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    LocationsDataType,\r\n    LocationType,\r\n    SearchingLocationsParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {charactersAPI, locationsAPI} from \"../DAL/api\";\r\nimport {charactersAC} from \"./characters-reducer\";\r\n\r\nconst initialState = {\r\n    locations: [] as Array<LocationType>,\r\n    totalLocationsCount: 0,\r\n    totalPagesCount: 0,\r\n    currentLocation: null as null | LocationType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentLocation: null as null | Array<CharacterType>,\r\n    showLocationsFrom: 'all' as 'all' | 'search',\r\n    searchingParams: {\r\n        name: '', type: '', dimension: ''\r\n    },\r\n    currentLocationId: null as null | number,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst locationsReducer = (state = initialState, action: LocationsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOCATIONS/SET_LOCATIONS': {\r\n            return {\r\n                ...state,\r\n                locations: action.locationsData.results,\r\n                totalLocationsCount: action.locationsData.info.count,\r\n                totalPagesCount: action.locationsData.info.pages,\r\n                next: action.locationsData.info.next,\r\n                prev: action.locationsData.info.prev\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION': {\r\n            return {...state, currentLocation: action.currentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION': {\r\n            return {...state, charactersOfCurrentLocation: action.charactersOfCurrentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_SHOW_LOCATIONS_FROM': {\r\n            return {...state, showLocationsFrom: action.showLocationsFrom}\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION_ID': {\r\n            return {...state, currentLocationId: action.currentLocationId}\r\n        }\r\n        case 'LOCATIONS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype LocationsActionsType = GetActionsType<typeof locationsAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, LocationsActionsType | AppActionsType>\r\n\r\nexport const locationsAC = {\r\n    setLocations: (locationsData: LocationsDataType) => ({type: 'LOCATIONS/SET_LOCATIONS', locationsData} as const),\r\n    setCurrentLocation: (currentLocation: LocationType | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION',\r\n        currentLocation\r\n    } as const),\r\n    setCharactersOfCurrentLocation: (charactersOfCurrentLocation: Array<CharacterType>) => ({\r\n        type: 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION',\r\n        charactersOfCurrentLocation\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => ({\r\n        type: 'LOCATIONS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => ({\r\n        type: 'LOCATIONS/SET_SHOW_LOCATIONS_FROM', showLocationsFrom\r\n    } as const),\r\n    setCurrentLocationId: (currentLocationId: number | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION_ID',\r\n        currentLocationId\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'LOCATIONS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\nexport const getLocations = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await locationsAPI.getLocations();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ локаций\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.getLocations(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as LocationsDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<LocationType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    // 3 - сортировка локаций по имени\r\n    resultsArray.sort((a, b) => {\r\n        if (a.name > b.name) return 1;\r\n        if (a.name < b.name) return -1;\r\n        return 0;\r\n    });\r\n    data.results = resultsArray;\r\n    // 4 - запись ВСЕХ локаций в store\r\n    dispatch(locationsAC.setLocations(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentLocation = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let currentLocationResponse = await locationsAPI.getCurrentLocation(id);\r\n    dispatch(locationsAC.setCurrentLocation(currentLocationResponse));\r\n    // получение информации о персонажах, относящихся к текущей локации:\r\n    // в currentLocation содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты LocationInfo\r\n    const arrayOfRequests = currentLocationResponse.residents.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(locationsAC.setCharactersOfCurrentLocation(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getLocationsFromSearch = (searchingParams: SearchingLocationsParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        const resultWithTotalPageCount = await locationsAPI.searchLocations(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ локаций\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n        const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.searchLocations(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as LocationsDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<LocationType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(locationsAC.setLocations(data));\r\n    } catch (e) {\r\n        const locationsData = {} as LocationsDataType;\r\n        locationsData.results = []\r\n        locationsData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(locationsAC.setLocations(locationsData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const locations = getState().locations.locations;\r\n        // позиция id, на который переходим, целевого, в массиве locations (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInLocations = getState().locations.locations.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInLocations > 0) { // если целевой ид не первый\r\n            prevId = locations[positionTargetIdInLocations - 1].id\r\n        } else {\r\n            prevId = null;\r\n        }\r\n        if (positionTargetIdInLocations < locations.length - 1) {// если целевой ид не последний\r\n            nextId = locations[positionTargetIdInLocations + 1].id\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(locationsAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default locationsReducer;","import {connect} from \"react-redux\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {sidebarAC} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\nimport {episodesAC} from \"../../../store/episodes-reducer\";\r\nimport {locationsAC} from \"../../../store/locations-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\nexport type SidebarItemPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {\r\n    setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n    setShowEpisodesFrom, setShowLocationsFrom\r\n})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React, {useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n}));\r\n\r\nconst Sidebar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <Toolbar/>\r\n\r\n            <div className={classes.drawerContainer}>\r\n\r\n                <List>\r\n                    <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n                </List>\r\n\r\n            </div>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React, {useEffect} from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\ntype PropTypes = {\r\n    character: CharacterType\r\n    }\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n});\r\n\r\nconst Character: React.FC<PropTypes> = ({character}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`characters/${character.id}`}>\r\n                    <CardMedia className={classes.media}\r\n                               image={character.image}\r\n                    />\r\n                </CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\">\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(2),\r\n                marginBottom: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n","import {TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst RenderTextField = ({\r\n                             label,\r\n                             input,\r\n                             meta: {touched, invalid, error},\r\n                             ...custom\r\n                         }) => (\r\n\r\n    <TextField\r\n        label={label}\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n        {...input}\r\n        {...custom}\r\n    />\r\n);\r\n\r\nexport default RenderTextField;","type EmptyType = (str: string) => boolean\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport type SearchCharactersErrorsType = {\r\n    name?: string | undefined\r\n    species?: string | undefined\r\n    type?: string | undefined\r\n    status?: string | undefined\r\n    gender?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchCharactersValidateType = (values: SearchCharactersFormValuesType) => SearchCharactersErrorsType\r\n\r\nexport type SearchCharactersFormValuesType = {\r\n    name: string\r\n    species: string\r\n    type: string\r\n    status: '' | 'alive' | 'dead' | 'unknown'\r\n    gender: '' | 'female' | 'male' | 'genderless' | 'unknown'\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchEpisodesErrorsType = {\r\n    name?: string | undefined\r\n    episode?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchEpisodesValidateType = (values: SearchEpisodesFormValuesType) => SearchEpisodesErrorsType\r\n\r\nexport type SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchLocationsErrorsType = {\r\n    name?: string | undefined\r\n    type?: string | undefined\r\n    dimension?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchLocationsValidateType = (values: SearchLocationsFormValuesType) => SearchLocationsErrorsType\r\n\r\nexport type SearchLocationsFormValuesType = {\r\n    name: string\r\n    type: string\r\n    dimension: string\r\n}","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\n\r\n\r\nconst RenderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <InputLabel htmlFor=\"color-native-simple\">{label}</InputLabel>\r\n            <Select\r\n\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderSelectField;","import React from 'react';\r\nimport {Button, FormHelperText, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport {GetStringKeysType, SearchingCharactersParamsType} from \"../../../../Types/Types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport Select from \"@material-ui/core/Select/Select\";\r\nimport {SearchCharactersPropsType} from \"./SearchCharactersContainer\";\r\nimport {\r\n    empty,\r\n    SearchCharactersErrorsType,\r\n    SearchCharactersFormValuesType,\r\n    SearchCharactersValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport RenderSelectField from \"../../../Common/renderSelectField\";\r\n\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        marginRight: 10,\r\n        marginBottom: 10\r\n    },\r\n    selectField: {\r\n        marginRight: 10,\r\n        marginTop: 10\r\n\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10,\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchCharactersForm: React.FC<InjectedFormProps<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType> & SearchCharactersFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Field name='status' component={RenderSelectField} label='Status' className={classes.selectField}>\r\n                    <option value={''}/>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={RenderSelectField} label='Gender' className={classes.selectField}>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={classes.button}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={classes.button}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n        </form>\r\n    )\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate: SearchCharactersValidateType = (values) => {\r\n    let errors = {} as SearchCharactersErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && (values.type !== '')) {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (\r\n        !values.gender\r\n        && !values.status\r\n        && (!values.name || empty(values.name))\r\n        && (!values.species || empty(values.species))\r\n        && (!values.type || empty(values.type))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchCharactersForm = reduxForm<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType>({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\nconst SearchCharacters: React.FC<SearchCharactersPropsType> = (props) => {\r\n    const {setSearchingParams, setCurrentPage, setShowCharactersFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchCharactersFormValuesType) => {\r\n\r\n        console.log(formValue)\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFrom('search')\r\n\r\n    };\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\ntype SearchCharactersFormKeysType = GetStringKeysType<SearchCharactersFormValuesType>;\r\ntype SearchCharactersFormOwnPropsType = {}\r\n\r\n\r\n","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingCharactersParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setCurrentPage, setShowCharactersFrom})(SearchCharacters);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n}\r\n\r\nexport type SearchCharactersPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\n\r\n\r\n\r\nexport default SearchCharactersContainer;\r\n","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nconst Preloader: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circular}>\r\n            <CircularProgress size={100} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport {\r\n    Badge,\r\n    CircularProgress,\r\n    Collapse,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharactersPropsType} from \"./CharactersContainer\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n});\r\n\r\nconst Characters: React.FC<CharactersPropsType> = (props) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage,\r\n        getCharacters, setCurrentPage, totalCharactersCount,\r\n        getCharactersFromSearch, searchingParams, isLoading,\r\n        lanError, setShowCharactersFrom, showCharactersFrom, currentEpisode,\r\n        currentLocation\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (showCharactersFrom === 'all') {\r\n            getCharacters(currentPage);\r\n        }\r\n        if (showCharactersFrom === 'search') {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFrom]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowCharactersFrom('all')\r\n        setCurrentPage(1);\r\n    }\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            setOpen(true)\r\n        }\r\n    }, [lanError])\r\n\r\n    const handleOk = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"xs\"\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={open}\r\n                >\r\n                    <DialogTitle id=\"confirmation-dialog-title\">Error</DialogTitle>\r\n                    <DialogContent>\r\n                        Some error occurred on the network\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={handleOk} color=\"primary\">\r\n                            Ok\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchCharactersContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchCharactersClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showCharactersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showCharactersFrom === 'episode' && <div className={classes.count}>\r\n                    {`List of the characters from episode: ${currentEpisode.episode} - ${currentEpisode.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'location' && <div className={classes.count}>\r\n                    {currentLocation && `List of the characters from location: ${currentLocation.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the characters from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total characters count: `}\r\n                    <Badge badgeContent={totalCharactersCount} color=\"primary\" max={99999} showZero>\r\n                        <PeopleIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                {!characters.length || showCharactersFrom === 'episode' || showCharactersFrom === 'location' ? null :\r\n                    <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                               onPaginatorItemClick={onPaginatorItemClick}\r\n                               currentPage={currentPage}\r\n                    />}\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <Preloader/>\r\n                : <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                    {charactersElements}\r\n                </Grid>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, EpisodeType, LocationType, SearchingCharactersParamsType} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    searchingParams: SearchingCharactersParamsType\r\n    isLoading: boolean\r\n    lanError: boolean\r\n    totalCharactersCount: number\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n    currentEpisode: EpisodeType\r\n    currentLocation: null | LocationType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingCharactersParamsType, currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    currentLocation: state.locations.currentLocation\r\n});\r\n\r\nexport type CharactersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCharacters, setCurrentPage, getCharactersFromSearch,\r\n        setShowCharactersFrom\r\n    })(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        borderBottom: '1px #ccc solid',\r\n        paddingLeft: 10,\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n\r\n});\r\n\r\nconst RowCustom: React.FC<RowCustomPropsTypes> = (props) => {\r\n    const classes = useStyles()\r\n    const {leftContent, rightContent} = props\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1'>{leftContent}</Typography>\r\n            <Typography variant='h6' color='primary'>{rightContent}</Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RowCustom;\r\n\r\ntype RowCustomPropsTypes = {\r\n    leftContent: string\r\n    rightContent: string\r\n}","import * as React from \"react\";\r\nimport {useEffect} from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card, CardContent,\r\n    CardMedia,\r\n    CircularProgress,\r\n    Grid, List, ListItem,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodesDataType, PathParamsType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport {CharactersInfoPropsType} from \"./CharacterInfoContainer\";\r\nimport RowCustom from \"../../../Common/RowCustom/RowCustom\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        textTransform: 'none',\r\n        marginBottom: 10\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10,\r\n        marginRight: 20\r\n    },\r\n    cardContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    episode: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    },\r\n    name: {\r\n        textAlign: 'center',\r\n        paddingTop: 5,\r\n        paddingBottom: 5\r\n    },\r\n    characterInfoBlock: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'flex-start'\r\n    },\r\n    characterInfo: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\ntype ListItemLinkPropsType = {\r\n    icon?: React.ReactElement\r\n    primary: string\r\n    to: string\r\n    onClick: () => void\r\n    children: any\r\n}\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = (props) => {\r\n    const classes = useStyles()\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.episode}>\r\n            <ListItem button component={renderLink} onClick={onClick}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='textPrimary' variant='subtitle1'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\ntype PropsType = CharactersInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, match, getCurrentCharacter, isLoading,\r\n        episodesOfCurrentCharacter, setCurrentSidebarMenuItem, getAroundId, aroundId,\r\n        lanError, showCharactersFrom, setShowCharactersFrom, setShowEpisodesFrom,\r\n        setEpisodes\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentCharacter(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    }\r\n\r\n    const onEpisodeClick = () => {\r\n        setCurrentSidebarMenuItem(3);\r\n        setShowEpisodesFrom('character');\r\n        // записать в episodes эпизоды из характера\r\n        if (episodesOfCurrentCharacter) {\r\n            const episodesOfCurrentCharacterData = {} as EpisodesDataType;\r\n            episodesOfCurrentCharacterData.results = episodesOfCurrentCharacter\r\n\r\n            episodesOfCurrentCharacterData.info = {\r\n                count: episodesOfCurrentCharacter.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setEpisodes(episodesOfCurrentCharacterData)\r\n        }\r\n    };\r\n\r\n    const onBackToAllCharacters = () => {\r\n        setShowCharactersFrom('all');\r\n    }\r\n\r\n    if (lanError) {\r\n        return <Redirect to=\"/characters\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between'>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous character\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllCharacters}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to all characters\r\n                </Button>\r\n\r\n                {(showCharactersFrom === 'search' || showCharactersFrom === 'episode' || showCharactersFrom === 'location') &&\r\n                <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to characters from {showCharactersFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next character\r\n                </Button>\r\n            </Grid>\r\n\r\n            {(isLoading || !currentCharacter || !episodesOfCurrentCharacter\r\n                || +match.params.id !== currentCharacter.id)\r\n                ? <Preloader/>\r\n                : <div>\r\n                    <div className={classes.characterInfoBlock}>\r\n                        <div className={classes.cardContainer}>\r\n                            <Card className={classes.card}>\r\n                                <CardMedia\r\n                                    className={classes.media}\r\n                                    image={currentCharacter.image}/>\r\n                                <Typography color='error' variant='h5' className={classes.name}>\r\n                                    {currentCharacter.name}\r\n                                </Typography>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className={classes.characterInfo}>\r\n                            <RowCustom leftContent='Gender:' rightContent={currentCharacter.gender}/>\r\n                            <RowCustom leftContent='Status:' rightContent={currentCharacter.status}/>\r\n                            <RowCustom leftContent='Species:' rightContent={currentCharacter.species}/>\r\n                            {currentCharacter.type &&\r\n                            <RowCustom leftContent='Subspecies:' rightContent={currentCharacter.type}/>}\r\n                            <RowCustom leftContent='Origin location:' rightContent={currentCharacter.origin.name}/>\r\n                            <RowCustom leftContent='Last known location endpoint:'\r\n                                       rightContent={currentCharacter.location.name}/>\r\n\r\n                            <div className={classes.titleOfList}>\r\n                                <Typography variant='h6' color='secondary' component='span'>\r\n                                    {'List of episodes in which this character appeared: '}\r\n                                </Typography>\r\n                                <Badge badgeContent={episodesOfCurrentCharacter.length} color=\"secondary\" max={99999}\r\n                                       showZero>\r\n                                    <MovieIcon/>\r\n                                </Badge>\r\n                            </div>\r\n\r\n                            <List>\r\n                                {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                    onClick={onEpisodeClick}\r\n                                    key={episode.id}\r\n                                    to={`/episodes/${episode.id}`}\r\n                                    primary={`${episode.episode} - ${episode.name}`}>\r\n                                </ListItemLink>)}\r\n                            </List>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getAroundId, getCurrentCharacter} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodesDataType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    isLoading: boolean\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    lanError: boolean\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    getAroundId: (currentCharacterId: number, change: null | 'prev' | 'next') => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setEpisodes: (episodesData: EpisodesDataType) => void\r\n}\r\n\r\nexport type CharactersInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n// currentCharacterId,setCurrentCharacterId, setStartGettingAroundId, startGettingAroundId,idChange, idForSearch, setCurrentCharacter,\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    currentCharacter: state.characters.currentCharacter,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter,\r\n    aroundId: state.characters.aroundId,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n});\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setEpisodes = episodesAC.setEpisodes;\r\n\r\nconst CharacterInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    {},\r\n    StateType>(mapStateToProps,\r\n    {\r\n        getCurrentCharacter, setCurrentSidebarMenuItem, getAroundId,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setEpisodes\r\n    }), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import React from \"react\";\r\nimport {EpisodeType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\ntype PropsType = {\r\n    episode: EpisodeType\r\n}\r\n\r\nconst onClick = () => {\r\n\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Episode = (props: PropsType) => {\r\n    const classes = useStyles();\r\n    const {episode} = props;\r\n    return (\r\n        <ListItemLink\r\n            to={`/episodes/${episode.id}`}\r\n            primary={`${episode.episode} - ${episode.name}`}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Episode;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport {GetStringKeysType} from \"../../../../Types/Types\";\r\nimport {SearchCharactersPropsType} from \"../../Characters/SearchCharacters/SearchCharactersContainer\";\r\nimport {SearchEpisodesPropsType} from \"./SearchEpisodesContainer\";\r\nimport {\r\n    empty,\r\n    SearchCharactersFormValuesType,\r\n    SearchEpisodesErrorsType,\r\n    SearchEpisodesValidateType\r\n} from \"../../../../Helpers/Validators\";\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchEpisodesForm: React.FC<InjectedFormProps<SearchEpisodesFormValuesType, SearchEpisodesFormOwnPropsType> & SearchEpisodesFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='episode' component={RenderTextField} label='Episode' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate: SearchEpisodesValidateType = (values) => {\r\n    let errors = {} as SearchEpisodesErrorsType;\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.episode) && values.episode !== '') {\r\n        errors.episode = 'episode field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) && (!values.episode || empty(values.episode))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchEpisodesForm = reduxForm<SearchEpisodesFormValuesType, SearchEpisodesFormOwnPropsType>({\r\n    form: 'searchEpisodes',\r\n    validate\r\n})(SearchEpisodesForm);\r\n\r\nconst SearchEpisodes: React.FC<SearchEpisodesPropsType> = (props) => {\r\n    const {setShowEpisodesFrom, setSearchingParams} = props;\r\n    const onSubmit = (formValue: SearchEpisodesFormValuesType) => {\r\n        setSearchingParams(formValue);\r\n        setShowEpisodesFrom('search');\r\n    }\r\n    return (\r\n        <ReduxSearchEpisodesForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchEpisodes;\r\n\r\ntype SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\ntype SearchEpisodesFormKeysType = GetStringKeysType<SearchEpisodesFormValuesType>;\r\ntype SearchEpisodesFormOwnPropsType = {}\r\n","import SearchEpisodes from \"./SearchEpisodes\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {SearchingEpisodesParamsType} from \"../../../../Types/Types\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setSearchingParams = episodesAC.setSearchingParams;\r\n\r\nconst SearchEpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setShowEpisodesFrom, setSearchingParams})(SearchEpisodes);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => void\r\n   }\r\n\r\nexport type SearchEpisodesPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchEpisodesContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episode from \"./Episode/Episode\";\r\nimport {Badge, CircularProgress, Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchEpisodesContainer from \"./SearchEpisodes/SearchEpisodesContainer\";\r\nimport {EpisodesPropsType} from \"./EpisodesContainer\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nconst Episodes: React.FC<EpisodesPropsType> = (props) => {\r\n    const {\r\n        episodes, showEpisodesFrom, setShowEpisodesFrom,\r\n        getEpisodes, searchingParams, getEpisodesFromSearch,\r\n        isLoading, totalEpisodesCount, currentCharacter\r\n    } = props;\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    let episodesElements = episodes.map(item => <Episode key={item.id} episode={item}/>);\r\n\r\n    const onSearchEpisodesClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowEpisodesFrom('all')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (showEpisodesFrom === 'all') {\r\n            getEpisodes();\r\n        }\r\n        if (showEpisodesFrom === 'search') {\r\n            getEpisodesFromSearch(searchingParams);\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.episode, showEpisodesFrom]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchEpisodesContainer/>\r\n                </Collapse>\r\n            </div>\r\n\r\n            <Button onClick={onSearchEpisodesClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n\r\n            <Button onClick={onShowAllClick}\r\n                    disabled={showEpisodesFrom === 'all'}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n\r\n            {showEpisodesFrom === 'search' && <div className={classes.count}>\r\n                {'List of the episodes from search'}\r\n            </div>}\r\n\r\n            {showEpisodesFrom === 'character' && <div className={classes.count}>\r\n                {currentCharacter && `List of the episodes in which this character have been seen: ${currentCharacter.name}`}\r\n            </div>}\r\n\r\n            <div className={classes.count}>\r\n                {`Total episodes count: `}\r\n                <Badge badgeContent={totalEpisodesCount} color=\"primary\" max={99999} showZero>\r\n                    <MovieIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {episodesElements}\r\n                </List>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Episodes;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {CharacterType, EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episodes from \"./Episodes\";\r\nimport {episodesAC, getEpisodes, getEpisodesFromSearch} from \"../../../store/episodes-reducer\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n    searchingParams: SearchingEpisodesParamsType\r\n    isLoading: boolean\r\n    totalEpisodesCount: number\r\n    currentCharacter: CharacterType | null | undefined\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    getEpisodes: () => void\r\n    getEpisodesFromSearch: (searchingParams: SearchingEpisodesParamsType) => void\r\n}\r\n\r\nexport type EpisodesPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    episodes: state.episodes.episodes,\r\n    totalPagesCount: state.episodes.totalPagesCount,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n    searchingParams: state.episodes.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    currentCharacter: state.characters.currentCharacter\r\n});\r\n\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodesContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    {}, StateType>(mapStateToProps,\r\n    {\r\n        setShowEpisodesFrom, getEpisodes,\r\n        getEpisodesFromSearch\r\n    })(Episodes);\r\n\r\nexport default EpisodesContainer;","import React, {useEffect} from \"react\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    CircularProgress, Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodeInfoPropsType} from \"./EpisodeInfoContainer\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\n\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});\r\n\r\ntype PropsType = EpisodeInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode,\r\n        setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n        setCharacters, getAroundId, setShowEpisodesFrom, aroundId, showEpisodesFrom\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentEpisode(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onBackToAllEpisodes = () => {\r\n        setShowEpisodesFrom('all');\r\n    }\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('episode'); // изменить источник Characters\r\n        // записать в characters характеры из эпизода\r\n        if (charactersOfCurrentEpisode) {\r\n            const charactersOfCurrentEpisodeData = {} as CharactersDataType;\r\n            charactersOfCurrentEpisodeData.results = charactersOfCurrentEpisode\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentEpisodeData.info = {\r\n                count: charactersOfCurrentEpisode.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setCharacters(charactersOfCurrentEpisodeData)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous episode\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllEpisodes}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to all episodes\r\n                </Button>\r\n\r\n                {(showEpisodesFrom === 'search' || showEpisodesFrom === 'character') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to episodes from {showEpisodesFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next episode\r\n                </Button>\r\n            </Grid>\r\n\r\n            {isLoading || !currentEpisode || !charactersOfCurrentEpisode || +match.params.id !== currentEpisode.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5'>\r\n                        {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                    </Typography>\r\n\r\n                    <Typography color='textSecondary' variant='h6'>\r\n                        The air date: {currentEpisode.air_date}\r\n                    </Typography>\r\n\r\n                    <Typography color='textPrimary' variant='h6'>\r\n                        {'List of characters who have been seen in the episode '}\r\n                        <Badge badgeContent={charactersOfCurrentEpisode.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </Typography>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentEpisode\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                      key={character.id}\r\n                                                      onClick={onCharacterClick}\r\n                                                      color={'default'}\r\n                                                      className={classes.characterItem}\r\n                                                      component={RouterLink}\r\n                                                      to={`/characters/${character.id}`}\r\n                                                      size='large'>\r\n                                    <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                    {character.name}\r\n                                </Button>\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {episodesAC, getAroundId, getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    //totalEpisodesCount: number\r\n    aroundId: {prevId: null | number, nextId: null | number}\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n    //totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    aroundId: state.episodes.aroundId,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n});\r\n\r\nexport type EpisodeInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodeInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setCharacters, getAroundId,\r\n        setShowEpisodesFrom}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import React from \"react\";\r\nimport {LocationType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\ntype PropsType = {\r\n    location: LocationType\r\n    setCurrentLocationId: (id: number | null) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem onClick={onClick} button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Location: React.FC<PropsType> = (props) => {\r\n    const {location, setCurrentLocationId} = props;\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n        setCurrentLocationId(location.id)\r\n    };\r\n    return (\r\n        <ListItemLink\r\n            to={`/locations/${location.id}`}\r\n            onClick={onClick}\r\n            primary={location.name}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Location;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport {GetStringKeysType} from \"../../../../Types/Types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport Select from \"@material-ui/core/Select/Select\";\r\nimport {\r\n    empty,\r\n    SearchLocationsErrorsType,\r\n    SearchLocationsFormValuesType,\r\n    SearchLocationsValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport {SearchLocationsPropsType} from \"./SearchLocationsContainer\";\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\ntype PropsType = {\r\n    input: any\r\n    label: string\r\n    meta: { touched: boolean, error: boolean }\r\n    children: any\r\n}\r\n\r\nconst RenderSelectField: React.FC<PropsType> = (props) => {\r\n    const {input, label, meta: {touched, error}, children, ...custom} = props;\r\n    return (\r\n        <FormControl>\r\n            <InputLabel htmlFor={label}>{label}</InputLabel>\r\n            <Select\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: label,\r\n                    id: label\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchLocationsForm: React.FC<InjectedFormProps<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType> & SearchLocationsFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='dimension' component={RenderTextField} label='Dimension' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate: SearchLocationsValidateType = (values) => {\r\n    let errors = {} as SearchLocationsErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (empty(values.dimension) && (values.dimension !== '')) {\r\n        errors.dimension = 'dimension field is empty'\r\n    }\r\n    if (\r\n        (!values.name || empty(values.name))\r\n        && (!values.type || empty(values.type))\r\n        && (!values.dimension || empty(values.dimension))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchLocationsForm = reduxForm<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType>({\r\n    form: 'searchLocations',\r\n    validate\r\n})(SearchLocationsForm);\r\n\r\nconst SearchLocations: React.FC<SearchLocationsPropsType> = (props) => {\r\n    const {setSearchingParams, setShowLocationsFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchLocationsFormValuesType) => {\r\n        setSearchingParams(formValue)\r\n        setShowLocationsFrom('search')\r\n    };\r\n    return (\r\n        <ReduxSearchLocationsForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchLocations;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\ntype SearchLocationsFormKeysType = GetStringKeysType<SearchLocationsFormValuesType>;\r\ntype SearchLocationsFormOwnPropsType = {}\r\n\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {locationsAC} from \"../../../../store/locations-reducer\";\r\nimport SearchLocations from \"./SearchLocations\";\r\nimport {SearchingLocationsParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = locationsAC.setSearchingParams;\r\n//const setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\n\r\nconst SearchLocationsContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setShowLocationsFrom})(SearchLocations);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => void\r\n    //setCurrentPage: (currentPage: number) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\nexport type SearchLocationsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchLocationsContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Badge, Breadcrumbs, ButtonGroup, CircularProgress, Collapse, IconButton, Link, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Location from './Location/Location'\r\nimport {LocationsPropsType} from \"./LocationsContainer\";\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport SearchLocationsContainer from \"./SearchLocations/SearchLocationsContainer\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    alphabetButton: {\r\n        minWidth: 30,\r\n        width: 30,\r\n        height: 30,\r\n        padding: 0,\r\n        borderRadius: 15,\r\n        textTransform: 'none'\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    selected: {\r\n        backgroundColor: '#ccc'\r\n    }\r\n});\r\n\r\nconst Locations: React.FC<LocationsPropsType> = (props) => {\r\n    const {\r\n        locations, getLocations, searchingParams, getLocationsFromSearch,\r\n        showLocationsFrom, setShowLocationsFrom, totalLocationsCount,\r\n        setCurrentLocationId, isLoading\r\n    } = props;\r\n\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n    const [selectedLetter, setSelectedLetter] = useState('All');\r\n\r\n    const classes = useStyles();\r\n\r\n    const locationsElements = locations.map(item => {\r\n        if (selectedLetter === 'All') return <Location key={item.id} location={item}\r\n                                                       setCurrentLocationId={setCurrentLocationId}/>\r\n        if (selectedLetter !== 'All' && item.name[0] === selectedLetter) {\r\n            return <Location key={item.id} location={item} setCurrentLocationId={setCurrentLocationId}/>\r\n        }\r\n    });\r\n\r\n    const alphabetCustom = [] as Array<string>;\r\n    locations.forEach(location => {\r\n        if (!alphabetCustom.includes(location.name[0])) {\r\n            alphabetCustom.push(location.name[0])\r\n        }\r\n    });\r\n    alphabetCustom.sort((a, b) => {\r\n        if (a > b) return 1;\r\n        if (a < b) return -1;\r\n        return 0;\r\n    });\r\n    alphabetCustom.push('All');\r\n\r\n    const arrayOfButtons = alphabetCustom.map(item => {\r\n        const onAlphabetButtonClick = () => {\r\n            setSelectedLetter(item);\r\n        };\r\n        const className = (item === selectedLetter)\r\n            ? `${classes.alphabetButton} ${classes.selected}`\r\n            : `${classes.alphabetButton}`\r\n        return <Button className={className}\r\n                       onClick={onAlphabetButtonClick}\r\n                       key={item}\r\n                       size='small'\r\n                       variant='outlined'>\r\n            {item}\r\n        </Button>\r\n    });\r\n\r\n    const onSearchClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowLocationsFrom('all');\r\n        setSelectedLetter('All');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (showLocationsFrom === 'all') {\r\n            getLocations();\r\n        }\r\n        if (showLocationsFrom === 'search') {\r\n            getLocationsFromSearch(searchingParams);\r\n            setSelectedLetter('All')\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.type, searchingParams.dimension, showLocationsFrom]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchLocationsContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showLocationsFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showLocationsFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the locations from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total locations count: `}\r\n                    <Badge badgeContent={totalLocationsCount} color=\"primary\" max={99999} showZero>\r\n                        <RoomIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                <div>\r\n                    {arrayOfButtons}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {locationsElements}\r\n                </List>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Locations;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {LocationType, SearchingLocationsParamsType} from \"../../../Types/Types\";\r\nimport {getLocations, getLocationsFromSearch, locationsAC} from \"../../../store/locations-reducer\";\r\nimport Locations from \"./Locations\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\n\r\nexport type MapStatePropsType = {\r\n    locations: Array<LocationType>\r\n    totalPagesCount: number\r\n    searchingParams: SearchingLocationsParamsType\r\n    showLocationsFrom: 'all' | 'search'\r\n    totalLocationsCount: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCurrentLocationId = locationsAC.setCurrentLocationId;\r\n\r\nexport type MapDispatchPropsType = {\r\n    getLocations: () => void\r\n    getLocationsFromSearch: (searchingParams: SearchingLocationsParamsType) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    setCurrentLocationId: (currentLocationId: number | null) => void\r\n}\r\n\r\nexport type LocationsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    locations: state.locations.locations,\r\n    totalPagesCount: state.locations.totalPagesCount,\r\n    searchingParams: state.locations.searchingParams,\r\n    showLocationsFrom: state.locations.showLocationsFrom,\r\n    totalLocationsCount: state.locations.totalLocationsCount,\r\n    isLoading: state.app.isLoading\r\n});\r\n\r\nconst LocationsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {getLocations, getLocationsFromSearch, setShowLocationsFrom,\r\n    setCurrentLocationId})(Locations);\r\n\r\nexport default LocationsContainer;","import React, {useEffect} from \"react\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    CircularProgress, Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {LocationInfoPropsType} from \"./LocationInfoContainer\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport RowCustom from \"../../../Common/RowCustom/RowCustom\";\r\n\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    }\r\n});\r\n\r\ntype PropsType = LocationInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst LocationInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentLocation, currentLocation, charactersOfCurrentLocation,\r\n        setCurrentSidebarMenuItem, setShowLocationsFrom, getAroundId, aroundId,\r\n        showLocationsFrom, setCharacters, setShowCharactersFrom,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentLocation(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('location'); // изменить источник Characters\r\n\r\n        // записать в characters характеры из локации\r\n        if (charactersOfCurrentLocation) {\r\n            const charactersOfCurrentLocationData = {} as CharactersDataType;\r\n            charactersOfCurrentLocationData.results = charactersOfCurrentLocation\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentLocationData.info = {\r\n                count: charactersOfCurrentLocation.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setCharacters(charactersOfCurrentLocationData)\r\n        }\r\n\r\n    }\r\n\r\n    const onBackToAllLocations = () => {\r\n        setShowLocationsFrom('all');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading} //\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous location\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllLocations}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<RoomIcon/>}>\r\n                    Back to all locations\r\n                </Button>\r\n\r\n                {(showLocationsFrom === 'search') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to locations from search\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next location\r\n                </Button>\r\n            </Grid>\r\n\r\n            { isLoading || !currentLocation || !charactersOfCurrentLocation || +match.params.id !== currentLocation.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5' className={classes.titleOfList}>\r\n                        {currentLocation.name}\r\n                    </Typography>\r\n\r\n                    <RowCustom leftContent='The type of the location:' rightContent={currentLocation.type}/>\r\n                    <RowCustom leftContent='The dimension in which the location is located:' rightContent={currentLocation.dimension}/>\r\n\r\n                    <div className={classes.titleOfList}>\r\n                        <Typography variant='h6' color='secondary' component='span'>\r\n                        {'List of character who have been last seen in the location '}\r\n                        </Typography>\r\n                        <Badge badgeContent={charactersOfCurrentLocation.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentLocation\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                   key={character.id}\r\n                                                   onClick={onCharacterClick}\r\n                                                   color={'default'}\r\n                                                   className={classes.characterItem}\r\n                                                   component={RouterLink}\r\n                                                   to={`/characters/${character.id}`}\r\n                                                   size='large'>\r\n                                        <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                        {character.name}\r\n                                    </Button>\r\n\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LocationInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, LocationsDataType, LocationType} from \"../../../../Types/Types\";\r\nimport {getAroundId, getCurrentLocation, locationsAC} from \"../../../../store/locations-reducer\";\r\nimport LocationInfo from \"./LocationInfo\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentLocation: LocationType | null\r\n    charactersOfCurrentLocation: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    showLocationsFrom: 'all' | 'search'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentLocation: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nexport type LocationInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentLocation: state.locations.currentLocation,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentLocation: state.locations.charactersOfCurrentLocation,\r\n    aroundId: state.locations.aroundId,\r\n    showLocationsFrom: state.locations.showLocationsFrom\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\nconst LocationInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCurrentLocation, setCurrentSidebarMenuItem,\r\n        setShowLocationsFrom,\r\n        getAroundId, setCharacters, setShowCharactersFrom\r\n    }), withRouter)(LocationInfo);\r\n\r\nexport default LocationInfoContainer;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {Route} from \"react-router-dom\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodesContainer from \"./Episodes/EpisodesContainer\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\nimport LocationsContainer from \"./Locations/LocationsContainer\";\r\nimport LocationInfoContainer from \"./Locations/LocationInfo/LocationInfoContainer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst Main = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n            <Toolbar/>\r\n            <Route exact path='/characters' component={CharactersContainer}/>\r\n            <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n            <Route exact path='/locations' component={LocationsContainer}/>\r\n            <Route path='/locations/:id' render={() => <LocationInfoContainer/>}/>\r\n            <Route exact path='/episodes' component={EpisodesContainer}/>\r\n            <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      root: {\n        display: 'flex',\n      }\n    }),\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n      <div className={classes.root}>\n        <Header/>\n        <Sidebar/>\n        <Main/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport locationsReducer from \"./locations-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer,\r\n    app: appReducer,\r\n    locations: locationsReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}