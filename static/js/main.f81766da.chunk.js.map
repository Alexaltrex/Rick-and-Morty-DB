{"version":3,"sources":["store/app-reducer.ts","DAL/api.ts","assets/logo.png","Helpers/Validators.ts","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Header/Header.tsx","CONST/const.ts","Components/Header/HeaderContainer.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator.tsx","Components/Common/renderSelectField.jsx","Components/Main/Characters/SearchCharacters/SearchCharacters.tsx","store/characters-reducer.ts","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Common/Preloader.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Common/RowCustom.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","store/locations-reducer.ts","Components/Main/Locations/Location/Location.tsx","Components/Main/Locations/SearchLocations/SearchLocations.tsx","Components/Main/Locations/SearchLocations/SearchLocationsContainer.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Locations/LocationsContainer.tsx","Components/Main/Locations/LocationInfo/LocationInfo.tsx","Components/Main/Locations/LocationInfo/LocationInfoContainer.tsx","Components/Main/Home/Home.tsx","Components/Common/PageNotFound.tsx","Components/Main/Main.tsx","Components/Main/MainContainer.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","Components/Common/ErrorBoundary.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx","store/sidebar-reducer.ts","store/episodes-reducer.ts","Components/Common/RenderTextField.tsx","Hooks/useCommonQueryParams.ts"],"names":["initialState","open","isLoading","lanError","appAC","setOpen","type","toggleLoading","setLanError","appReducer","state","action","instance","axios","create","baseURL","charactersAPI","getCharacters","currentPage","get","response","data","getCharacterByUrl","url","getCurrentCharacter","id","searchCharacters","searchingParams","str","name","gender","status","species","episodesAPI","getEpisodes","getCurrentEpisode","getEpisodesByUrl","searchEpisodes","episode","locationsAPI","getLocations","getCurrentLocation","getLocationByUrl","searchLocations","dimension","module","exports","empty","test","OwnIndexEnum","Header","props","classes","useStyles","AppBar","position","className","clsx","appBar","appBarShift","Toolbar","IconButton","color","aria-label","onClick","edge","menuButton","hide","Link","component","RouterLink","to","underline","link","Typography","variant","noWrap","makeStyles","theme","createStyles","transition","transitions","easing","sharp","duration","leavingScreen","width","marginLeft","easeOut","enteringScreen","marginRight","spacing","display","root","backgroundColor","indigo","lightBlue","HeaderContainer","connect","app","Character","character","useState","localIsLoading","setLocalIsLoading","Grid","item","Card","elevation","CardActionArea","actionArea","src","image","media","alt","onLoad","preloader","CircularProgress","size","CardContent","cardContent","gutterBottom","align","height","padding","paddingBottom","top","left","justifyContent","alignItems","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","Pagination","onChange","event","page","showFirstButton","showLastButton","count","shape","marginTop","marginBottom","renderSelectField","input","label","meta","touched","error","children","custom","FormControl","InputLabel","htmlFor","Select","native","inputProps","ReduxSearchCharactersForm","reduxForm","form","validate","values","errors","_error","handleSubmit","submitting","pristine","reset","onSubmit","Field","RenderTextField","textField","selectField","value","Button","startIcon","disabled","button","SearchCharacters","setSearchingParams","setCurrentPage","setShowCharactersFrom","formValue","textTransform","characters","totalCharactersCount","totalPagesCount","currentCharacter","next","prev","showCharactersFrom","episodesOfCurrentCharacter","aroundId","prevId","nextId","charactersAC","charactersData","charactersReducer","results","info","pages","SearchCharactersContainer","circular","Preloader","Characters","getCharactersFromSearch","currentEpisode","currentLocation","useCommonQueryParams","useQueryParam","NumberParam","currentPageQuery","setCurrentPageQuery","StringParam","showCharactersFromQuery","setShowCharactersFromQuery","nameQuery","setNameQuery","genderQuery","setGenderQuery","statusQuery","setStatusQuery","speciesQuery","setSpeciesQuery","typeQuery","setTypeQuery","useEffect","undefined","panelIsOpen","setPanelIsOpen","charactersElements","map","key","React","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","DialogTitle","DialogContent","DialogActions","autoFocus","Collapse","in","timeout","unmountOnExit","Badge","badgeContent","max","showZero","length","container","alignContent","justify","wrap","CharactersContainer","episodes","locations","dispatch","a","row","gridTemplateColumns","borderBottom","paddingLeft","RowCustom","leftContent","rightContent","ListItemLink","icon","primary","renderLink","useMemo","forwardRef","itemProps","ref","ListItem","CharacterInfo","match","setCurrentSidebarMenuItem","getAroundId","setShowEpisodesFrom","setEpisodes","direction","setDirection","params","onEpisodeClick","episodesOfCurrentCharacterData","endIcon","characterInfoBlock","cardContainer","card","CardMedia","characterInfo","origin","location","titleOfList","List","borderRadius","boxShadow","paper","textAlign","paddingTop","flexWrap","flexGrow","sidebarAC","episodesAC","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","targetId","change","getState","positionTargetIdInCharacters","findIndex","el","prevCharactersData","nextCharactersData","withRouter","EpisodeInfo","charactersOfCurrentEpisode","setCharacters","showEpisodesFrom","onCharacterClick","charactersOfCurrentEpisodeData","sort","b","buttons","toLocaleLowerCase","air_date","characterItem","Avatar","avatar","paddingRight","margin","EpisodeInfoContainer","totalLocationsCount","charactersOfCurrentLocation","showLocationsFrom","currentLocationId","locationsAC","locationsData","locationsReducer","Location","setCurrentLocationId","ReduxSearchLocationsForm","field","SearchLocations","setShowLocationsFrom","SearchLocationsContainer","Locations","getLocationsFromSearch","selectedLetter","setSelectedLetter","locationsElements","alphabetCustom","forEach","includes","push","arrayOfButtons","alphabetButton","selected","minWidth","LocationsContainer","resultWithTotalPageCount","arrPages","i","pageNumber","resultsArray","LocationInfo","charactersOfCurrentLocationData","LocationInfoContainer","currentLocationResponse","residents","positionTargetIdInLocations","e","flexDirection","img","Home","logo","PageNotFound","EpisodesContainer","lazy","Main","content","contentShift","drawerHeader","fallback","exact","path","render","mixins","toolbar","MainContainer","SidebarItem","currentItem","ownIndex","SidebarItemContainer","sidebar","Sidebar","useTheme","Drawer","drawer","anchor","drawerPaper","Divider","flexShrink","title","SidebarContainer","ErrorBoundary","errorInfo","this","setState","style","whiteSpace","toString","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","sidebarReducer","episodesReducer","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","ReactRouterRoute","Route","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","totalEpisodesCount","episodesData","setCurrentEpisode","setCharactersOfCurrentEpisode","setAroundId","getCurrentEpisodeResponse","getEpisodesFromSearch","log","positionTargetIdInEpisodes","invalid","placeholder","helperText","useDispatch","useSelector","sidebarItemQuery","setSidebarItemQuery"],"mappings":"2KAEMA,EAAe,CACjBC,MAAM,EACNC,WAAW,EACXC,UAAU,GAsBDC,EAAQ,CACjBC,QAAS,SAACJ,GAAD,MAAoB,CAACK,KAAM,eAAgBL,SACpDM,cAAe,SAACL,GAAD,MAAyB,CAACI,KAAM,qBAAsBJ,cACrEM,YAAa,SAACL,GAAD,MAAwB,CAACG,KAAM,oBAAqBH,cAGtDM,IAtBI,WAAqE,IAApEC,EAAmE,uDAA3DV,EAAcW,EAA6C,uCACnF,OAAQA,EAAOL,MACX,IAAK,eACD,OAAO,eAAII,EAAX,CAAkBT,KAAMU,EAAOV,OAEnC,IAAK,qBACD,OAAO,eAAIS,EAAX,CAAkBR,UAAWS,EAAOT,YAExC,IAAK,oBACD,OAAO,eAAIQ,EAAX,CAAkBP,SAAUQ,EAAOR,WAEvC,QACI,OAAOO,K,oLCbbE,EAAWC,IAAMC,OAAO,CACtBC,QAAS,qCAGAC,EAAgB,CACnBC,cADmB,WACa,IAAD,sIAAjBC,EAAiB,+BAAH,EAAG,SACZN,EAASO,IAAT,0BAAoDD,IADxC,cAC7BE,EAD6B,yBAE1BA,EAASC,MAFiB,8CAI/BC,kBALmB,SAKDC,GAAc,OAAD,0HACZV,IAAMM,IAAmBI,GADb,cAC7BH,EAD6B,yBAE1BA,EAASC,MAFiB,8CAI/BG,oBATmB,SASCC,GAAa,OAAD,0HACbb,EAASO,IAAT,oBAAyCM,IAD5B,cAC9BL,EAD8B,yBAE/BA,EAASC,MAFsB,8CAKpCK,iBAduB,SAcNC,EAAgDT,GAAsB,OAAD,mHACpFU,EAAM,GACND,EAAgBE,OAAMD,EAAG,UAAMA,EAAN,gBAAiBD,EAAgBE,OAC1DF,EAAgBG,SAAQF,EAAG,UAAMA,EAAN,mBAAoBD,EAAgBG,SAC/DH,EAAgBI,SAAQH,EAAG,UAAMA,EAAN,mBAAoBD,EAAgBI,SAC/DJ,EAAgBK,UAASJ,EAAG,UAAMA,EAAN,oBAAqBD,EAAgBK,UACjEL,EAAgBrB,OAAMsB,EAAG,UAAMA,EAAN,iBAAkBD,EAAgBrB,OAC/DsB,EAAG,UAAMA,EAAN,iBAAkBV,GAPmE,SAQnEN,EAASO,IAAT,qBAA+CS,IARoB,cAQpFR,EARoF,yBASjFA,EAASC,MATwE,gDAanFY,EAAc,CACjBC,YADiB,WACa,IAAD,sIAAjBhB,EAAiB,+BAAH,EAAG,SACVN,EAASO,IAAT,wBAAgDD,IADtC,cAC3BE,EAD2B,yBAExBA,EAASC,MAFe,8CAI7Bc,kBALiB,SAKCV,GAAa,OAAD,0HACXb,EAASO,IAAT,kBAAqCM,IAD1B,cAC5BL,EAD4B,yBAEzBA,EAASC,MAFgB,8CAI9Be,iBATiB,SASAb,GAAc,OAAD,0HACXV,IAAMM,IAAiBI,GADZ,cAC5BH,EAD4B,yBAEzBA,EAASC,MAFgB,8CAI9BgB,eAbiB,SAaFV,GAAgE,IAAD,wIAAjBT,EAAiB,+BAAH,EACzEU,EAAM,GACND,EAAgBE,OAAMD,EAAG,UAAMA,EAAN,gBAAiBD,EAAgBE,OAC1DF,EAAgBW,UAASV,EAAG,UAAMA,EAAN,oBAAqBD,EAAgBW,UACrEV,EAAG,UAAMA,EAAN,iBAAkBV,GAJ2D,SAK3DN,EAASO,IAAT,mBAA2CS,IALgB,cAK5ER,EAL4E,yBAMzEA,EAASC,MANgE,+CAW3EkB,EAAe,CAClBC,aADkB,WACa,IAAD,sIAAjBtB,EAAiB,+BAAH,EAAG,SACXN,EAASO,IAAT,yBAAkDD,IADvC,cAC5BE,EAD4B,yBAEzBA,EAASC,MAFgB,8CAI9BoB,mBALkB,SAKChB,GAAa,OAAD,0HACZb,EAASO,IAAT,mBAAuCM,IAD3B,cAC7BL,EAD6B,yBAE1BA,EAASC,MAFiB,8CAI/BqB,iBATkB,SASDnB,GAAc,OAAD,0HACXV,IAAMM,IAAkBI,GADb,cAC5BH,EAD4B,yBAEzBA,EAASC,MAFgB,8CAI9BsB,gBAbkB,SAaFhB,GAAiE,IAAD,wIAAjBT,EAAiB,+BAAH,EAC3EU,EAAM,GACND,EAAgBE,OAAMD,EAAG,UAAMA,EAAN,gBAAiBD,EAAgBE,OAC1DF,EAAgBrB,OAAMsB,EAAG,UAAMA,EAAN,oBAAqBD,EAAgBrB,OAC9DqB,EAAgBiB,YAAWhB,EAAG,UAAMA,EAAN,oBAAqBD,EAAgBiB,YACvEhB,EAAG,UAAMA,EAAN,iBAAkBV,GAL6D,SAM7DN,EAASO,IAAT,oBAA6CS,IANgB,cAM9ER,EAN8E,yBAO3EA,EAASC,MAPkE,iD,oBC9E1FwB,EAAOC,QAAU,IAA0B,kC,4FCE3C,kCAAO,IAAMC,EAAmB,SAACnB,GAAD,MAAS,QAAQoB,KAAKpB,K,4CCqB1CqB,E,4LCiCGC,EAxC2B,SAACC,GAAW,IAC3ClD,EAAiBkD,EAAjBlD,KAAMI,EAAW8C,EAAX9C,QACP+C,EAAUC,IAMhB,OACI,kBAACC,EAAA,EAAD,CACIC,SAAS,QACTC,UAAWC,kBAAKL,EAAQM,OAAT,eACVN,EAAQO,YAAc1D,KAG3B,kBAAC2D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,cACXC,QAfS,WACrB3D,GAAQ,IAeI4D,KAAK,QACLT,UAAWC,kBAAKL,EAAQc,WAAYjE,GAAQmD,EAAQe,OAEpD,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAMC,UAAWC,IACXC,GAAG,IACHC,UAAU,OACVhB,UAAWJ,EAAQqB,MACrB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAA/B,yBAcdvB,EAAYwB,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTrB,OAAQ,CACJsB,WAAYF,EAAMG,YAAYnE,OAAO,CAAC,SAAU,SAAU,CACtDoE,OAAQJ,EAAMG,YAAYC,OAAOC,MACjCC,SAAUN,EAAMG,YAAYG,SAASC,iBAG7C1B,YAAa,CACT2B,MAAM,eAAD,OCpEU,IDoEV,OACLC,WCrEe,IDsEfP,WAAYF,EAAMG,YAAYnE,OAAO,CAAC,SAAU,SAAU,CACtDoE,OAAQJ,EAAMG,YAAYC,OAAOM,QACjCJ,SAAUN,EAAMG,YAAYG,SAASK,kBAG7CvB,WAAY,CACRwB,YAAaZ,EAAMa,QAAQ,IAE/BxB,KAAM,CACFyB,QAAS,QAEbC,KAAM,CACFC,gBAAiBC,IAAO,KACxBjC,MAAOkC,IAAU,MAErBvB,KAAM,CACFX,MAAO,c,QE7EbzD,EAAUD,IAAMC,QAGhB4F,EAAkBC,aAPA,SAACxF,GAAD,MAA2C,CAC/DT,KAAMS,EAAMyF,IAAIlG,QAOF,CAACI,WADK6F,CACKhD,GAEd+C,I,qECiCAG,EAzCwB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAC/BjD,EAAUC,IADoC,EAERiD,oBAAS,GAFD,mBAE7CC,EAF6C,KAE7BC,EAF6B,KAOpD,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACC,EAAA,EAAD,CAAMnD,UAAWJ,EAAQyC,KAAMe,UAAW,GACtC,kBAACC,EAAA,EAAD,CAAgBxC,UAAWC,IACXd,UAAWJ,EAAQ0D,WACnBvC,GAAE,qBAAgB8B,EAAU5E,KAKxC,yBAAKsF,IAAKV,EAAUW,MACfxD,UAAWJ,EAAQ6D,MACnBC,IAAI,GACJC,OAjBC,WAClBX,GAAkB,MAmBFD,GACI,yBAAK/C,UAAWJ,EAAQgE,WACpB,kBAACC,EAAA,EAAD,CAAkBC,KAAM,IACNxD,MAAM,cAKxC,kBAACyD,EAAA,EAAD,CAAa/D,UAAWJ,EAAQoE,aAC5B,kBAAC9C,EAAA,EAAD,CAAY+C,cAAY,EAAC9C,QAAQ,QAAQN,UAAU,KAAKqD,MAAM,UACzDrB,EAAUxE,UAe7BwB,EAAYwB,YAAW,CACzBgB,KAAM,CACFP,MAAO,KAEX2B,MAAO,CACHU,OAAQ,KAEZH,YAAa,CACTI,QAAS,EACT,eAAgB,CACZC,cAAe,IAGvBT,UAAW,CACP7D,SAAU,WACVuE,IAAK,EACLC,KAAM,EACNzC,MAAO,OACPqC,OAAQ,OACR/B,QAAS,OACToC,eAAgB,SAChBC,WAAY,UAEhBnB,WAAY,CACRvD,SAAU,c,2BCtDH2E,EApBwB,SAAC/E,GAAgB,IAC7CgF,EAA+DhF,EAA/DgF,yBAA0BC,EAAqCjF,EAArCiF,qBAAsBlH,EAAeiC,EAAfjC,YACjDkC,EAAUC,IAIhB,OACI,yBAAKG,UAAWJ,EAAQyC,MACrB,kBAACwC,EAAA,EAAD,CAAYC,SALF,SAACC,EAA6BrH,GAC3CkH,EAAqBlH,IAKNsH,KAAMtH,EACNuH,iBAAe,EACfC,gBAAc,EACdC,MAAOR,EACPxD,QAAQ,WACR2C,KAAK,QACLsB,MAAM,cAevBvF,EAAYwB,KAAW,SAACC,GAAD,OACzBC,YAAa,CACTc,KAAM,CACF,QAAS,CACLgD,UAAW/D,EAAMa,QAAQ,GACzBmD,aAAchE,EAAMa,QAAQ,U,wJCR7BoD,GA3BW,SAAC,GAMO,IALHC,EAKE,EALFA,MACAC,EAIE,EAJFA,MAIE,IAHFC,KAAOC,EAGL,EAHKA,QAASC,EAGd,EAHcA,MAChBC,EAEE,EAFFA,SACGC,EACD,oDAC7B,OAEI,kBAACC,GAAA,EAAD,CAAaH,MAAOD,GAAWC,GAC3B,kBAACI,GAAA,EAAD,CAAYC,QAAQ,uBAAuBR,GAC3C,kBAACS,GAAA,EAAD,eACIC,QAAM,GACFX,EACAM,EAHR,CAIIM,WAAY,CACR/H,KAAMmH,EAAMnH,KACZJ,GAAI,yBAGP4H,K,8BCqEXQ,GAA4BC,aAA4E,CAC1GC,KAAM,mBACNC,SA1B2C,SAACC,GAC5C,IAAIC,EAAS,GAmBb,OAlBInH,aAAMkH,EAAOpI,OAA0B,KAAhBoI,EAAOpI,OAC9BqI,EAAOrI,KAAO,uBAEdkB,aAAMkH,EAAOjI,UAA+B,KAAnBiI,EAAOjI,UAChCkI,EAAOlI,QAAU,0BAEjBe,aAAMkH,EAAO3J,OAA0B,KAAhB2J,EAAO3J,OAC9B4J,EAAO5J,KAAO,uBAGb2J,EAAOnI,QACJmI,EAAOlI,QACNkI,EAAOpI,OAAQkB,aAAMkH,EAAOpI,OAC5BoI,EAAOjI,UAAWe,aAAMkH,EAAOjI,UAC/BiI,EAAO3J,OAAQyC,aAAMkH,EAAO3J,QAEjC4J,EAAOC,OAAS,uCAEbD,IAIuBJ,EA7E6H,SAAC3G,GAC5J,IAAMC,EAAUC,KACT+G,EAAoDjH,EAApDiH,aAAcC,EAAsClH,EAAtCkH,WAAYC,EAA0BnH,EAA1BmH,SAAUC,EAAgBpH,EAAhBoH,MAAOnB,EAASjG,EAATiG,MAClD,OACI,0BAAMoB,SAAUJ,GACZ,6BACI,kBAACK,EAAA,EAAD,CAAO5I,KAAK,OAAOwC,UAAWqG,KAAiBzB,MAAM,OAAOtE,QAAQ,WAAW2C,KAAK,QAC7E9D,UAAWJ,EAAQuH,YAC1B,kBAACF,EAAA,EAAD,CAAO5I,KAAK,UAAUwC,UAAWqG,KAAiBzB,MAAM,UAAUtE,QAAQ,WAAW2C,KAAK,QACnF9D,UAAWJ,EAAQuH,YAC1B,kBAACF,EAAA,EAAD,CAAO5I,KAAK,OAAOwC,UAAWqG,KAAiBzB,MAAM,OAAOtE,QAAQ,WAAW2C,KAAK,QAC7E9D,UAAWJ,EAAQuH,aAG9B,6BACI,kBAACF,EAAA,EAAD,CAAO5I,KAAK,SAASwC,UAAW0E,GAAmBE,MAAM,SAASzF,UAAWJ,EAAQwH,aACjF,4BAAQC,MAAO,KACf,4BAAQA,MAAO,SAAf,SACA,4BAAQA,MAAO,QAAf,QACA,4BAAQA,MAAO,WAAf,YAEJ,kBAACJ,EAAA,EAAD,CAAO5I,KAAK,SAASwC,UAAW0E,GAAmBE,MAAM,SAASzF,UAAWJ,EAAQwH,aACjF,4BAAQC,MAAO,KACf,4BAAQA,MAAO,UAAf,UACA,4BAAQA,MAAO,QAAf,QACA,4BAAQA,MAAO,cAAf,cACA,4BAAQA,MAAO,WAAf,aAGR,kBAACC,EAAA,EAAD,CAAQxK,KAAK,SACLqE,QAAQ,YACRoG,UAAW,kBAAC,KAAD,MACXC,SAAUX,GAAcC,EACxB9G,UAAWJ,EAAQ6H,QAJ3B,UAOA,kBAACH,EAAA,EAAD,CAAQxK,KAAK,SACLqE,QAAQ,YACRqG,SAAUV,GAAYD,EACtBU,UAAW,kBAAC,KAAD,MACX/G,QAASuG,EACT/G,UAAWJ,EAAQ6H,QAL3B,SAQC7B,IAAUkB,GACX,kBAAC5F,EAAA,EAAD,CAAYZ,MAAM,QAAQa,QAAQ,MAC7ByE,OAkDF8B,GAb+C,SAAC/H,GAAW,IAC/DgI,EAA6DhI,EAA7DgI,mBAAoBC,EAAyCjI,EAAzCiI,eAAgBC,EAAyBlI,EAAzBkI,sBAO3C,OACI,kBAACxB,GAAD,CAA2BW,SANd,SAACc,GACdF,EAAe,GACfD,EAAmBG,GACnBD,EAAsB,cAexBhI,GAAYwB,YAAW,CACzB8F,UAAW,CACPjF,YAAa,GACboD,aAAc,IAElB8B,YAAa,CACTlF,YAAa,GACbmD,UAAW,IAGfoC,OAAQ,CACJM,cAAe,OACf7F,YAAa,GACbmD,UAAW,GACXC,aAAc,M,qCC3HhB9I,GAAe,CACjBwL,WAAY,GACZC,qBAAsB,EACtBC,gBAAiB,EACjBxK,YAAa,EACbyK,iBAAkB,KAClBC,KAAM,KACNC,KAAM,KACNC,mBAAoB,MACpBnK,gBAAiB,CACbE,KAAM,GAAIC,OAAQ,GAAIC,OAAQ,GAAIC,QAAS,GAAI1B,KAAM,IAEzDyL,2BAA4B,KAC5BC,SAAU,CAACC,OAAQ,KAAuBC,OAAQ,OAwCzCC,GACM,SAACC,GAAD,MAAyC,CACpD9L,KAAM,4BACN8L,mBAHKD,GAKY,SAACR,GAAD,MAA6C,CAC9DrL,KAAM,mCACNqL,qBAPKQ,GASO,SAACjL,GAAD,MAA0B,CAACZ,KAAM,8BAA+BY,gBATvEiL,GAUW,SAACxK,GAAD,MAAqD,CACrErB,KAAM,kCACNqB,oBAZKwK,GAcsB,SAACJ,GAAD,MAAqD,CAChFzL,KAAM,+CACNyL,+BAhBKI,GAkBI,SAACF,EAAuBC,GAAxB,MAAmD,CAC5D5L,KAAM,2BACN2L,SACAC,WArBKC,GAuBc,SAACL,GAAD,MAAiD,CACpExL,KAAM,sCAAuCwL,uBAkLtCO,GA7OW,WAA4E,IAA3E3L,EAA0E,uDAAlEV,GAAcW,EAAoD,uCACjG,OAAQA,EAAOL,MACX,IAAK,4BACD,OAAO,eACAI,EADP,CAEI8K,WAAY7K,EAAOyL,eAAeE,QAClCb,qBAAsB9K,EAAOyL,eAAeG,KAAK5D,MACjD+C,gBAAiB/K,EAAOyL,eAAeG,KAAKC,MAC5CZ,KAAMjL,EAAOyL,eAAeG,KAAKX,KACjCC,KAAMlL,EAAOyL,eAAeG,KAAKV,OAGzC,IAAK,mCACD,OAAO,eAAInL,EAAX,CAAkBiL,iBAAkBhL,EAAOgL,mBAE/C,IAAK,8BACD,OAAO,eAAIjL,EAAX,CAAkBQ,YAAaP,EAAOO,cAE1C,IAAK,kCACD,OAAO,eAAIR,EAAX,CAAkBiB,gBAAiBhB,EAAOgB,kBAE9C,IAAK,+CACD,OAAO,eAAIjB,EAAX,CAAkBqL,2BAA4BpL,EAAOoL,6BAEzD,IAAK,2BACD,OAAO,eAAIrL,EAAX,CAAkBsL,SAAU,CAACC,OAAQtL,EAAOsL,OAAQC,OAAQvL,EAAOuL,UAEvE,IAAK,sCACD,OAAO,eAAIxL,EAAX,CAAkBoL,mBAAoBnL,EAAOmL,qBAEjD,QACI,OAAOpL,ICrDbyK,GAAqBgB,GACrBf,GAAiBe,GACjBd,GAAwBc,GAqBfM,GAlBmBvG,aAPV,SAACxF,GAAD,MAA0C,KAS9D,CACIyK,sBACAC,kBACAC,0BAL0BnF,CAM3BgF,I,8DCfD7H,GAAYwB,YAAW,CACzB6H,SAAU,CACN9G,QAAS,OACToC,eAAgB,YAaT2E,GATa,WACxB,IAAMvJ,EAAUC,KAChB,OACI,yBAAKG,UAAWJ,EAAQsJ,UACpB,kBAACrF,EAAA,EAAD,CAAkBC,KAAM,IAAKxD,MAAO,gB,uCC4KjC8I,GAlKmC,SAACzJ,GAAW,IAEtDqI,EAKArI,EALAqI,WAAYE,EAKZvI,EALYuI,gBAAiBxK,EAK7BiC,EAL6BjC,YAC7BD,EAIAkC,EAJAlC,cAAemK,EAIfjI,EAJeiI,eAAgBK,EAI/BtI,EAJ+BsI,qBAC/BoB,EAGA1J,EAHA0J,wBAAyBlL,EAGzBwB,EAHyBxB,gBAAiBzB,EAG1CiD,EAH0CjD,UAC1CC,EAEAgD,EAFAhD,SAAUkL,EAEVlI,EAFUkI,sBAAuBS,EAEjC3I,EAFiC2I,mBAAoBgB,EAErD3J,EAFqD2J,eACrDC,EACA5J,EADA4J,gBAAiB5B,EACjBhI,EADiBgI,mBAGrB6B,eATyD,MAYTC,aAAc,OAAQC,MAZb,mBAYlDC,EAZkD,KAYhCC,EAZgC,OAaKH,aAAc,WAAYI,MAb/B,mBAalDC,EAbkD,KAazBC,EAbyB,OAcvBN,aAAc,OAAQI,MAdC,mBAclDG,EAdkD,KAcvCC,EAduC,OAenBR,aAAc,SAAUI,MAfL,mBAelDK,EAfkD,KAerCC,EAfqC,OAgBnBV,aAAc,SAAUI,MAhBL,mBAgBlDO,EAhBkD,KAgBrCC,EAhBqC,OAiBjBZ,aAAc,UAAWI,MAjBR,mBAiBlDS,EAjBkD,KAiBpCC,EAjBoC,OAkBvBd,aAAc,OAAQI,MAlBC,oBAkBlDW,GAlBkD,MAkBvCC,GAlBuC,MAoBzDC,qBAAU,WACN9C,EAAe+B,GAAsCjM,GACrDmK,EAAsBiC,GAA8ExB,GACpGX,EAAmB,CACftJ,KAAM2L,GAAwB7L,EAAgBE,KAC9CC,OAAQ4L,GAA4B/L,EAAgBG,OACpDC,OAAQ6L,GAA4BjM,EAAgBI,OACpDC,QAAS8L,GAA8BnM,EAAgBK,QACvD1B,KAAM0N,IAAwBrM,EAAgBrB,SAEnD,IAEH4N,qBAAU,WACNd,EAAoC,IAAhBlM,EAAoBA,OAAciN,GACtDZ,EAAkD,QAAvBzB,EAA+BA,OAAqBqC,GAC/EV,EAAsC,KAAzB9L,EAAgBE,KAAcF,EAAgBE,UAAOsM,GAClER,EAA0C,KAA3BhM,EAAgBG,OAAgBH,EAAgBG,YAASqM,GACxEN,EAA0C,KAA3BlM,EAAgBI,OAAgBJ,EAAgBI,YAASoM,GACxEJ,EAA4C,KAA5BpM,EAAgBK,QAAiBL,EAAgBK,aAAUmM,GAC3EF,GAAsC,KAAzBtM,EAAgBrB,KAAcqB,EAAgBrB,UAAO6N,KACnE,CACCjN,EACA4K,EACAnK,IAGJ,IAAMyB,GAAUC,KA9CyC,GA+CnBiD,oBAAS,GA/CU,qBA+ClD8H,GA/CkD,MA+CrCC,GA/CqC,MAiDzDH,qBAAU,WACqB,QAAvBpC,GACA7K,EAAcC,GAES,WAAvB4K,GACAe,EAAwBlL,EAAiBT,KAG9C,CAACA,EAAaS,EAAgBI,OAAQJ,EAAgBK,QACrDL,EAAgBE,KAAMF,EAAgBG,OAAQH,EAAgBrB,KAAMwL,IAExE,IAAIwC,GAAqB9C,EAAW+C,KAAI,SAAA7H,GAAI,OAAI,kBAAC,EAAD,CAAW8H,IAAK9H,EAAKjF,GACV4E,UAAWK,OA7Db,GA4EjC+H,IAAMnI,UAAS,GA5EkB,qBA4ElDrG,GA5EkD,MA4E5CI,GA5E4C,MA8EzD6N,qBAAU,WACF/N,GACAE,IAAQ,KAEb,CAACF,IAMJ,OACI,oCACI,6BACI,kBAACuO,EAAA,EAAD,CACIC,sBAAoB,EACpBC,sBAAoB,EACpBC,SAAS,KACTC,kBAAgB,4BAChB7O,KAAMA,IAEN,kBAAC8O,EAAA,EAAD,CAAatN,GAAG,6BAAhB,SACA,kBAACuN,EAAA,EAAD,2CAGA,kBAACC,EAAA,EAAD,KACI,kBAACnE,EAAA,EAAD,CAAQoE,WAAS,EAAClL,QAnBrB,WACb3D,IAAQ,IAkB6CyD,MAAM,WAA3C,QAMR,kBAACqL,EAAA,EAAD,CAAUC,GAAIhB,GAAaiB,QAAQ,OAAOC,eAAa,GACnD,kBAAC,GAAD,OAGJ,kBAACxE,EAAA,EAAD,CAAQ9G,QA9CY,WAC5BqK,IAAgBD,KA8CA5K,UAAWJ,GAAQ6H,OACnBF,UAAWqD,GAAc,kBAAC,KAAD,MAAyB,kBAAC,KAAD,MAClDzJ,QAAQ,aACXyJ,GAAc,eAAiB,eAEpC,kBAACtD,EAAA,EAAD,CAAQ9G,QAhDG,WACnBqH,EAAsB,OACtBD,EAAe,IA+CCL,UAAW,kBAAC,KAAD,MACXC,SAAiC,QAAvBc,EACVtI,UAAWJ,GAAQ6H,OACnBtG,QAAQ,aAJhB,YAQwB,YAAvBmH,GAAoC,yBAAKtI,UAAWJ,GAAQuF,OAAxB,+CACQmE,EAAexK,QADvB,cACoCwK,EAAejL,OAGhE,aAAvBiK,GAAqC,yBAAKtI,UAAWJ,GAAQuF,OACzDoE,GAAe,gDAA6CA,EAAgBlL,OAGzD,WAAvBiK,GAAmC,yBAAKtI,UAAWJ,GAAQuF,OACvD,sCAGL,yBAAKnF,UAAWJ,GAAQuF,OAAxB,2BAEI,kBAAC4G,EAAA,EAAD,CAAOC,aAAc/D,EAAsB3H,MAAM,UAAU2L,IAAK,MAAOC,UAAQ,GAC3E,kBAAC,KAAD,QAINlE,EAAWmE,QAAiC,YAAvB7D,GAA2D,aAAvBA,EACvD,kBAAC,EAAD,CAAW3D,yBAA0BuD,EAC1BtD,qBArFE,SAAClH,GAC1BkK,EAAelK,IAqFQA,YAAaA,IAHmE,MAOlGhB,EACK,kBAAC,GAAD,MACA,kBAACuG,EAAA,EAAD,CAAMmJ,WAAS,EAACC,aAAa,UAAUC,QAAQ,gBAAgBC,KAAK,OAAOpK,QAAS,GACjF2I,MASfjL,GAAYwB,YAAW,CACzBoG,OAAQ,CACJvF,YAAa,GACb6F,cAAe,QAEnB5C,MAAO,CACHE,UAAW,GACXC,aAAc,MCpJhBsC,GAAiBe,GACjBd,GAAwBc,GACxBhB,GAAqBgB,GAYZ6D,GAVa9J,aAnBJ,SAACxF,GAAD,MAA0C,CAC9D8K,WAAY9K,EAAM8K,WAAWA,WAC7BE,gBAAiBhL,EAAM8K,WAAWE,gBAClCxK,YAAaR,EAAM8K,WAAWtK,YAC9BS,gBAAiBjB,EAAM8K,WAAW7J,gBAClCzB,UAAWQ,EAAMyF,IAAIjG,UACrBC,SAAUO,EAAMyF,IAAIhG,SACpBsL,qBAAsB/K,EAAM8K,WAAWC,qBACvCK,mBAAoBpL,EAAM8K,WAAWM,mBACrCgB,eAAgBpM,EAAMuP,SAASnD,eAC/BC,gBAAiBrM,EAAMwP,UAAUnD,mBAWjC,CACI9L,cJwCqB,SAACC,GAAD,gDAAoC,WAAOiP,GAAP,gBAAAC,EAAA,sEAEzDD,EAAS/P,IAAMG,eAAc,IAF4B,SAGxCS,KAAcC,cAAcC,GAHY,OAGrDG,EAHqD,OAIzD8O,EAAShE,GAA2B9K,IAJqB,gDAMzD8O,EAAS/P,IAAMI,aAAY,IAN8B,yBAQzD2P,EAAS/P,IAAMG,eAAc,IAR4B,4EAApC,uDIvCrB6K,kBACAyB,wBJmE+B,SAAClL,EAAgDT,GAAjD,gDAAoF,WAAOiP,GAAP,kBAAAC,EAAA,sEAEnHD,EAAS/P,IAAMG,eAAc,IAFsF,SAGlGS,KAAcU,iBAAiBC,EAAiBT,GAHkD,OAG/GG,EAH+G,OAInH8O,EAAShE,GAA2B9K,IAJ+E,iDAM7G+K,EAAiB,IACRE,QAAU,GACzBF,EAAeG,KAAO,CAClB5D,MAAO,EACP6D,MAAO,EACPX,KAAM,KACND,KAAM,MAEVuE,EAAShE,GAA2BC,IAd+E,yBAgBnH+D,EAAS/P,IAAMG,eAAc,IAhBsF,4EAApF,uDIlE/B8K,yBACAF,uBAPoBjF,CAQrB0G,I,6ICzDDvJ,GAAYwB,YAAW,CACzBwL,IAAK,CACDzK,QAAS,OACT0K,oBAAqB,UACrBC,aAAc,iBACdC,YAAa,GACb,qBAAsB,CAClB1K,gBAAiB,WAiBd2K,GAXkC,SAACtN,GAC9C,IAAMC,EAAUC,KACTqN,EAA6BvN,EAA7BuN,YAAaC,EAAgBxN,EAAhBwN,aACpB,OACI,uBAAKnN,UAAWJ,EAAQiN,KACpB,gBAAC3L,EAAA,EAAD,CAAYC,QAAQ,aAAa+L,GACjC,gBAAChM,EAAA,EAAD,CAAYC,QAAQ,KAAKb,MAAM,WAAW6M,KCAhDC,GAAgD,SAACzN,GACnD,IAAMC,EAAUC,KACTwN,EAA8B1N,EAA9B0N,KAAMC,EAAwB3N,EAAxB2N,QAASvM,EAAepB,EAAfoB,GAAIP,EAAWb,EAAXa,QACpB+M,EAAatC,IAAMuC,SACrB,kBACIvC,IAAMwC,YAA6C,SAACC,EAAWC,GAAZ,OAC/C,kBAAC,IAAD,eAAY5M,GAAIA,EAAI4M,IAAKA,GAASD,SAE1C,CAAC3M,IAEL,OACI,wBAAIf,UAAWJ,EAAQd,SACnB,kBAAC8O,GAAA,EAAD,CAAUnG,QAAM,EAAC5G,UAAW0M,EAAY/M,QAASA,GAC5C6M,EAAO,kBAAC,KAAD,KAAeA,GAAuB,KAC9C,kBAACnM,EAAA,EAAD,CAAYZ,MAAM,cAAca,QAAQ,aACpC,kBAAC,KAAD,CAAcmM,QAASA,QAyK5BO,GAlK4B,SAAClO,GAAW,IAE/CwI,EAIAxI,EAJAwI,iBAAkB2F,EAIlBnO,EAJkBmO,MAAO9P,EAIzB2B,EAJyB3B,oBAAqBtB,EAI9CiD,EAJ8CjD,UAC9C6L,EAGA5I,EAHA4I,2BAA4BwF,EAG5BpO,EAH4BoO,0BAA2BC,EAGvDrO,EAHuDqO,YAAaxF,EAGpE7I,EAHoE6I,SACpE7L,EAEAgD,EAFAhD,SAAU2L,EAEV3I,EAFU2I,mBAAoBT,EAE9BlI,EAF8BkI,sBAAuBoG,EAErDtO,EAFqDsO,oBACrDC,EACAvO,EADAuO,YAGEtO,EAAUC,KARkC,EAUhBoL,IAAMnI,SAAS,MAVC,mBAU3CqL,EAV2C,KAUhCC,EAVgC,KAYlD1D,qBAAU,WACN1M,GAAqB8P,EAAMO,OAAOpQ,IAClC+P,GAAaF,EAAMO,OAAOpQ,GAAIkQ,KAC/B,CAACL,EAAMO,OAAOpQ,KAEjB,IAQMqQ,EAAiB,WAInB,GAHAP,EAA0B,GAC1BE,EAAoB,aAEhB1F,EAA4B,CAC5B,IAAMgG,EAAiC,GACvCA,EAA+BzF,QAAUP,EAEzCgG,EAA+BxF,KAAO,CAClC5D,MAAOoD,EAA2B4D,OAClCnD,MAAO,EACPX,KAAM,KACND,KAAM,MAEV8F,EAAYK,KAQpB,OAAI5R,EACO,kBAAC,IAAD,CAAUoE,GAAG,gBAIpB,oCACI,kBAACkC,EAAA,EAAD,CAAMmJ,WAAS,EAACE,QAAQ,iBACpB,kBAAChF,EAAA,EAAD,CACI9G,QAtCI,WAChB4N,EAAa,SAsCDpO,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,sBAAiByH,EAASC,QAC5BjB,UAAWgB,EAASC,QAAU/L,EAC9ByE,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OATf,sBAaA,kBAACD,EAAA,EAAD,CACI9G,QAzBc,WAC1BqH,EAAsB,QAyBVL,SAAU9K,EACVsD,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,cACFI,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OATf,2BAayB,WAAvBe,GAA0D,YAAvBA,GAA2D,aAAvBA,IACzE,kBAAChB,EAAA,EAAD,CACIE,SAAU9K,EACVsD,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,cACFI,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OARf,2BAS6Be,GAG7B,kBAAChB,EAAA,EAAD,CACI9G,QAzEI,WAChB4N,EAAa,SAyEDpO,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,sBAAiByH,EAASE,QAC5BlB,UAAWgB,EAASE,QAAUhM,EAC9ByE,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACL0K,QAAS,kBAAC,KAAD,OATb,oBAcF9R,GAAcyL,GAAqBI,IAC7BuF,EAAMO,OAAOpQ,KAAOkK,EAAiBlK,GAEvC,6BACE,yBAAK+B,UAAWJ,EAAQ6O,oBACpB,yBAAKzO,UAAWJ,EAAQ8O,eACpB,kBAACvL,EAAA,EAAD,CAAMnD,UAAWJ,EAAQ+O,MACrB,kBAACC,GAAA,EAAD,CACI5O,UAAWJ,EAAQ6D,MACnBD,MAAO2E,EAAiB3E,QAC5B,kBAACtC,EAAA,EAAD,CAAYZ,MAAM,QAAQa,QAAQ,KAAKnB,UAAWJ,EAAQvB,MACrD8J,EAAiB9J,QAK9B,yBAAK2B,UAAWJ,EAAQiP,eACpB,kBAAC,GAAD,CAAW3B,YAAY,UAAUC,aAAchF,EAAiB7J,SAChE,kBAAC,GAAD,CAAW4O,YAAY,UAAUC,aAAchF,EAAiB5J,SAChE,kBAAC,GAAD,CAAW2O,YAAY,WAAWC,aAAchF,EAAiB3J,UAChE2J,EAAiBrL,MAClB,kBAAC,GAAD,CAAWoQ,YAAY,cAAcC,aAAchF,EAAiBrL,OACpE,kBAAC,GAAD,CAAWoQ,YAAY,mBAAmBC,aAAchF,EAAiB2G,OAAOzQ,OAChF,kBAAC,GAAD,CAAW6O,YAAY,gCACZC,aAAchF,EAAiB4G,SAAS1Q,OAEnD,yBAAK2B,UAAWJ,EAAQoP,aACpB,kBAAC9N,EAAA,EAAD,CAAYC,QAAQ,KAAKb,MAAM,YAAYO,UAAU,QAChD,uDAEL,kBAACkL,EAAA,EAAD,CAAOC,aAAczD,EAA2B4D,OAAQ7L,MAAM,YAAY2L,IAAK,MACxEC,UAAQ,GACX,kBAAC,KAAD,QAIR,kBAAC+C,GAAA,EAAD,KACK1G,EAA2BwC,KAAI,SAAAjM,GAAO,OAAI,kBAAC,GAAD,CACvC0B,QAAS8N,EACTtD,IAAKlM,EAAQb,GACb8C,GAAE,oBAAejC,EAAQb,IACzBqP,QAAO,UAAKxO,EAAQA,QAAb,cAA0BA,EAAQT,eAvC3D,kBAAC,GAAD,QAkEZwB,GAAYwB,YAAW,CACzBoG,OAAQ,CACJM,cAAe,OACfzC,aAAc,IAElBqJ,KAAM,CACF7M,MAAO,IACPoN,aAAc,EACdC,UAAW,oCACX7J,aAAc,GACdpD,YAAa,IAEjBwM,cAAe,CACXtM,QAAS,OACToC,eAAgB,UAEpBf,MAAO,CACHU,OAAQ,KAEZiL,MAAO,CACHtN,MAAO,KAEXhD,QAAS,CACL,qBAAsB,CAClBwD,gBAAiB,SAGzB0M,YAAa,CACT5K,QAAS,IAEb/F,KAAM,CACFgR,UAAW,SACXC,WAAY,EACZjL,cAAe,GAEnBoK,mBAAoB,CAChBrM,QAAS,OACTmN,SAAU,OACV9K,WAAY,cAEhBoK,cAAe,CACXW,SAAU,K,kBC7NZ3H,GAAwBc,GACxBoF,GAA4B0B,KAAU1B,0BACtCE,GAAsByB,KAAWzB,oBACjCC,GAAcwB,KAAWxB,YAWhByB,GATgBC,mBAA6BlN,aAdpC,SAACxF,GAAD,MAA0C,CAC9DR,UAAWQ,EAAMyF,IAAIjG,UACrBC,SAAUO,EAAMyF,IAAIhG,SACpBwL,iBAAkBjL,EAAM8K,WAAWG,iBACnCI,2BAA4BrL,EAAM8K,WAAWO,2BAC7CC,SAAUtL,EAAM8K,WAAWQ,SAC3BF,mBAAoBpL,EAAM8K,WAAWM,sBAYrC,CACItK,oBP0D2B,SAACC,GAAD,gDAA2B,WAAO0O,GAAP,oBAAAC,EAAA,sEAEtDD,EAAS/P,IAAMG,eAAc,IAFyB,SAGdS,KAAcQ,oBAAoBC,GAHpB,cAGlD4R,EAHkD,OAItDlD,EAAShE,GAAiCkH,IAGpCC,EAAkBD,EAA4B/Q,QAAQiM,KAAI,SAAAgF,GAAU,OAAItR,KAAYG,iBAAiBmR,MAPrD,SAQlCC,QAAQC,IAAIH,GARsB,OAQlDhH,EARkD,OAStD6D,EAAShE,GAA2CG,IATE,kDAWtD6D,EAAS/P,IAAMI,aAAY,IAX2B,yBAatD2P,EAAS/P,IAAMG,eAAc,IAbyB,6EAA3B,uDO1DNgR,6BAA2BC,YP+F7B,SAACkC,EAAkBC,GAAnB,gDAAiE,WAAOxD,EAAUyD,GAAjB,4CAAAxD,EAAA,kEAGpFD,EAAS/P,IAAMG,eAAc,IACzB0L,EAAS,KAAMC,EAAS,KACtBhL,EAAc0S,IAAWpI,WAAWtK,YACpCuK,EAAuBmI,IAAWpI,WAAWC,qBAC7CD,EAAaoI,IAAWpI,WAAWA,WACnCE,EAAkBkI,IAAWpI,WAAWE,gBACxC/J,EAAkBiS,IAAWpI,WAAW7J,gBACxCmK,EAAqB8H,IAAWpI,WAAWM,mBAG3C+H,EAA+BD,IAAWpI,WAAWA,WAAWsI,WAAU,SAAAC,GAAE,OAAIA,EAAGtS,KAAOiS,KAGrE,QAAvB5H,EAhBgF,oBAmB5EG,EADAyH,EAAW,EACFA,EAAW,EAEX,KAGTxH,EADAwH,EAAWjI,EACFiI,EAAW,EAEX,OAGTG,EAA+B,GAAK3S,EAAc,GA7B0B,kCA8B7CF,KAAcU,iBAAiBC,EAAiBT,EAAc,GA9BjB,QA8BxE8S,EA9BwE,OAgC7D,SAAXL,IACAxD,EAAShE,GAA2B6H,IACpC7D,EAAShE,GAA4BjL,EAAc,KAlCqB,aAsC5E2S,EAA+B,GAAK3S,EAAcwK,GAtC0B,kCAuC7C1K,KAAcU,iBAAiBC,EAAiBT,EAAc,GAvCjB,SAuCxE+S,EAvCwE,QAwCrD3H,QAAQqD,OAAS,GAErB,SAAXgE,IACAxD,EAAShE,GAA2B8H,IACpC9D,EAAShE,GAA4BjL,EAAc,KA5CiB,WAmDzD,WAAvB4K,EAnDgF,oBAqDhFG,EAAS,KAEL4H,EAA+B,IAC/B5H,EAAST,EAAWqI,EAA+B,GAAGpS,MAGrB,IAAjCoS,GAAsC3S,EAAc,GA3DwB,kCA4D7CF,KAAcU,iBAAiBC,EAAiBT,EAAc,GA5DjB,QA4DxE8S,EA5DwE,OA6D5E/H,EAAS+H,EAAmB1H,QAAQ,IAAI7K,GA7DoC,aAgE5EoS,EAA+B,GAAK3S,EAAc,GAhE0B,kCAiE7CF,KAAcU,iBAAiBC,EAAiBT,EAAc,GAjEjB,QAiExE8S,EAjEwE,OAkE5E/H,EAAS+H,EAAmB1H,QAAQ,IAAI7K,GAEzB,SAAXkS,IACAxD,EAAShE,GAA2B6H,IACpC7D,EAAShE,GAA4BjL,EAAc,KAtEqB,WA2EhFgL,EAAS,KAEL2H,GAAgC,GAAKA,EAA+BrI,EAAWmE,OAAS,IACxFzD,EAASV,EAAWqI,EAA+B,GAAGpS,MAGtDoS,IAAiCrI,EAAWmE,OAAS,GAAKzO,EAAcwK,GAjFI,kCAkF7C1K,KAAcU,iBAAiBC,EAAiBT,EAAc,GAlFjB,QAkFxE+S,EAlFwE,OAmF5E/H,EAAS+H,EAAmB3H,QAAQ,GAAG7K,GAnFqC,aAsF5EoS,EAA+B,GAAK3S,EAAcwK,GAtF0B,kCAuF7C1K,KAAcU,iBAAiBC,EAAiBT,EAAc,GAvFjB,SAuFxE+S,EAvFwE,QAwFrD3H,QAAQqD,OAAS,IACpCzD,EAAS+H,EAAmB3H,QAAQ,GAAG7K,GAExB,SAAXkS,IACAxD,EAAShE,GAA2B8H,IACpC9D,EAAShE,GAA4BjL,EAAc,MA7FiB,QAoGzD,YAAvB4K,GAA2D,aAAvBA,IAGhCG,EADA4H,EAA+B,EACtBrI,EAAWqI,EAA+B,GAAGpS,GAE7C,KAITyK,EADA2H,EAA+BrI,EAAWmE,OAAS,EAC1CnE,EAAWqI,EAA+B,GAAGpS,GAE7C,MAGjB0O,EAAShE,GAAyBF,EAAQC,IAlH0C,kDAoHpFiE,EAAS/P,IAAMI,aAAY,IApHyD,yBAsHpF2P,EAAS/P,IAAMG,eAAc,IAtHuD,6EAAjE,yDO9FnB8K,yBAAuBoG,uBAAqBC,iBAC5CwC,IAPuBd,CAOX/B,I,UC6HL8C,GA/J0B,SAAChR,GAAW,IAE7CjD,EAGAiD,EAHAjD,UAAWoR,EAGXnO,EAHWmO,MAAOnP,EAGlBgB,EAHkBhB,kBAAmB2K,EAGrC3J,EAHqC2J,eAAgBsH,EAGrDjR,EAHqDiR,2BACrD7C,EAEApO,EAFAoO,0BAA2BlG,EAE3BlI,EAF2BkI,sBAC3BgJ,EACAlR,EADAkR,cAAe7C,EACfrO,EADeqO,YAAaC,EAC5BtO,EAD4BsO,oBAAqBzF,EACjD7I,EADiD6I,SAAUsI,EAC3DnR,EAD2DmR,iBAGzDlR,EAAUC,KAPgC,EASdoL,IAAMnI,SAAS,MATD,mBASzCqL,EATyC,KAS9BC,EAT8B,KAWhD1D,qBAAU,WACN/L,GAAmBmP,EAAMO,OAAOpQ,IAChC+P,GAAaF,EAAMO,OAAOpQ,GAAIkQ,KAC/B,CAACL,EAAMO,OAAOpQ,KAEjB,IAYM8S,EAAmB,WAIrB,GAHAhD,EAA0B,GAC1BlG,EAAsB,WAElB+I,EAA4B,CAC5B,IAAMI,EAAiC,GACvCA,EAA+BlI,QAAU8H,EACpCK,MAAK,SAACrE,EAAkBsE,GACrB,OAAItE,EAAEvO,KAAO6S,EAAE7S,KACJ,EAEPuO,EAAEvO,KAAO6S,EAAE7S,MACH,EAEL,KAEf2S,EAA+BjI,KAAO,CAClC5D,MAAOyL,EAA2BzE,OAClCnD,MAAO,EACPX,KAAM,KACND,KAAM,MAEVyI,EAAcG,KAKtB,OACI,oCACI,kBAAC/N,EAAA,EAAD,CAAMmJ,WAAS,EAACE,QAAQ,gBAAgBtM,UAAWJ,EAAQuR,SACvD,kBAAC7J,EAAA,EAAD,CACI9G,QA3CI,WAChB4N,EAAa,SA2CDpO,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,oBAAeyH,EAASC,QAC1BjB,UAAWgB,EAASC,QAAU/L,EAC9ByE,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OATf,oBAaA,kBAACD,EAAA,EAAD,CACI9G,QAhDY,WACxByN,EAAoB,QAgDRzG,SAAU9K,EACVsD,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,YACFI,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OATf,yBAauB,WAArBuJ,GAAsD,cAArBA,IAAqC,kBAACxJ,EAAA,EAAD,CACpEE,SAAU9K,EACVsD,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,YACFI,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OARyD,yBAS7CuJ,GAG3B,kBAACxJ,EAAA,EAAD,CACI9G,QA7EI,WAChB4N,EAAa,SA6EDpO,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,oBAAeyH,EAASE,QAC1BlB,UAAWgB,EAASE,QAAUhM,EAC9ByE,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACL0K,QAAS,kBAAC,KAAD,OATb,kBAcH9R,GAAc4M,GAAmBsH,IAA+B9C,EAAMO,OAAOpQ,KAAOqL,EAAerL,GAE9F,oCACE,kBAACiD,EAAA,EAAD,CAAYZ,MAAM,QAAQa,QAAQ,MAC7BmI,EAAexK,QAAQsS,oBAD5B,MACoD9H,EAAejL,MAGnE,kBAAC6C,EAAA,EAAD,CAAYZ,MAAM,gBAAgBa,QAAQ,MAA1C,iBACmBmI,EAAe+H,UAGlC,kBAACnQ,EAAA,EAAD,CAAYZ,MAAM,cAAca,QAAQ,MACnC,wDACD,kBAAC4K,EAAA,EAAD,CAAOC,aAAc4E,EAA2BzE,OAAQ7L,MAAM,UAAU2L,IAAK,MACtEC,UAAQ,GACX,kBAAC,KAAD,QAIR,6BACK0E,EACIK,MAAK,SAACrE,EAAkBsE,GACrB,OAAItE,EAAEvO,KAAO6S,EAAE7S,KACJ,EAEPuO,EAAEvO,KAAO6S,EAAE7S,MACH,EAEL,KAEV0M,KAAI,SAAAlI,GAAS,OAAI,kBAACyE,EAAA,EAAD,CAAQnG,QAAQ,YACR6J,IAAKnI,EAAU5E,GACfuC,QAASuQ,EACTzQ,MAAO,UACPN,UAAWJ,EAAQ0R,cACnBzQ,UAAWC,IACXC,GAAE,sBAAiB8B,EAAU5E,IAC7B6F,KAAK,SACvB,kBAACyN,GAAA,EAAD,CAAQ7N,IAAI,GAAGH,IAAKV,EAAUW,MAAOxD,UAAWJ,EAAQ4R,SACvD3O,EAAUxE,WAtC7B,kBAAC,GAAD,QAmDZwB,GAAYwB,YAAW,CACzBiQ,cAAe,CACXpC,aAAc,GACd9K,QAAS,EACTqN,aAAc,GACdC,OAAQ,EACRpM,aAAc,EACdyC,cAAe,QAEnBoJ,QAAS,CACL9L,UAAW,EACXC,aAAc,IAElBmC,OAAQ,CACJM,cAAe,QAEnByJ,OAAQ,CACJtP,YAAa,KC7Jf2F,GAAwBc,GACxBkI,GAAgBlI,GAChBoF,GAA4B0B,KAAU1B,0BACtCE,GAAsByB,KAAWzB,oBAQxB0D,GANc/B,mBAA6BlN,aAhBlC,SAACxF,GAAD,MAA0C,CAC9DoM,eAAgBpM,EAAMuP,SAASnD,eAC/B5M,UAAWQ,EAAMyF,IAAIjG,UACrBkU,2BAA4B1T,EAAMuP,SAASmE,2BAE3CpI,SAAUtL,EAAMuP,SAASjE,SACzBsI,iBAAkB5T,EAAMuP,SAASqE,oBAYjC,CAACnS,uBAAmBoP,6BAChBlG,yBAAuBgJ,iBAAe7C,iBACtCC,yBAAuByC,IAJFd,CAIce,I,SCtCrCnU,GAAe,CACjBkQ,UAAW,GACXkF,oBAAqB,EACrB1J,gBAAiB,EACjBqB,gBAAiB,KACjBnB,KAAM,KACNC,KAAM,KACNwJ,4BAA6B,KAC7BC,kBAAmB,MACnB3T,gBAAiB,CACbE,KAAM,GAAIvB,KAAM,GAAIsC,UAAW,IAEnC2S,kBAAmB,KACnBvJ,SAAU,CAACC,OAAQ,KAAuBC,OAAQ,OA6CzCsJ,GACK,SAACC,GAAD,MAAuC,CAACnV,KAAM,0BAA2BmV,kBAD9ED,GAEW,SAACzI,GAAD,MAA2C,CAC3DzM,KAAM,iCACNyM,oBAJKyI,GAMuB,SAACH,GAAD,MAAwD,CACpF/U,KAAM,+CACN+U,gCARKG,GAUW,SAAC7T,GAAD,MAAoD,CACpErB,KAAM,iCACNqB,oBAZK6T,GAca,SAACF,GAAD,MAA0C,CAC5DhV,KAAM,oCAAqCgV,sBAftCE,GAiBa,SAACD,GAAD,MAAuC,CACzDjV,KAAM,oCACNiV,sBAnBKC,GAqBI,SAACvJ,EAAuBC,GAAxB,MAAmD,CAC5D5L,KAAM,0BACN2L,SACAC,WAkHOwJ,GAlLU,WAA2E,IAA1EhV,EAAyE,uDAAjEV,GAAcW,EAAmD,uCAC/F,OAAQA,EAAOL,MACX,IAAK,0BACD,OAAO,eACAI,EADP,CAEIwP,UAAWvP,EAAO8U,cAAcnJ,QAChC8I,oBAAqBzU,EAAO8U,cAAclJ,KAAK5D,MAC/C+C,gBAAiB/K,EAAO8U,cAAclJ,KAAKC,MAC3CZ,KAAMjL,EAAO8U,cAAclJ,KAAKX,KAChCC,KAAMlL,EAAO8U,cAAclJ,KAAKV,OAGxC,IAAK,iCACD,OAAO,eAAInL,EAAX,CAAkBqM,gBAAiBpM,EAAOoM,kBAE9C,IAAK,+CACD,OAAO,eAAIrM,EAAX,CAAkB2U,4BAA6B1U,EAAO0U,8BAE1D,IAAK,iCACD,OAAO,eACA3U,EADP,CACciB,gBAAiBhB,EAAOgB,kBAG1C,IAAK,oCACD,OAAO,eAAIjB,EAAX,CAAkB4U,kBAAmB3U,EAAO2U,oBAEhD,IAAK,oCACD,OAAO,eAAI5U,EAAX,CAAkB6U,kBAAmB5U,EAAO4U,oBAEhD,IAAK,0BACD,OAAO,eAAI7U,EAAX,CAAkBsL,SAAU,CAACC,OAAQtL,EAAOsL,OAAQC,OAAQvL,EAAOuL,UAEvE,QACI,OAAOxL,I,oBCrDbkQ,GAA4C,SAACzN,GAC/C,IAAMC,EAAUC,KACTwN,EAA8B1N,EAA9B0N,KAAMC,EAAwB3N,EAAxB2N,QAASvM,EAAepB,EAAfoB,GAAIP,EAAWb,EAAXa,QACpB+M,EAAatC,IAAMuC,SACrB,kBACIvC,IAAMwC,YAA6C,SAACC,EAAWC,GAAZ,OAC/C,kBAAC,IAAD,eAAY5M,GAAIA,EAAI4M,IAAKA,GAASD,SAE1C,CAAC3M,IAEL,OACI,wBAAIf,UAAWJ,EAAQsD,MACnB,kBAAC0K,GAAA,EAAD,CAAUpN,QAASA,EAASiH,QAAM,EAAC5G,UAAW0M,GACzCF,EAAO,kBAAC,KAAD,KAAeA,GAAuB,KAC9C,kBAACnM,EAAA,EAAD,CAAYZ,MAAM,UAAUa,QAAQ,MAChC,kBAAC,KAAD,CAAcmM,QAASA,QAqB5B6E,GAduB,SAACxS,GAAW,IACvCoP,EAAkCpP,EAAlCoP,SAAUqD,EAAwBzS,EAAxByS,qBAIjB,OACI,kBAAC,GAAD,CACIrR,GAAE,qBAAgBgO,EAAS9Q,IAC3BuC,QANQ,WACZ4R,EAAqBrD,EAAS9Q,KAM1BqP,QAASyB,EAAS1Q,QAqBxBwB,GAAYwB,IAAW,CACzB6B,KAAM,CACF,qBAAsB,CAClBZ,gBAAiB,W,oBCWvB+P,GAA2B/L,aAA0E,CACvGC,KAAM,kBACNC,SAxB0C,SAACC,GAC3C,IAAIC,EAAS,GAiBb,OAhBInH,aAAMkH,EAAOpI,OAA0B,KAAhBoI,EAAOpI,OAC9BqI,EAAOrI,KAAO,uBAEdkB,aAAMkH,EAAO3J,OAAyB,KAAhB2J,EAAO3J,OAC7B4J,EAAO5J,KAAO,uBAEdyC,aAAMkH,EAAOrH,YAAoC,KAArBqH,EAAOrH,YACnCsH,EAAOtH,UAAY,4BAGjBqH,EAAOpI,OAAQkB,aAAMkH,EAAOpI,OACzBoI,EAAO3J,OAAQyC,aAAMkH,EAAO3J,OAC5B2J,EAAOrH,YAAaG,aAAMkH,EAAOrH,aAEtCsH,EAAOC,OAAS,uCAEbD,IAIsBJ,EA5D0H,SAAC3G,GACxJ,IAAMC,EAAUC,KACT+G,EAAoDjH,EAApDiH,aAAcC,EAAsClH,EAAtCkH,WAAYC,EAA0BnH,EAA1BmH,SAAUC,EAAgBpH,EAAhBoH,MAAOnB,EAASjG,EAATiG,MAClD,OACI,0BAAMoB,SAAUJ,GACZ,6BACI,kBAACK,EAAA,EAAD,CAAO5I,KAAK,OAAOwC,UAAWqG,KAAiBzB,MAAM,OAAOtE,QAAQ,WAAW2C,KAAK,QAC7E9D,UAAWJ,EAAQ0S,QAC1B,kBAACrL,EAAA,EAAD,CAAO5I,KAAK,OAAOwC,UAAWqG,KAAiBzB,MAAM,OAAOtE,QAAQ,WAAW2C,KAAK,QAC7E9D,UAAWJ,EAAQ0S,QAC1B,kBAACrL,EAAA,EAAD,CAAO5I,KAAK,YAAYwC,UAAWqG,KAAiBzB,MAAM,YAAYtE,QAAQ,WAAW2C,KAAK,QACvF9D,UAAWJ,EAAQ0S,SAG9B,kBAAChL,EAAA,EAAD,CAAQxK,KAAK,SACLqE,QAAQ,YACRoG,UAAW,kBAAC,KAAD,MACXC,SAAUX,GAAcC,EACxB9G,UAAS,UAAKJ,EAAQ0S,MAAb,YAAsB1S,EAAQ6H,SAJ/C,UAOA,kBAACH,EAAA,EAAD,CAAQxK,KAAK,SACLqE,QAAQ,YACRqG,SAAUV,GAAYD,EACtBrG,QAASuG,EACT/G,UAAS,UAAKJ,EAAQ0S,MAAb,YAAsB1S,EAAQ6H,SAJ/C,gBAOC7B,IAAUkB,GACX,kBAAC5F,EAAA,EAAD,CAAYZ,MAAM,QAAQa,QAAQ,MAC7ByE,OAgDF2M,GAZ6C,SAAC5S,GAAW,IAC7DgI,EAA4ChI,EAA5CgI,mBAAoB6K,EAAwB7S,EAAxB6S,qBAM3B,OACI,kBAACH,GAAD,CAA0BrL,SALb,SAACc,GACdH,EAAmBG,GACnB0K,EAAqB,cAavB3S,GAAYwB,YAAW,CACzBiR,MAAO,CACHpQ,YAAa,GACboD,aAAc,IAElBmC,OAAQ,CACJM,cAAe,OACf7F,YAAa,MClGfyF,GAAqBqK,GACrBQ,GAAuBR,GAgBdS,GAbkB/P,aANT,SAACxF,GAAD,MAA0C,KAQ9D,CAACyK,sBAAoB6K,yBAFQ9P,CAEe6P,ICsHjCG,GAxHiC,SAAC/S,GAC7C6J,eADuD,IAGnDkD,EAGA/M,EAHA+M,UAAW1N,EAGXW,EAHWX,aAAcb,EAGzBwB,EAHyBxB,gBAAiBwU,EAG1ChT,EAH0CgT,uBAC1Cb,EAEAnS,EAFAmS,kBAAmBU,EAEnB7S,EAFmB6S,qBAAsBZ,EAEzCjS,EAFyCiS,oBACzCQ,EACAzS,EADAyS,qBAAsB1V,EACtBiD,EADsBjD,UAL6B,EAQjBoG,oBAAS,GARQ,mBAQhD8H,EARgD,KAQnCC,EARmC,OASX/H,mBAAS,OATE,mBAShD8P,EATgD,KAShCC,EATgC,KAWjDjT,EAAUC,KAEViT,EAAoBpG,EAAU3B,KAAI,SAAA7H,GACpC,MAAuB,QAAnB0P,GAEmB,QAAnBA,GAA4B1P,EAAK7E,KAAK,KAAOuU,EAFZ,kBAAC,GAAD,CAAU5H,IAAK9H,EAAKjF,GAAI8Q,SAAU7L,EACxBkP,qBAAsBA,SACrE,KAKEW,EAAiB,GACvBrG,EAAUsG,SAAQ,SAAAjE,GACTgE,EAAeE,SAASlE,EAAS1Q,KAAK,KACvC0U,EAAeG,KAAKnE,EAAS1Q,KAAK,OAG1C0U,EAAe9B,MAAK,SAACrE,EAAGsE,GACpB,OAAItE,EAAIsE,EAAU,EACdtE,EAAIsE,GAAW,EACZ,KAEX6B,EAAeG,KAAK,OAEpB,IAAMC,EAAiBJ,EAAehI,KAAI,SAAA7H,GACtC,IAGMlD,EAAakD,IAAS0P,EAAV,UACThT,EAAQwT,eADC,YACiBxT,EAAQyT,UADzB,UAETzT,EAAQwT,gBACjB,OAAO,kBAAC9L,EAAA,EAAD,CAAQtH,UAAWA,EACXQ,QAPe,WAC1BqS,EAAkB3P,IAOP8H,IAAK9H,EACLY,KAAK,QACL3C,QAAQ,YAClB+B,MAyBT,OAXAwH,qBAAU,WACoB,QAAtBoH,GACA9S,IAEsB,WAAtB8S,IACAa,EAAuBxU,GACvB0U,EAAkB,UAGvB,CAAC1U,EAAgBE,KAAMF,EAAgBrB,KAAMqB,EAAgBiB,UAAW0S,IAGvE,oCACI,6BACI,kBAACnG,EAAA,EAAD,CAAUC,GAAIhB,EAAaiB,QAAQ,OAAOC,eAAa,GACnD,kBAAC,GAAD,OAGJ,kBAACxE,EAAA,EAAD,CAAQ9G,QA5BE,WAClBqK,GAAgBD,IA4BA5K,UAAWJ,EAAQ6H,OACnBF,UAAWqD,EAAc,kBAAC,KAAD,MAAyB,kBAAC,KAAD,MAClDzJ,QAAQ,aACXyJ,EAAc,eAAiB,eAEpC,kBAACtD,EAAA,EAAD,CAAQ9G,QA7BG,WACnBgS,EAAqB,OACrBK,EAAkB,QA4BFrL,SAAgC,QAAtBsK,EACV9R,UAAWJ,EAAQ6H,OACnBtG,QAAQ,aAHhB,YAOuB,WAAtB2Q,GAAkC,yBAAK9R,UAAWJ,EAAQuF,OACtD,qCAGL,yBAAKnF,UAAWJ,EAAQuF,OAAxB,0BAEI,kBAAC4G,EAAA,EAAD,CAAOC,aAAc4F,EAAqBtR,MAAM,UAAU2L,IAAK,MAAOC,UAAQ,GAC1E,kBAAC,KAAD,QAIR,6BACKiH,IAKRzW,EACK,yBAAKsD,UAAWJ,EAAQsJ,UACtB,kBAACrF,EAAA,EAAD,CAAkBC,KAAM,IAAKxD,MAAO,eAEtC,kBAAC2O,GAAA,EAAD,KACG6D,KAUfjT,GAAYwB,YAAW,CACzBoG,OAAQ,CACJvF,YAAa,GACb6F,cAAe,QAEnB5C,MAAO,CACHE,UAAW,GACXC,aAAc,IAElB8N,eAAgB,CACZE,SAAU,GACVxR,MAAO,GACPqC,OAAQ,GACRC,QAAS,EACT8K,aAAc,GACdnH,cAAe,QAEnBmB,SAAU,CACN9G,QAAS,OACToC,eAAgB,UAEpB6O,SAAU,CACN/Q,gBAAiB,UC9InBkQ,GAAuBR,GACvBI,GAAuBJ,GAwBduB,GAJY7Q,aATH,SAACxF,GAAD,MAA0C,CAC9DwP,UAAWxP,EAAMwP,UAAUA,UAC3BxE,gBAAiBhL,EAAMwP,UAAUxE,gBACjC/J,gBAAiBjB,EAAMwP,UAAUvO,gBACjC2T,kBAAmB5U,EAAMwP,UAAUoF,kBACnCF,oBAAqB1U,EAAMwP,UAAUkF,oBACrClV,UAAWQ,EAAMyF,IAAIjG,aAIP,CAACsC,aL4DS,2DAAiB,WAAO2N,EAAUyD,GAAjB,gCAAAxD,EAAA,6DACzCD,EAAS/P,IAAMG,eAAc,IADY,SAGFgC,KAAaC,eAHX,OAOzC,IAJMwU,EAHmC,OAInCtL,EAAkBsL,EAAyBzK,KAAKC,MAElDyK,EAAW,GACNC,EAAI,EAAGA,GAAKxL,EAAiBwL,IAClCD,EAASP,KAAKQ,GARuB,OAUnC5D,EAAkB2D,EAAS1I,KAAI,SAAA4I,GAAU,OAAI5U,KAAaC,aAAa2U,MAVpC,UAWrB3D,QAAQC,IAAIH,GAXS,QAezC,IAJIhH,EAXqC,QAYrCjL,EAAO,IACNkL,KAAOD,EAAQ,GAAGC,KACnB6K,EAAe,GACVF,EAAI,EAAGA,EAAIxL,EAAiBwL,IACjCE,EAAY,uBAAOA,GAAP,aAAwB9K,EAAQ4K,GAAG5K,UAGnD8K,EAAa3C,MAAK,SAACrE,EAAGsE,GAClB,OAAItE,EAAEvO,KAAO6S,EAAE7S,KAAa,EACxBuO,EAAEvO,KAAO6S,EAAE7S,MAAc,EACtB,KAEXR,EAAKiL,QAAU8K,EAEfjH,EAASqF,GAAyBnU,IAClC8O,EAAS/P,IAAMG,eAAc,IA3BY,4CAAjB,yDK5DK4V,uBLuGK,SAACxU,GAAD,gDAA8D,WAAOwO,GAAP,kCAAAC,EAAA,sEAE5FD,EAAS/P,IAAMG,eAAc,IAF+D,SAIrDgC,KAAaI,gBAAgBhB,GAJwB,OAQ5F,IAJMqV,EAJsF,OAKtFtL,EAAkBsL,EAAyBzK,KAAKC,MAElDyK,EAAW,GACNC,EAAI,EAAGA,GAAKxL,EAAiBwL,IAClCD,EAASP,KAAKQ,GAT0E,OAWtF5D,EAAkB2D,EAAS1I,KAAI,SAAA4I,GAAU,OAAI5U,KAAaI,gBAAgBhB,EAAiBwV,MAXL,UAYxE3D,QAAQC,IAAIH,GAZ4D,QAgB5F,IAJIhH,EAZwF,QAaxFjL,EAAO,IACNkL,KAAOD,EAAQ,GAAGC,KACnB6K,EAAe,GACVF,EAAI,EAAGA,EAAIxL,EAAiBwL,IACjCE,EAAY,uBAAOA,GAAP,aAAwB9K,EAAQ4K,GAAG5K,UAEnDjL,EAAKiL,QAAU8K,EAEfjH,EAASqF,GAAyBnU,IArB0D,mDAuBtFoU,EAAgB,IACRnJ,QAAU,GACxBmJ,EAAclJ,KAAO,CACjB5D,MAAO,EACP6D,MAAO,EACPX,KAAM,KACND,KAAM,MAEVuE,EAASqF,GAAyBC,IA/B0D,yBAiC5FtF,EAAS/P,IAAMG,eAAc,IAjC+D,6EAA9D,uDKvGmByV,wBACrDJ,yBAFuB1P,CAEAgQ,IC8IZmB,GAnK2B,SAAClU,GAAW,IAE9CjD,EAGAiD,EAHAjD,UAAWoR,EAGXnO,EAHWmO,MAAO7O,EAGlBU,EAHkBV,mBAAoBsK,EAGtC5J,EAHsC4J,gBAAiBsI,EAGvDlS,EAHuDkS,4BACvD9D,EAEApO,EAFAoO,0BAA2ByE,EAE3B7S,EAF2B6S,qBAAsBxE,EAEjDrO,EAFiDqO,YAAaxF,EAE9D7I,EAF8D6I,SAC9DsJ,EACAnS,EADAmS,kBAAmBjB,EACnBlR,EADmBkR,cAAehJ,EAClClI,EADkCkI,sBAGhCjI,EAAUC,KAPiC,EASfoL,IAAMnI,SAAS,MATA,mBAS1CqL,EAT0C,KAS/BC,EAT+B,KAWjD1D,qBAAU,WACNzL,GAAoB6O,EAAMO,OAAOpQ,IACjC+P,GAAaF,EAAMO,OAAOpQ,GAAIkQ,KAE/B,CAACL,EAAMO,OAAOpQ,KAEjB,IAQM8S,EAAmB,WAKrB,GAJAhD,EAA0B,GAC1BlG,EAAsB,YAGlBgK,EAA6B,CAC7B,IAAMiC,EAAkC,GACxCA,EAAgChL,QAAU+I,EACrCZ,MAAK,SAACrE,EAAkBsE,GACrB,OAAItE,EAAEvO,KAAO6S,EAAE7S,KACJ,EAEPuO,EAAEvO,KAAO6S,EAAE7S,MACH,EAEL,KAEfyV,EAAgC/K,KAAO,CACnC5D,MAAO0M,EAA4B1F,OACnCnD,MAAO,EACPX,KAAM,KACND,KAAM,MAEVyI,EAAciD,KAStB,OACI,oCACI,kBAAC7Q,EAAA,EAAD,CAAMmJ,WAAS,EAACE,QAAQ,gBAAgBtM,UAAWJ,EAAQuR,SACvD,kBAAC7J,EAAA,EAAD,CACI9G,QA5CI,WAChB4N,EAAa,SA4CDpO,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,qBAAgByH,EAASC,QAC3BjB,UAAWgB,EAASC,QAAU/L,EAC9ByE,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OATf,qBAaA,kBAACD,EAAA,EAAD,CACI9G,QArBa,WACzBgS,EAAqB,QAqBThL,SAAU9K,EACVsD,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,aACFI,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OATf,yBAawB,WAAtBuK,GAAmC,kBAACxK,EAAA,EAAD,CACjCE,SAAU9K,EACVsD,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,aACFI,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACLyD,UAAW,kBAAC,KAAD,OARsB,iCAYrC,kBAACD,EAAA,EAAD,CACI9G,QA9EI,WAChB4N,EAAa,SA8EDpO,UAAWJ,EAAQ6H,OACnB5G,UAAWC,IACXC,GAAE,qBAAgByH,EAASE,QAC3BlB,UAAWgB,EAASE,QAAUhM,EAC9ByE,QAAQ,YACRb,MAAM,UACNwD,KAAK,SACL0K,QAAS,kBAAC,KAAD,OATb,mBAcF9R,GAAc6M,GAAoBsI,IAAgC/D,EAAMO,OAAOpQ,KAAOsL,EAAgBtL,GAElG,oCACE,kBAACiD,EAAA,EAAD,CAAYZ,MAAM,QAAQa,QAAQ,KAAKnB,UAAWJ,EAAQoP,aACrDzF,EAAgBlL,MAGrB,kBAAC,GAAD,CAAW6O,YAAY,4BAA4BC,aAAc5D,EAAgBzM,OACjF,kBAAC,GAAD,CAAWoQ,YAAY,kDAAkDC,aAAc5D,EAAgBnK,YAEvG,yBAAKY,UAAWJ,EAAQoP,aACpB,kBAAC9N,EAAA,EAAD,CAAYC,QAAQ,KAAKb,MAAM,YAAYO,UAAU,QACpD,8DAED,kBAACkL,EAAA,EAAD,CAAOC,aAAc6F,EAA4B1F,OAAQ7L,MAAM,UAAU2L,IAAK,MACvEC,UAAQ,GACX,kBAAC,KAAD,QAIR,6BACK2F,EACIZ,MAAK,SAACrE,EAAkBsE,GACrB,OAAItE,EAAEvO,KAAO6S,EAAE7S,KACJ,EAEPuO,EAAEvO,KAAO6S,EAAE7S,MACH,EAEL,KAEV0M,KAAI,SAAAlI,GAAS,OAAI,kBAACyE,EAAA,EAAD,CAAQnG,QAAQ,YACX6J,IAAKnI,EAAU5E,GACfuC,QAASuQ,EACTzQ,MAAO,UACPN,UAAWJ,EAAQ0R,cACnBzQ,UAAWC,IACXC,GAAE,sBAAiB8B,EAAU5E,IAC7B6F,KAAK,SAChB,kBAACyN,GAAA,EAAD,CAAQ7N,IAAI,GAAGH,IAAKV,EAAUW,MAAOxD,UAAWJ,EAAQ4R,SACvD3O,EAAUxE,WAvCjC,kBAAC,GAAD,QAwDZwB,GAAYwB,YAAW,CACzBiQ,cAAe,CACXpC,aAAc,GACd9K,QAAS,EACTqN,aAAc,GACdC,OAAQ,EACRpM,aAAc,EACdyC,cAAe,QAEnBoJ,QAAS,CACL9L,UAAW,EACXC,aAAc,IAElBmC,OAAQ,CACJM,cAAe,QAEnByJ,OAAQ,CACJtP,YAAa,GAEjB8M,YAAa,CACT5K,QAAS,MCzKX2J,GAA4B0B,KAAU1B,0BACtCyE,GAAuBR,GACvBnB,GAAgBlI,GAChBd,GAAwBc,GAUfoL,GARenE,mBAA6BlN,aAbnC,SAACxF,GAAD,MAA0C,CAC9DqM,gBAAiBrM,EAAMwP,UAAUnD,gBACjC7M,UAAWQ,EAAMyF,IAAIjG,UACrBmV,4BAA6B3U,EAAMwP,UAAUmF,4BAC7CrJ,SAAUtL,EAAMwP,UAAUlE,SAC1BsJ,kBAAmB5U,EAAMwP,UAAUoF,qBAUnC,CACI7S,mBPkF0B,SAAChB,GAAD,gDAA2B,WAAO0O,GAAP,oBAAAC,EAAA,6DACzDD,EAAS/P,IAAMG,eAAc,IAD4B,SAErBgC,KAAaE,mBAAmBhB,GAFX,cAErD+V,EAFqD,OAGzDrH,EAASqF,GAA+BgC,IAIlClE,EAAkBkE,EAAwBC,UAAUlJ,KAAI,SAAAhN,GAAG,OAAIP,KAAcM,kBAAkBC,MAP5C,SAQrCiS,QAAQC,IAAIH,GARyB,OAQrDhH,EARqD,OASzD6D,EAASqF,GAA2ClJ,IACpD6D,EAAS/P,IAAMG,eAAc,IAV4B,4CAA3B,uDOlFNgR,6BACpByE,wBACAxE,YPkImB,SAACkC,EAAkBC,GAAnB,gDAAiE,WAAOxD,EAAUyD,GAAjB,sBAAAxD,EAAA,sDACxF,IAEID,EAAS/P,IAAMG,eAAc,IAGvB2P,EAAY0D,IAAW1D,UAAUA,UAGjCwH,EAA8B9D,IAAW1D,UAAUA,UAAU4D,WAAU,SAAAC,GAAE,OAAIA,EAAGtS,KAAOiS,KAGzFzH,EADAyL,EAA8B,EACrBxH,EAAUwH,EAA8B,GAAGjW,GAE3C,KAGTyK,EADAwL,EAA8BxH,EAAUP,OAAS,EACxCO,EAAUwH,EAA8B,GAAGjW,GAE3C,KAEb0O,EAASqF,GAAwBvJ,EAAQC,IAC3C,MACGyL,GACDxH,EAAS/P,IAAMI,aAAY,IAvB/B,QAyBI2P,EAAS/P,IAAMG,eAAc,IA1BuD,2CAAjE,yDOlIN8T,iBAAehJ,2BAC5B6I,IANsBd,CAMViE,I,qBC1CdhU,GAAYwB,aAAW,iBAAO,CAChCgB,KAAM,CACHD,QAAS,OACTgS,cAAe,SACf3P,WAAY,UAEf4P,IAAK,CACDhJ,SAAU,IACVvJ,MAAO,OACPuD,UAAW,QAoBJiP,GAhBQ,WACnB9K,eACA,IAAM5J,EAAUC,KAChB,OACI,yBAAKG,UAAWJ,EAAQyC,MACpB,kBAACnB,EAAA,EAAD,CAAYZ,MAAM,UAAUa,QAAQ,KAAK+C,MAAM,UAA/C,gCAGA,6BACI,yBAAKlE,UAAWJ,EAAQyU,IAAK9Q,IAAKgR,KAAM7Q,IAAI,QCb7C8Q,GAXgB,WAC3B,OACI,kBAACtT,EAAA,EAAD,CAAYgD,MAAM,SACN5D,MAAM,YACNa,QAAQ,MAFpB,mBCSFsT,GAAoBxJ,IAAMyJ,MAAK,kBAAM,iCA2B5BC,GAzBuB,SAAChV,GAAW,IACvClD,EAAQkD,EAARlD,KACDmD,EAAUC,KAEhB,OACI,0BAAMG,UAAWC,kBAAKL,EAAQgV,QAAT,eAChBhV,EAAQiV,aAAepY,KAExB,yBAAKuD,UAAWJ,EAAQkV,eACxB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,GAAD,OAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIpU,UAAWyT,KACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,cAAcpU,UAAW2L,KAC3C,kBAAC,IAAD,CAAOyI,KAAK,kBAAkBC,OAAQ,kBAAM,kBAAC,GAAD,SAC5C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,aAAapU,UAAW0S,KAC1C,kBAAC,IAAD,CAAO0B,KAAK,iBAAiBC,OAAQ,kBAAM,kBAAC,GAAD,SAC3C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYpU,UAAW4T,KACzC,kBAAC,IAAD,CAAOQ,KAAK,gBAAgBpU,UAAW8Q,KACvC,kBAAC,IAAD,CAAOsD,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,GAAD,aAU5CrV,GAAYwB,aAAW,SAACC,GAAD,MAAmB,CAC5CwT,aAAa,aACT1S,QAAS,OACTqC,WAAY,SACZL,QAAS9C,EAAMa,QAAQ,EAAG,IAEvBb,EAAM6T,OAAOC,QALR,CAMR5Q,eAAgB,aAEpBoQ,QAAS,CACLpF,SAAU,EACVpL,QAAS9C,EAAMa,QAAQ,GACvBX,WAAYF,EAAMG,YAAYnE,OAAO,SAAU,CAC3CoE,OAAQJ,EAAMG,YAAYC,OAAOC,MACjCC,SAAUN,EAAMG,YAAYG,SAASC,gBAEzCE,Y1B7DmB,K0B+DvB8S,aAAc,CACVrT,WAAYF,EAAMG,YAAYnE,OAAO,SAAU,CAC3CoE,OAAQJ,EAAMG,YAAYC,OAAOM,QACjCJ,SAAUN,EAAMG,YAAYG,SAASK,iBAEzCF,WAAY,OCzDLsT,GAHO3S,aAJE,SAACxF,GAAD,MAA0C,CAC9DT,KAAMS,EAAMyF,IAAIlG,QAIF,GADIiG,CACAiS,I,oDCwCPW,GAvCqC,SAAC3V,GAAW,IAExDoB,EAGApB,EAHAoB,GAAIuM,EAGJ3N,EAHI2N,QAASD,EAGb1N,EAHa0N,KAAMkI,EAGnB5V,EAHmB4V,YAAaC,EAGhC7V,EAHgC6V,SAAUzH,EAG1CpO,EAH0CoO,0BAC1ClG,EAEAlI,EAFAkI,sBAAuBoG,EAEvBtO,EAFuBsO,oBAAqBuE,EAE5C7S,EAF4C6S,qBAC5C5K,EACAjI,EADAiI,eAAgBD,EAChBhI,EADgBgI,mBAEd/H,EAAUC,KAgBhB,OACI,4BACA,kBAAC+N,GAAA,EAAD,CACIpN,QAlBQ,WACZuN,EAA0ByH,GAC1B5N,EAAe,GACfD,EAAmB,CAACtJ,KAAM,GAAIC,OAAQ,GAAIE,QAAS,GAAID,OAAQ,GAAIzB,KAAM,KAErE+K,EAAsB,OAGtB2K,EAAqB,OAGrBvE,EAAoB,QAQpBoF,SAAUmC,IAAaD,EACvB9N,QAAM,EACN5G,UAAWC,IACXC,GAAIA,GACHsM,EAAO,kBAAC,KAAD,CAAcrN,UAAWC,kBAAKuV,IAAaD,GAAe3V,EAAQyN,OACrEA,GACa,KAClB,kBAAC,KAAD,CAAcC,QAASA,OAS7BzN,GAAYwB,aAAW,SAACC,GAAD,MAAmB,CAC5C+L,KAAM,CACF/M,MAAOiC,IAAO,W,S9B/BV9C,O,2BAAAA,I,uBAAAA,I,0BAAAA,M,KAeZ,IAIMsO,GAA4B0B,KAAU1B,0BACtClG,GAAwBc,GACxBsF,GAAsByB,KAAWzB,oBACjCuE,GAAuBR,GACvBpK,GAAiBe,GACjBhB,GAAqBgB,GAYZ8M,GAVc/S,aAXL,SAACxF,GAAD,MAA0C,CAC9DqY,YAAarY,EAAMwY,QAAQH,eAWb,CACdxH,6BACAlG,yBACAoG,uBACAuE,wBACA5K,kBACAD,uBAPyBjF,CAQ1B4S,I,yE+BPYK,GAjC6B,SAAChW,GAAW,IAC7C9C,EAAiB8C,EAAjB9C,QAASJ,EAAQkD,EAARlD,KACVmD,EAAUC,KACVyB,EAAQsU,OAId,OACI,kBAACC,GAAA,EAAD,CACI7V,UAAWJ,EAAQkW,OACnB3U,QAAQ,aACR4U,OAAO,OACPtZ,KAAMA,EACNmD,QAAS,CACLwP,MAAOxP,EAAQoW,cAGnB,yBAAKhW,UAAWJ,EAAQkV,cACpB,kBAACzU,EAAA,EAAD,CAAYG,QAdE,WACtB3D,GAAQ,KAcyB,QAApByE,EAAM6M,UAAsB,kBAAC,KAAD,MAAqB,kBAAC,KAAD,QAG1D,kBAAC8H,GAAA,EAAD,MACA,kBAAChH,GAAA,EAAD,KACI,kBAAC,GAAD,CAAsBuG,SAAU,EAAGzU,GAAI,IAAKuM,QAAS,OAAQD,KAAM,kBAAC,KAAD,QACnE,kBAAC,GAAD,CAAsBmI,SAAU,EAAGzU,GAAI,cAAeuM,QAAS,aAAcD,KAAM,kBAAC,KAAD,QACnF,kBAAC,GAAD,CAAsBmI,SAAU,EAAGzU,GAAI,aAAcuM,QAAS,YAAaD,KAAM,kBAAC,KAAD,QACjF,kBAAC,GAAD,CAAsBmI,SAAU,EAAGzU,GAAI,YAAauM,QAAS,WAAYD,KAAM,kBAAC,KAAD,WASzFxN,GAAYwB,aAAW,SAACC,GAAD,MAAmB,CAC5Ce,KAAM,CACFD,QAAS,QAEblC,OAAQ,CACJsB,WAAYF,EAAMG,YAAYnE,OAAO,CAAC,SAAU,SAAU,CACtDoE,OAAQJ,EAAMG,YAAYC,OAAOC,MACjCC,SAAUN,EAAMG,YAAYG,SAASC,iBAG7C1B,YAAa,CACT2B,MAAM,eAAD,O7BhEc,I6BgEd,OACLC,W7BjEmB,I6BkEnBP,WAAYF,EAAMG,YAAYnE,OAAO,CAAC,SAAU,SAAU,CACtDoE,OAAQJ,EAAMG,YAAYC,OAAOM,QACjCJ,SAAUN,EAAMG,YAAYG,SAASK,kBAG7CvB,WAAY,CACRwB,YAAaZ,EAAMa,QAAQ,IAE/BxB,KAAM,CACFyB,QAAS,QAEb0T,OAAQ,CACJhU,M7B9EmB,I6B+EnBoU,WAAY,GAEhBF,YAAa,CACTlU,M7BlFmB,K6BoFvBgT,aAAa,aACT1S,QAAS,OACTqC,WAAY,SACZL,QAAS9C,EAAMa,QAAQ,EAAG,IAEvBb,EAAM6T,OAAOC,QALR,CAMR5Q,eAAgB,aAEpBoQ,QAAS,CACLpF,SAAU,EACVpL,QAAS9C,EAAMa,QAAQ,GACvBX,WAAYF,EAAMG,YAAYnE,OAAO,SAAU,CAC3CoE,OAAQJ,EAAMG,YAAYC,OAAOC,MACjCC,SAAUN,EAAMG,YAAYG,SAASC,gBAEzCE,Y7BnGmB,K6BqGvB8S,aAAc,CACVrT,WAAYF,EAAMG,YAAYnE,OAAO,SAAU,CAC3CoE,OAAQJ,EAAMG,YAAYC,OAAOM,QACjCJ,SAAUN,EAAMG,YAAYG,SAASK,iBAEzCF,WAAY,GAEhBoU,MAAO,CACH3G,SAAU,OCpGZ3S,GAAUD,IAAMC,QAKPuZ,GAHU1T,aAND,SAACxF,GAAD,MAA0C,CAC9DT,KAAMS,EAAMyF,IAAIlG,QAMF,CAACI,YADM6F,CACIiT,I,wCCuBdU,G,oDA/BX,WAAY1W,GAAmB,IAAD,+BAC1B,cAAMA,IACDzC,MAAQ,CACT0I,MAAO,KACP0Q,UAAW,MAJW,E,+DAQZ1Q,EAAc0Q,GAC5BC,KAAKC,SAAS,CACV5Q,MAAOA,EACP0Q,UAAWA,M,+BAMf,OAAIC,KAAKrZ,MAAMoZ,UAEP,2BACI,kDACA,2BAASG,MAAO,CAACC,WAAY,aACxBH,KAAKrZ,MAAM0I,OAAS2Q,KAAKrZ,MAAM0I,MAAM+Q,aAK/CJ,KAAK5W,MAAMkG,a,GA5BEoF,aCkBb2L,GAdH,WACR,IAAMhX,EAAUC,KAEhB,OACI,yBAAKG,UAAWJ,EAAQyC,MACpB,kBAAC,GAAD,KACI,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,SASVxC,GAAYwB,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTc,KAAM,CACFD,QAAS,aCfDyU,QACW,cAA7BC,OAAO/H,SAASgI,UAEe,UAA7BD,OAAO/H,SAASgI,UAEhBD,OAAO/H,SAASgI,SAASjJ,MACvB,2D,kCCRAkJ,GAAcC,2BAAgB,CAChC1Q,KAAM2Q,KACNxB,QAASyB,KACTnP,WAAYa,GACZ4D,SAAU2K,KACVzU,IAAK1F,IACLyP,UAAWwF,KAGTmF,GAAgC,CAACC,MACjCC,GAAQC,uBAAYR,GAAaS,+BAAoBC,mBAAe,WAAf,EAAmBL,MAG9EP,OAAOS,MAAQA,GAEAA,UCffI,IAASzC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUqC,MAAOA,IACb,kBAAC,KAAD,CAAoBK,iBAAkBC,KAClC,kBAAC,GAAD,SAIZC,SAASC,eAAe,SFyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1S,GACL2S,QAAQ3S,MAAMA,EAAM4S,a,8EG7IxBhc,EAAe,CACf+Y,YAAa,GAgBJ9F,EAAY,CACrB1B,0BAA2B,SAACwH,GAAD,MAA0B,CAACzY,KApBjC,2BAoByDyY,iBAInE4B,IAfQ,WAA2E,IAA1Eja,EAAyE,uDAAjEV,EAAcW,EAAmD,uCAC7F,OAAQA,EAAOL,MACX,IAXiB,2BAYb,OAAO,eAAII,EAAX,CAAkBqY,YAAapY,EAAOoY,cAE1C,QACI,OAAOrY,K,sQCNbV,EAAe,CACjBiQ,SAAU,GACVgM,mBAAoB,EACpBvQ,gBAAiB,EACjBoB,eAAgB,GAChBlB,KAAM,KACNC,KAAM,KACNuI,2BAA4B,KAC5BE,iBAAkB,MAClB3S,gBAAiB,CACbE,KAAM,GAAIS,QAAS,IAEvB0J,SAAU,CAACC,OAAQ,KAAuBC,OAAQ,OA0CzCgH,EAAa,CACtBxB,YAAa,SAACwK,GAAD,MAAqC,CAAC5b,KAAM,wBAAyB4b,iBAClFC,kBAAmB,SAACrP,GAAD,MAAkC,CACjDxM,KAAM,+BACNwM,mBAEJsP,8BAA+B,SAAChI,GAAD,MAAuD,CAClF9T,KAAM,6CACN8T,+BAEJ3C,oBAAqB,SAAC6C,GAAD,MAAuD,CACxEhU,KAAM,kCAAmCgU,qBAE7CnJ,mBAAoB,SAACxJ,GAAD,MAAmD,CACnErB,KAAM,gCACNqB,oBAEJ0a,YAAa,SAACpQ,EAAuBC,GAAxB,MAAmD,CAC5D5L,KAAM,yBACN2L,SACAC,YAKKhK,EAAc,yDAAiB,WAAOiO,EAAUyD,GAAjB,+BAAAxD,EAAA,6DACxCD,EAAS/P,IAAMG,eAAc,IADW,SAGD0B,IAAYC,cAHX,OAOxC,IAJM8U,EAHkC,OAIlCtL,EAAkBsL,EAAyBzK,KAAKC,MAElDyK,EAAW,GACNC,EAAI,EAAGA,GAAKxL,EAAiBwL,IAClCD,EAASP,KAAKQ,GARsB,OAUlC5D,EAAkB2D,EAAS1I,KAAI,SAAA4I,GAAU,OAAIlV,IAAYC,YAAYiV,MAVnC,UAWpB3D,QAAQC,IAAIH,GAXQ,QAexC,IAJIhH,EAXoC,QAYpCjL,EAAO,IACNkL,KAAOD,EAAQ,GAAGC,KACnB6K,EAAe,GACVF,EAAI,EAAGA,EAAIxL,EAAiBwL,IACjCE,EAAY,sBAAOA,GAAP,YAAwB9K,EAAQ4K,GAAG5K,UAEnDjL,EAAKiL,QAAU8K,EAGfjH,EAAS+C,EAAWxB,YAAYrQ,IAChC8O,EAAS/P,IAAMG,eAAc,IAtBW,4CAAjB,yDAyBd4B,EAAoB,SAACV,GAAD,8CAA2B,WAAO0O,EAAUyD,GAAjB,mBAAAxD,EAAA,6DACxDD,EAAS/P,IAAMG,eAAc,IAD2B,SAElB0B,IAAYE,kBAAkBV,GAFZ,cAEpD6a,EAFoD,OAGxDnM,EAAS+C,EAAWiJ,kBAAkBG,IAIhChJ,EAAkBgJ,EAA0B9Q,WAAW+C,KAAI,SAAAhN,GAAG,OAAIP,IAAcM,kBAAkBC,MAPhD,SAQpCiS,QAAQC,IAAIH,GARwB,OAQpDhH,EARoD,OASxD6D,EAAS+C,EAAWkJ,8BAA8B9P,IAClD6D,EAAS/P,IAAMG,eAAc,IAV2B,4CAA3B,yDAapBgc,EAAwB,SAAC5a,GAAD,8CAA6D,WAAOwO,GAAP,iCAAAC,EAAA,sEAE1FD,EAAS/P,IAAMG,eAAc,IAE7Bwb,QAAQS,IAAI7a,GAJ8E,SAKnDM,IAAYI,eAAeV,GALwB,OAS1F,IAJMqV,EALoF,OAMpFtL,EAAkBsL,EAAyBzK,KAAKC,MAElDyK,EAAW,GACNC,EAAI,EAAGA,GAAKxL,EAAiBwL,IAClCD,EAASP,KAAKQ,GAVwE,OAapF5D,EAAkB2D,EAAS1I,KAAI,SAAA4I,GAAU,OAAIlV,IAAYI,eAAeV,EAAiBwV,MAbL,UActE3D,QAAQC,IAAIH,GAd0D,QAkB1F,IAJIhH,EAdsF,QAetFjL,EAAO,IACNkL,KAAOD,EAAQ,GAAGC,KACnB6K,EAAe,GACVF,EAAI,EAAGA,EAAIxL,EAAiBwL,IACjCE,EAAY,sBAAOA,GAAP,YAAwB9K,EAAQ4K,GAAG5K,UAEnDjL,EAAKiL,QAAU8K,EAEfjH,EAAS+C,EAAWxB,YAAYrQ,IAvB0D,mDAyBpF6a,EAAe,IACR5P,QAAU,GACvB4P,EAAa3P,KAAO,CAChB5D,MAAO,EACP6D,MAAO,EACPX,KAAM,KACND,KAAM,MAEVuE,EAAS+C,EAAWxB,YAAYwK,IAjC0D,yBAuC1F/L,EAAS/P,IAAMG,eAAc,IAvC6D,6EAA7D,uDA2CxBiR,EAAc,SAACkC,EAAkBC,GAAnB,8CAAiE,WAAOxD,EAAUyD,GAAjB,qBAAAxD,EAAA,sDACxF,IAEID,EAAS/P,IAAMG,eAAc,IAGvB0P,EAAW2D,IAAW3D,SAASA,SAE/BwM,EAA6B7I,IAAW3D,SAASA,SAAS6D,WAAU,SAAAC,GAAE,OAAIA,EAAGtS,KAAOiS,KAItFzH,EADAwQ,EAA6B,EACpBxM,EAASwM,EAA6B,GAAGhb,GAEzC,KAITyK,EADAuQ,EAA6BxM,EAASN,OAAS,EACtCM,EAASwM,EAA6B,GAAGhb,GAEzC,KAEb0O,EAAS+C,EAAWmJ,YAAYpQ,EAAQC,IAC1C,MACGyL,GACDxH,EAAS/P,IAAMI,aAAY,IAxB/B,QA0BI2P,EAAS/P,IAAMG,eAAc,IA3BuD,2CAAjE,yDA+BZqa,IA9KS,WAA0E,IAAzEla,EAAwE,uDAAhEV,EAAcW,EAAkD,uCAC7F,OAAQA,EAAOL,MACX,IAAK,wBACD,OAAO,eACAI,EADP,CAEIuP,SAAUtP,EAAOub,aAAa5P,QAC9B2P,mBAAoBtb,EAAOub,aAAa3P,KAAK5D,MAC7C+C,gBAAiB/K,EAAOub,aAAa3P,KAAKC,MAC1CZ,KAAMjL,EAAOub,aAAa3P,KAAKX,KAC/BC,KAAMlL,EAAOub,aAAa3P,KAAKV,OAGvC,IAAK,+BACD,OAAO,eAAInL,EAAX,CAAkBoM,eAAgBnM,EAAOmM,iBAE7C,IAAK,6CACD,OAAO,eAAIpM,EAAX,CAAkB0T,2BAA4BzT,EAAOyT,6BAEzD,IAAK,kCACD,OAAO,eAAI1T,EAAX,CAAkB4T,iBAAkB3T,EAAO2T,mBAE/C,IAAK,gCACD,OAAO,eACA5T,EADP,CACciB,gBAAiBhB,EAAOgB,kBAG1C,IAAK,yBACD,OAAO,eAAIjB,EAAX,CAAkBsL,SAAU,CAACC,OAAQtL,EAAOsL,OAAQC,OAAQvL,EAAOuL,UAEvE,QACI,OAAOxL,K,sECzCJgK,IAd8B,SAACvH,GAAW,IAC7C8F,EAA4D9F,EAA5D8F,MAAOD,EAAqD7F,EAArD6F,MADqC,EACgB7F,EAA9C+F,KAAOC,EADuB,EACvBA,QAASuT,EADc,EACdA,QAAStT,EADK,EACLA,MAAWE,EADN,YACgBnG,EADhB,0BAGpD,OACI,kBAAC,IAAD,eACI8F,MAAOA,EACP0T,YAAa1T,EACbG,MAAOD,GAAWuT,EAClBE,WAAYzT,GAAWC,GACnBJ,EACAM,M,2ECSD0D,IAhBc,WACzB,IAAMmD,EAAW0M,cACX9D,EAAc+D,aAAY,SAACpc,GAAD,OAAsBA,EAAMwY,QAAQH,eAFrC,EAGiB9L,YAAc,cAAeC,KAH9C,mBAGxB6P,EAHwB,KAGNC,EAHM,KAM/B9O,qBAAU,WACNiC,EAAS8C,IAAU1B,0BAA0BwL,GAAsChE,MACpF,CAAC5I,IAEJjC,qBAAU,WACN8O,EAAoC,IAAhBjE,EAAoBA,OAAc5K,KACvD,CACC4K,O","file":"static/js/main.f81766da.chunk.js","sourcesContent":["import {GetActionsType} from \"./store\";\r\n\r\nconst initialState = {\r\n    open: true, // бокавая панель открыта\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_OPEN': {\r\n            return {...state, open: action.open}\r\n        }\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setOpen: (open: boolean) => ({type: 'APP/SET_OPEN', open} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\nexport default appReducer;","import axios from \"axios\";\r\nimport {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType, LocationsDataType, LocationType,\r\n    SearchingCharactersParamsType, SearchingEpisodesParamsType, SearchingLocationsParamsType,\r\n\r\n} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n        baseURL: 'https://rickandmortyapi.com/api/'\r\n    });\r\n\r\n    export const charactersAPI = {\r\n        async getCharacters(currentPage = 1) {\r\n            let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n            return response.data\r\n        },\r\n        async getCharacterByUrl(url: string) {\r\n            let response = await axios.get<CharacterType>(url);\r\n            return response.data\r\n        },\r\n        async getCurrentCharacter(id: number) {\r\n            let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingCharactersParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    },\r\n    async searchEpisodes(searchingParams: SearchingEpisodesParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.episode) str = `${str}&episode=${searchingParams.episode}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<EpisodesDataType>(`episode/?${str}`);\r\n        return response.data\r\n\r\n    }\r\n};\r\n\r\nexport const locationsAPI = {\r\n    async getLocations(currentPage = 1) {\r\n        let response = await instance.get<LocationsDataType>(`location/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentLocation(id: number) {\r\n        let response = await instance.get<LocationType>(`location/${id}`);\r\n        return response.data\r\n    },\r\n    async getLocationByUrl(url: string) {\r\n        let response = await axios.get<LocationType>(url);\r\n        return response.data\r\n    },\r\n    async searchLocations(searchingParams: SearchingLocationsParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.type) str = `${str}&episode=${searchingParams.type}`;\r\n        if (searchingParams.dimension) str = `${str}&episode=${searchingParams.dimension}`;\r\n        str = `${str}&page=${currentPage}`;\r\n        let response = await instance.get<LocationsDataType>(`location/?${str}`);\r\n        return response.data\r\n    }\r\n};\r\n\r\n// @types/jest @types/node @types/react @types/react-dom @types/react-redux @types/react-router-dom @types/redux-form","module.exports = __webpack_public_path__ + \"static/media/logo.3de5ba72.png\";","type EmptyType = (str: string) => boolean\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport type SearchCharactersErrorsType = {\r\n    name?: string | undefined\r\n    species?: string | undefined\r\n    type?: string | undefined\r\n    status?: string | undefined\r\n    gender?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchCharactersValidateType = (values: SearchCharactersFormValuesType) => SearchCharactersErrorsType\r\n\r\nexport type SearchCharactersFormValuesType = {\r\n    name: string\r\n    species: string\r\n    type: string\r\n    status: '' | 'alive' | 'dead' | 'unknown'\r\n    gender: '' | 'female' | 'male' | 'genderless' | 'unknown'\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchEpisodesErrorsType = {\r\n    name?: string | undefined\r\n    episode?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchEpisodesValidateType = (values: SearchEpisodesFormValuesType) => SearchEpisodesErrorsType\r\n\r\nexport type SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchLocationsErrorsType = {\r\n    name?: string | undefined\r\n    type?: string | undefined\r\n    dimension?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchLocationsValidateType = (values: SearchLocationsFormValuesType) => SearchLocationsErrorsType\r\n\r\nexport type SearchLocationsFormValuesType = {\r\n    name: string\r\n    type: string\r\n    dimension: string\r\n}","import {connect} from \"react-redux\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {sidebarAC} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\nimport {episodesAC} from \"../../../store/episodes-reducer\";\r\nimport {locationsAC} from \"../../../store/locations-reducer\";\r\nimport {SearchingCharactersParamsType} from \"../../../Types/Types\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n}\r\n\r\nexport enum OwnIndexEnum {\r\n    characters = 1,\r\n    episodes = 2,\r\n    locations = 3\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: OwnIndexEnum\r\n}\r\n\r\nexport type SidebarItemPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {\r\n    setCurrentSidebarMenuItem,\r\n    setShowCharactersFrom,\r\n    setShowEpisodesFrom,\r\n    setShowLocationsFrom,\r\n    setCurrentPage,\r\n    setSearchingParams\r\n})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport clsx from 'clsx';\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const {open, setOpen} = props;\r\n    const classes = useStyles();\r\n\r\n    const handleDrawerOpen = (): void => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, open && classes.hide)}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Link component={RouterLink}\r\n                      to='/'\r\n                      underline='none'\r\n                      className={classes.link}>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Rick and Morty DB\r\n                    </Typography>\r\n                </Link>\r\n\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n//============================= STYLES ===========================\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        root: {\r\n            backgroundColor: indigo[900],\r\n            color: lightBlue[400]\r\n        },\r\n        link: {\r\n            color: 'white',\r\n        }\r\n    }),\r\n);\r\n\r\n\r\n","export const drawerWidth = 180;","import {connect} from \"react-redux\";\r\nimport Header from \"./Header\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType  => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst setOpen = appAC.setOpen;\r\n\r\n\r\nconst HeaderContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {setOpen})(Header);\r\n\r\nexport default HeaderContainer;\r\n\r\n//------------------------------------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setOpen: (open: boolean) => void\r\n}\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst Character: React.FC<PropTypes> = ({character}) => {\r\n    const classes = useStyles();\r\n    const [localIsLoading, setLocalIsLoading] = useState(true);\r\n    const onLoadHandler = () => {\r\n        setLocalIsLoading(false)\r\n    };\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root} elevation={6}>\r\n                <CardActionArea component={RouterLink}\r\n                                className={classes.actionArea}\r\n                                to={`characters/${character.id}`}>\r\n                    {/*<CardMedia className={classes.media}*/}\r\n                    {/*           image={character.image}*/}\r\n                    {/*           */}\r\n                    {/*/>*/}\r\n                    <img src={character.image}\r\n                         className={classes.media}\r\n                         alt=\"\"\r\n                         onLoad={onLoadHandler}\r\n                    />\r\n                    {\r\n                        localIsLoading &&\r\n                            <div className={classes.preloader}>\r\n                                <CircularProgress size={100}\r\n                                                  color='primary'\r\n                                />\r\n                            </div>\r\n                    }\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\" align='center'>\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n//================= TYPES =================\r\ntype PropTypes = {\r\n    character: CharacterType\r\n}\r\n//================= STYLES ================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5,\r\n        '&:last-child': {\r\n            paddingBottom: 5\r\n        }\r\n    },\r\n    preloader: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    actionArea: {\r\n        position: 'relative'\r\n    }\r\n});\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       size='small'\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n//========================== TYPES ===========================\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\n//========================== STYLES ===========================\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(1),\r\n                marginBottom: theme.spacing(1),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\n","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\nconst renderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <InputLabel htmlFor=\"color-native-simple\">{label}</InputLabel>\r\n            <Select\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default renderSelectField;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {SearchCharactersPropsType} from \"./SearchCharactersContainer\";\r\nimport {\r\n    empty,\r\n    SearchCharactersErrorsType,\r\n    SearchCharactersFormValuesType,\r\n    SearchCharactersValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport renderSelectField from \"../../../Common/renderSelectField\";\r\nimport RenderTextField from \"../../../Common/RenderTextField\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\n//================================= FORM ===================================\r\nconst SearchCharactersForm: React.FC<InjectedFormProps<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType> & SearchCharactersFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Field name='status' component={renderSelectField} label='Status' className={classes.selectField}>\r\n                    <option value={''}/>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={renderSelectField} label='Gender' className={classes.selectField}>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={classes.button}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    startIcon={<HighlightOffIcon/>}\r\n                    onClick={reset}\r\n                    className={classes.button}>\r\n                Reset\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n        </form>\r\n    )\r\n};\r\n\r\n//===================== VALIDATE =============================\r\nconst validate: SearchCharactersValidateType = (values) => {\r\n    let errors = {} as SearchCharactersErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && (values.type !== '')) {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (\r\n        !values.gender\r\n        && !values.status\r\n        && (!values.name || empty(values.name))\r\n        && (!values.species || empty(values.species))\r\n        && (!values.type || empty(values.type))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxSearchCharactersForm = reduxForm<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType>({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst SearchCharacters: React.FC<SearchCharactersPropsType> = (props) => {\r\n    const {setSearchingParams, setCurrentPage, setShowCharactersFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchCharactersFormValuesType) => {\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFrom('search')\r\n    };\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//======================== TYPES ==========================\r\ntype SearchCharactersFormOwnPropsType = {}\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        marginRight: 10,\r\n        marginBottom: 10\r\n    },\r\n    selectField: {\r\n        marginRight: 10,\r\n        marginTop: 10\r\n\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10,\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n\r\n","import {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodeType,\r\n    SearchingCharactersParamsType,\r\n    ShowCharactersFromType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0,\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    showCharactersFrom: 'all' as ShowCharactersFromType,\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {...state, searchingParams: action.searchingParams}\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM': {\r\n            return {...state, showCharactersFrom: action.showCharactersFrom}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType | null) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'CHARACTERS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n    setShowCharactersFrom: (showCharactersFrom: ShowCharactersFromType) => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM', showCharactersFrom\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType | AppActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.getCharacters(currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n        dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n        // получение информации о эпизодах, относящихся к текущему характеру:\r\n        // в currentCharacter содержится только массив ссылок на эпизоды\r\n        const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl));\r\n        let results = await Promise.all(arrayOfRequests);\r\n        dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingCharactersParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        const charactersData = {} as CharactersDataType;\r\n        charactersData.results = []\r\n        charactersData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(charactersAC.setCharacters(charactersData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId = null, nextId = null;\r\n        const currentPage = getState().characters.currentPage;\r\n        const totalCharactersCount = getState().characters.totalCharactersCount;\r\n        const characters = getState().characters.characters;\r\n        const totalPagesCount = getState().characters.totalPagesCount;\r\n        const searchingParams = getState().characters.searchingParams;\r\n        const showCharactersFrom = getState().characters.showCharactersFrom;\r\n        // позиция id, на который переходим, целевого, в массиве characters (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInCharacters = getState().characters.characters.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА //////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'all') {\r\n            //console.log('ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА')\r\n            if (targetId > 1) {\r\n                prevId = targetId - 1;\r\n            } else {\r\n                prevId = null;\r\n            }\r\n            if (targetId < totalCharactersCount) {\r\n                nextId = targetId + 1;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n            // если целевой ид не на текущей странице и предыдущая страница существует\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ПОИСКА /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'search') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            prevId = null\r\n            // если целевой ид на текущей станице и не первый - prevId = characters[positionTargetIdInCharacters - 1]\r\n            if (positionTargetIdInCharacters > 0) {\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            }\r\n            // если целевой ид на текущей станице и первый и предыдущая страница существует - prevId - последний на предыдущей странице\r\n            if (positionTargetIdInCharacters === 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[19].id;\r\n            }\r\n            // если целевой ид не на текущей странице, предыдущая страница существует - prevId - предпоследний на предыдущей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[18].id;\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            nextId = null;\r\n            // целевой ид на текущий странице, но не последний - nextId = characters[positionCurrentIdInCharacters + 1]\r\n            if (positionTargetIdInCharacters > -1 && positionTargetIdInCharacters < characters.length - 1) { //целевой ид на текущий странице, но не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            }\r\n            // целевой ид на текущий странице и последний, следующая страница существует - nextId - первый на следующей странице\r\n            if (positionTargetIdInCharacters === characters.length - 1 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                nextId = nextCharactersData.results[0].id; // первый на следующей странице\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1 - nextId - второй на следующей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    nextId = nextCharactersData.results[1].id; // второй на следующей странице\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ЭПИЗОДА ИЛИ ИЗ ЛОКАЦИИ /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'episode' || showCharactersFrom === 'location') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters > 0) {// если целевой ид не первый\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            } else {\r\n                prevId = null\r\n            }\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters < characters.length - 1) { //целевой ид не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n        }\r\n        dispatch(charactersAC.setAroundId(prevId, nextId));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default charactersReducer;","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingCharactersParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        setSearchingParams,\r\n        setCurrentPage,\r\n        setShowCharactersFrom\r\n    })(SearchCharacters);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n}\r\n\r\nexport type SearchCharactersPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchCharactersContainer;\r\n","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nconst Preloader: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circular}>\r\n            <CircularProgress size={100} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator\";\r\nimport {\r\n    Badge,\r\n    Collapse,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharactersPropsType} from \"./CharactersContainer\";\r\nimport Preloader from \"../../Common/Preloader\";\r\nimport {NumberParam, StringParam, useQueryParam} from \"use-query-params\";\r\nimport {ShowCharactersFromType} from \"../../../Types/Types\";\r\nimport useCommonQueryParams from \"../../../Hooks/useCommonQueryParams\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\nconst Characters: React.FC<CharactersPropsType> = (props) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage,\r\n        getCharacters, setCurrentPage, totalCharactersCount,\r\n        getCharactersFromSearch, searchingParams, isLoading,\r\n        lanError, setShowCharactersFrom, showCharactersFrom, currentEpisode,\r\n        currentLocation, setSearchingParams\r\n    } = props;\r\n\r\n    useCommonQueryParams();\r\n\r\n    //=============================== useQueryParam ==========================\r\n    const [currentPageQuery, setCurrentPageQuery] = useQueryParam('page', NumberParam);\r\n    const [showCharactersFromQuery, setShowCharactersFromQuery] = useQueryParam('showFrom', StringParam);\r\n    const [nameQuery, setNameQuery] = useQueryParam('name', StringParam);\r\n    const [genderQuery, setGenderQuery] = useQueryParam('gender', StringParam);\r\n    const [statusQuery, setStatusQuery] = useQueryParam('status', StringParam);\r\n    const [speciesQuery, setSpeciesQuery] = useQueryParam('species', StringParam);\r\n    const [typeQuery, setTypeQuery] = useQueryParam('type', StringParam);\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        setCurrentPage(currentPageQuery ? currentPageQuery : currentPage);\r\n        setShowCharactersFrom(showCharactersFromQuery ? showCharactersFromQuery as ShowCharactersFromType : showCharactersFrom);\r\n        setSearchingParams({\r\n            name: nameQuery ? nameQuery : searchingParams.name,\r\n            gender: genderQuery ? genderQuery : searchingParams.gender,\r\n            status: statusQuery ? statusQuery : searchingParams.status,\r\n            species: speciesQuery ? speciesQuery : searchingParams.species,\r\n            type: typeQuery ? typeQuery : searchingParams.type\r\n        });\r\n    }, []);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setCurrentPageQuery(currentPage !== 1 ? currentPage : undefined);\r\n        setShowCharactersFromQuery(showCharactersFrom !== 'all' ? showCharactersFrom : undefined);\r\n        setNameQuery(searchingParams.name !== '' ? searchingParams.name : undefined);\r\n        setGenderQuery(searchingParams.gender !== '' ? searchingParams.gender : undefined);\r\n        setStatusQuery(searchingParams.status !== '' ? searchingParams.status : undefined);\r\n        setSpeciesQuery(searchingParams.species !== '' ? searchingParams.species : undefined);\r\n        setTypeQuery(searchingParams.type !== '' ? searchingParams.type : undefined);\r\n    }, [\r\n        currentPage,\r\n        showCharactersFrom,\r\n        searchingParams\r\n    ]);\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);// панель поиска\r\n\r\n    useEffect(() => {\r\n        if (showCharactersFrom === 'all') {\r\n            getCharacters(currentPage);\r\n        }\r\n        if (showCharactersFrom === 'search') {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFrom]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowCharactersFrom('all')\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            setOpen(true)\r\n        }\r\n    }, [lanError])\r\n\r\n    const handleOk = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"xs\"\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={open}\r\n                >\r\n                    <DialogTitle id=\"confirmation-dialog-title\">Error</DialogTitle>\r\n                    <DialogContent>\r\n                        Some error occurred on the network\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={handleOk} color=\"primary\">\r\n                            Ok\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchCharactersContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchCharactersClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        startIcon={<VisibilityIcon/>}\r\n                        disabled={showCharactersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showCharactersFrom === 'episode' && <div className={classes.count}>\r\n                    {`List of the characters from episode: ${currentEpisode.episode} - ${currentEpisode.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'location' && <div className={classes.count}>\r\n                    {currentLocation && `List of the characters from location: ${currentLocation.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the characters from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total characters count: `}\r\n                    <Badge badgeContent={totalCharactersCount} color=\"primary\" max={99999} showZero>\r\n                        <PeopleIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                {!characters.length || showCharactersFrom === 'episode' || showCharactersFrom === 'location' ? null :\r\n                    <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                               onPaginatorItemClick={onPaginatorItemClick}\r\n                               currentPage={currentPage}\r\n                    />}\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <Preloader/>\r\n                : <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                    {charactersElements}\r\n                </Grid>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n\r\n//=================== STYLES ==========================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 10\r\n    },\r\n});\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {\r\n    CharacterType,\r\n    EpisodeType,\r\n    LocationType,\r\n    SearchingCharactersParamsType,\r\n    ShowCharactersFromType\r\n} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    searchingParams: SearchingCharactersParamsType\r\n    isLoading: boolean\r\n    lanError: boolean\r\n    totalCharactersCount: number\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n    currentEpisode: EpisodeType\r\n    currentLocation: null | LocationType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingCharactersParamsType, currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: ShowCharactersFromType) => void\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    currentLocation: state.locations.currentLocation\r\n});\r\n\r\nexport type CharactersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCharacters,\r\n        setCurrentPage,\r\n        getCharactersFromSearch,\r\n        setShowCharactersFrom,\r\n        setSearchingParams\r\n    })(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        borderBottom: '1px #ccc solid',\r\n        paddingLeft: 10,\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n\r\n});\r\n\r\nconst RowCustom: React.FC<RowCustomPropsTypes> = (props) => {\r\n    const classes = useStyles()\r\n    const {leftContent, rightContent} = props\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1'>{leftContent}</Typography>\r\n            <Typography variant='h6' color='primary'>{rightContent}</Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RowCustom;\r\n\r\ntype RowCustomPropsTypes = {\r\n    leftContent: string\r\n    rightContent: string\r\n}","import React from \"react\";\r\nimport {useEffect} from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card, CardMedia,\r\n    Grid, List, ListItem,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodesDataType, PathParamsType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport {CharactersInfoPropsType} from \"./CharacterInfoContainer\";\r\nimport RowCustom from \"../../../Common/RowCustom\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = (props) => {\r\n    const classes = useStyles()\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.episode}>\r\n            <ListItem button component={renderLink} onClick={onClick}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='textPrimary' variant='subtitle1'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, match, getCurrentCharacter, isLoading,\r\n        episodesOfCurrentCharacter, setCurrentSidebarMenuItem, getAroundId, aroundId,\r\n        lanError, showCharactersFrom, setShowCharactersFrom, setShowEpisodesFrom,\r\n        setEpisodes\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentCharacter(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    }\r\n\r\n    const onEpisodeClick = () => {\r\n        setCurrentSidebarMenuItem(3);\r\n        setShowEpisodesFrom('character');\r\n        // записать в episodes эпизоды из характера\r\n        if (episodesOfCurrentCharacter) {\r\n            const episodesOfCurrentCharacterData = {} as EpisodesDataType;\r\n            episodesOfCurrentCharacterData.results = episodesOfCurrentCharacter\r\n\r\n            episodesOfCurrentCharacterData.info = {\r\n                count: episodesOfCurrentCharacter.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setEpisodes(episodesOfCurrentCharacterData)\r\n        }\r\n    };\r\n\r\n    const onBackToAllCharacters = () => {\r\n        setShowCharactersFrom('all');\r\n    }\r\n\r\n    if (lanError) {\r\n        return <Redirect to=\"/characters\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between'>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous character\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllCharacters}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to all characters\r\n                </Button>\r\n\r\n                {(showCharactersFrom === 'search' || showCharactersFrom === 'episode' || showCharactersFrom === 'location') &&\r\n                <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to characters from {showCharactersFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next character\r\n                </Button>\r\n            </Grid>\r\n\r\n            {(isLoading || !currentCharacter || !episodesOfCurrentCharacter\r\n                || +match.params.id !== currentCharacter.id)\r\n                ? <Preloader/>\r\n                : <div>\r\n                    <div className={classes.characterInfoBlock}>\r\n                        <div className={classes.cardContainer}>\r\n                            <Card className={classes.card}>\r\n                                <CardMedia\r\n                                    className={classes.media}\r\n                                    image={currentCharacter.image}/>\r\n                                <Typography color='error' variant='h5' className={classes.name}>\r\n                                    {currentCharacter.name}\r\n                                </Typography>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className={classes.characterInfo}>\r\n                            <RowCustom leftContent='Gender:' rightContent={currentCharacter.gender}/>\r\n                            <RowCustom leftContent='Status:' rightContent={currentCharacter.status}/>\r\n                            <RowCustom leftContent='Species:' rightContent={currentCharacter.species}/>\r\n                            {currentCharacter.type &&\r\n                            <RowCustom leftContent='Subspecies:' rightContent={currentCharacter.type}/>}\r\n                            <RowCustom leftContent='Origin location:' rightContent={currentCharacter.origin.name}/>\r\n                            <RowCustom leftContent='Last known location endpoint:'\r\n                                       rightContent={currentCharacter.location.name}/>\r\n\r\n                            <div className={classes.titleOfList}>\r\n                                <Typography variant='h6' color='secondary' component='span'>\r\n                                    {'List of episodes in which this character appeared: '}\r\n                                </Typography>\r\n                                <Badge badgeContent={episodesOfCurrentCharacter.length} color=\"secondary\" max={99999}\r\n                                       showZero>\r\n                                    <MovieIcon/>\r\n                                </Badge>\r\n                            </div>\r\n\r\n                            <List>\r\n                                {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                    onClick={onEpisodeClick}\r\n                                    key={episode.id}\r\n                                    to={`/episodes/${episode.id}`}\r\n                                    primary={`${episode.episode} - ${episode.name}`}>\r\n                                </ListItemLink>)}\r\n                            </List>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;\r\n\r\n//=================== TYPES =====================\r\ntype ListItemLinkPropsType = {\r\n    icon?: React.ReactElement\r\n    primary: string\r\n    to: string\r\n    onClick: () => void\r\n    children: any\r\n};\r\ntype PropsType = CharactersInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n//=================== STYLES ====================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        textTransform: 'none',\r\n        marginBottom: 10\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10,\r\n        marginRight: 20\r\n    },\r\n    cardContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    episode: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    },\r\n    name: {\r\n        textAlign: 'center',\r\n        paddingTop: 5,\r\n        paddingBottom: 5\r\n    },\r\n    characterInfoBlock: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'flex-start'\r\n    },\r\n    characterInfo: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getAroundId, getCurrentCharacter} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodesDataType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    isLoading: boolean\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    lanError: boolean\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    getAroundId: (currentCharacterId: number, change: null | 'prev' | 'next') => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setEpisodes: (episodesData: EpisodesDataType) => void\r\n}\r\n\r\nexport type CharactersInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    currentCharacter: state.characters.currentCharacter,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter,\r\n    aroundId: state.characters.aroundId,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n});\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setEpisodes = episodesAC.setEpisodes;\r\n\r\nconst CharacterInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    {},\r\n    StateType>(mapStateToProps,\r\n    {\r\n        getCurrentCharacter, setCurrentSidebarMenuItem, getAroundId,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setEpisodes\r\n    }), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import React, {useEffect} from \"react\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodeInfoPropsType} from \"./EpisodeInfoContainer\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\n\r\ntype PropsType = EpisodeInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode,\r\n        setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n        setCharacters, getAroundId, setShowEpisodesFrom, aroundId, showEpisodesFrom\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentEpisode(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onBackToAllEpisodes = () => {\r\n        setShowEpisodesFrom('all');\r\n    }\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('episode'); // изменить источник Characters\r\n        // записать в characters характеры из эпизода\r\n        if (charactersOfCurrentEpisode) {\r\n            const charactersOfCurrentEpisodeData = {} as CharactersDataType;\r\n            charactersOfCurrentEpisodeData.results = charactersOfCurrentEpisode\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentEpisodeData.info = {\r\n                count: charactersOfCurrentEpisode.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setCharacters(charactersOfCurrentEpisodeData)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous episode\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllEpisodes}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to all episodes\r\n                </Button>\r\n\r\n                {(showEpisodesFrom === 'search' || showEpisodesFrom === 'character') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to episodes from {showEpisodesFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next episode\r\n                </Button>\r\n            </Grid>\r\n\r\n            {isLoading || !currentEpisode || !charactersOfCurrentEpisode || +match.params.id !== currentEpisode.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5'>\r\n                        {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                    </Typography>\r\n\r\n                    <Typography color='textSecondary' variant='h6'>\r\n                        The air date: {currentEpisode.air_date}\r\n                    </Typography>\r\n\r\n                    <Typography color='textPrimary' variant='h6'>\r\n                        {'List of characters who have been seen in the episode '}\r\n                        <Badge badgeContent={charactersOfCurrentEpisode.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </Typography>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentEpisode\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                      key={character.id}\r\n                                                      onClick={onCharacterClick}\r\n                                                      color={'default'}\r\n                                                      className={classes.characterItem}\r\n                                                      component={RouterLink}\r\n                                                      to={`/characters/${character.id}`}\r\n                                                      size='large'>\r\n                                    <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                    {character.name}\r\n                                </Button>\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;\r\n\r\n//=========================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {episodesAC, getAroundId, getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    //totalEpisodesCount: number\r\n    aroundId: {prevId: null | number, nextId: null | number}\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n    //totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    aroundId: state.episodes.aroundId,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n});\r\n\r\nexport type EpisodeInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodeInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setCharacters, getAroundId,\r\n        setShowEpisodesFrom}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import {\r\n    CharacterType,\r\n    LocationsDataType,\r\n    LocationType,\r\n    SearchingLocationsParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {charactersAPI, locationsAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    locations: [] as Array<LocationType>,\r\n    totalLocationsCount: 0,\r\n    totalPagesCount: 0,\r\n    currentLocation: null as null | LocationType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentLocation: null as null | Array<CharacterType>,\r\n    showLocationsFrom: 'all' as 'all' | 'search',\r\n    searchingParams: {\r\n        name: '', type: '', dimension: ''\r\n    },\r\n    currentLocationId: null as null | number,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst locationsReducer = (state = initialState, action: LocationsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOCATIONS/SET_LOCATIONS': {\r\n            return {\r\n                ...state,\r\n                locations: action.locationsData.results,\r\n                totalLocationsCount: action.locationsData.info.count,\r\n                totalPagesCount: action.locationsData.info.pages,\r\n                next: action.locationsData.info.next,\r\n                prev: action.locationsData.info.prev\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION': {\r\n            return {...state, currentLocation: action.currentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION': {\r\n            return {...state, charactersOfCurrentLocation: action.charactersOfCurrentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_SHOW_LOCATIONS_FROM': {\r\n            return {...state, showLocationsFrom: action.showLocationsFrom}\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION_ID': {\r\n            return {...state, currentLocationId: action.currentLocationId}\r\n        }\r\n        case 'LOCATIONS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype LocationsActionsType = GetActionsType<typeof locationsAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, LocationsActionsType | AppActionsType>\r\n\r\nexport const locationsAC = {\r\n    setLocations: (locationsData: LocationsDataType) => ({type: 'LOCATIONS/SET_LOCATIONS', locationsData} as const),\r\n    setCurrentLocation: (currentLocation: LocationType | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION',\r\n        currentLocation\r\n    } as const),\r\n    setCharactersOfCurrentLocation: (charactersOfCurrentLocation: Array<CharacterType>) => ({\r\n        type: 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION',\r\n        charactersOfCurrentLocation\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => ({\r\n        type: 'LOCATIONS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => ({\r\n        type: 'LOCATIONS/SET_SHOW_LOCATIONS_FROM', showLocationsFrom\r\n    } as const),\r\n    setCurrentLocationId: (currentLocationId: number | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION_ID',\r\n        currentLocationId\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'LOCATIONS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\nexport const getLocations = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await locationsAPI.getLocations();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ локаций\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.getLocations(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as LocationsDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<LocationType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    // 3 - сортировка локаций по имени\r\n    resultsArray.sort((a, b) => {\r\n        if (a.name > b.name) return 1;\r\n        if (a.name < b.name) return -1;\r\n        return 0;\r\n    });\r\n    data.results = resultsArray;\r\n    // 4 - запись ВСЕХ локаций в store\r\n    dispatch(locationsAC.setLocations(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentLocation = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let currentLocationResponse = await locationsAPI.getCurrentLocation(id);\r\n    dispatch(locationsAC.setCurrentLocation(currentLocationResponse));\r\n    // получение информации о персонажах, относящихся к текущей локации:\r\n    // в currentLocation содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты LocationInfo\r\n    const arrayOfRequests = currentLocationResponse.residents.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(locationsAC.setCharactersOfCurrentLocation(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getLocationsFromSearch = (searchingParams: SearchingLocationsParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        const resultWithTotalPageCount = await locationsAPI.searchLocations(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ локаций\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n        const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.searchLocations(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as LocationsDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<LocationType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(locationsAC.setLocations(data));\r\n    } catch (e) {\r\n        const locationsData = {} as LocationsDataType;\r\n        locationsData.results = []\r\n        locationsData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(locationsAC.setLocations(locationsData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const locations = getState().locations.locations;\r\n        // позиция id, на который переходим, целевого, в массиве locations (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInLocations = getState().locations.locations.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInLocations > 0) { // если целевой ид не первый\r\n            prevId = locations[positionTargetIdInLocations - 1].id\r\n        } else {\r\n            prevId = null;\r\n        }\r\n        if (positionTargetIdInLocations < locations.length - 1) {// если целевой ид не последний\r\n            nextId = locations[positionTargetIdInLocations + 1].id\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(locationsAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default locationsReducer;","import React from \"react\";\r\nimport {LocationType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkProps> = (props) => {\r\n    const classes = useStyles();\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem onClick={onClick} button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Location: React.FC<PropsType> = (props) => {\r\n    const {location, setCurrentLocationId} = props;\r\n    const onClick = () => {\r\n        setCurrentLocationId(location.id)\r\n    };\r\n    return (\r\n        <ListItemLink\r\n            to={`/locations/${location.id}`}\r\n            onClick={onClick}\r\n            primary={location.name}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Location;\r\n\r\n//============== TYPES ===============\r\ntype ListItemLinkProps = {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n    children: any\r\n    onClick: () => void\r\n}\r\ntype PropsType = {\r\n    location: LocationType\r\n    setCurrentLocationId: (id: number | null) => void\r\n};\r\n\r\n//================== STYLES ==================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField\";\r\nimport {\r\n    empty,\r\n    SearchLocationsErrorsType,\r\n    SearchLocationsFormValuesType,\r\n    SearchLocationsValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport {SearchLocationsPropsType} from \"./SearchLocationsContainer\";\r\n\r\n//===============================FORM =====================================\r\nconst SearchLocationsForm: React.FC<InjectedFormProps<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType> & SearchLocationsFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='dimension' component={RenderTextField} label='Dimension' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n//========================== VALIDATE ============================\r\nconst validate: SearchLocationsValidateType = (values) => {\r\n    let errors = {} as SearchLocationsErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (empty(values.dimension) && (values.dimension !== '')) {\r\n        errors.dimension = 'dimension field is empty'\r\n    }\r\n    if (\r\n        (!values.name || empty(values.name))\r\n        && (!values.type || empty(values.type))\r\n        && (!values.dimension || empty(values.dimension))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n};\r\n\r\n//=========================== REDUX-FORM ======================================\r\nconst ReduxSearchLocationsForm = reduxForm<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType>({\r\n    form: 'searchLocations',\r\n    validate\r\n})(SearchLocationsForm);\r\n\r\n//=========================== COMPONENT ======================================\r\nconst SearchLocations: React.FC<SearchLocationsPropsType> = (props) => {\r\n    const {setSearchingParams, setShowLocationsFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchLocationsFormValuesType) => {\r\n        setSearchingParams(formValue)\r\n        setShowLocationsFrom('search')\r\n    };\r\n    return (\r\n        <ReduxSearchLocationsForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchLocations;\r\n\r\n//=========================== TYPES ==============================\r\ntype SearchLocationsFormOwnPropsType = {}\r\n\r\n//========================== STYLES ===============================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {locationsAC} from \"../../../../store/locations-reducer\";\r\nimport SearchLocations from \"./SearchLocations\";\r\nimport {SearchingLocationsParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = locationsAC.setSearchingParams;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\n\r\nconst SearchLocationsContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setShowLocationsFrom})(SearchLocations);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\nexport type SearchLocationsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchLocationsContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Badge, CircularProgress, Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Location from './Location/Location'\r\nimport {LocationsPropsType} from \"./LocationsContainer\";\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport SearchLocationsContainer from \"./SearchLocations/SearchLocationsContainer\";\r\nimport useCommonQueryParams from \"../../../Hooks/useCommonQueryParams\";\r\n\r\nconst Locations: React.FC<LocationsPropsType> = (props) => {\r\n    useCommonQueryParams();\r\n    const {\r\n        locations, getLocations, searchingParams, getLocationsFromSearch,\r\n        showLocationsFrom, setShowLocationsFrom, totalLocationsCount,\r\n        setCurrentLocationId, isLoading\r\n    } = props;\r\n\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n    const [selectedLetter, setSelectedLetter] = useState('All');\r\n\r\n    const classes = useStyles();\r\n\r\n    const locationsElements = locations.map(item => {\r\n        if (selectedLetter === 'All') return <Location key={item.id} location={item}\r\n                                                       setCurrentLocationId={setCurrentLocationId}/>\r\n        if (selectedLetter !== 'All' && item.name[0] === selectedLetter) {\r\n            return <Location key={item.id} location={item} setCurrentLocationId={setCurrentLocationId}/>\r\n        }\r\n    });\r\n\r\n    const alphabetCustom = [] as Array<string>;\r\n    locations.forEach(location => {\r\n        if (!alphabetCustom.includes(location.name[0])) {\r\n            alphabetCustom.push(location.name[0])\r\n        }\r\n    });\r\n    alphabetCustom.sort((a, b) => {\r\n        if (a > b) return 1;\r\n        if (a < b) return -1;\r\n        return 0;\r\n    });\r\n    alphabetCustom.push('All');\r\n\r\n    const arrayOfButtons = alphabetCustom.map(item => {\r\n        const onAlphabetButtonClick = () => {\r\n            setSelectedLetter(item);\r\n        };\r\n        const className = (item === selectedLetter)\r\n            ? `${classes.alphabetButton} ${classes.selected}`\r\n            : `${classes.alphabetButton}`\r\n        return <Button className={className}\r\n                       onClick={onAlphabetButtonClick}\r\n                       key={item}\r\n                       size='small'\r\n                       variant='outlined'>\r\n            {item}\r\n        </Button>\r\n    });\r\n\r\n    const onSearchClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowLocationsFrom('all');\r\n        setSelectedLetter('All');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (showLocationsFrom === 'all') {\r\n            getLocations();\r\n        }\r\n        if (showLocationsFrom === 'search') {\r\n            getLocationsFromSearch(searchingParams);\r\n            setSelectedLetter('All')\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.type, searchingParams.dimension, showLocationsFrom]);\r\n    //\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchLocationsContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showLocationsFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showLocationsFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the locations from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total locations count: `}\r\n                    <Badge badgeContent={totalLocationsCount} color=\"primary\" max={99999} showZero>\r\n                        <RoomIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                <div>\r\n                    {arrayOfButtons}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {locationsElements}\r\n                </List>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Locations;\r\n\r\n//=============================== STYLES ========================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    alphabetButton: {\r\n        minWidth: 30,\r\n        width: 30,\r\n        height: 30,\r\n        padding: 0,\r\n        borderRadius: 15,\r\n        textTransform: 'none'\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    selected: {\r\n        backgroundColor: '#ccc'\r\n    }\r\n});\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {LocationType, SearchingLocationsParamsType} from \"../../../Types/Types\";\r\nimport {getLocations, getLocationsFromSearch, locationsAC} from \"../../../store/locations-reducer\";\r\nimport Locations from \"./Locations\";\r\n\r\nexport type MapStatePropsType = {\r\n    locations: Array<LocationType>\r\n    totalPagesCount: number\r\n    searchingParams: SearchingLocationsParamsType\r\n    showLocationsFrom: 'all' | 'search'\r\n    totalLocationsCount: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCurrentLocationId = locationsAC.setCurrentLocationId;\r\n\r\nexport type MapDispatchPropsType = {\r\n    getLocations: () => void\r\n    getLocationsFromSearch: (searchingParams: SearchingLocationsParamsType) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    setCurrentLocationId: (currentLocationId: number | null) => void\r\n}\r\n\r\nexport type LocationsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    locations: state.locations.locations,\r\n    totalPagesCount: state.locations.totalPagesCount,\r\n    searchingParams: state.locations.searchingParams,\r\n    showLocationsFrom: state.locations.showLocationsFrom,\r\n    totalLocationsCount: state.locations.totalLocationsCount,\r\n    isLoading: state.app.isLoading\r\n});\r\n\r\nconst LocationsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {getLocations, getLocationsFromSearch, setShowLocationsFrom,\r\n    setCurrentLocationId})(Locations);\r\n\r\nexport default LocationsContainer;","import React, {useEffect} from \"react\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {LocationInfoPropsType} from \"./LocationInfoContainer\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\nimport RowCustom from \"../../../Common/RowCustom\";\r\n\r\nconst LocationInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentLocation, currentLocation, charactersOfCurrentLocation,\r\n        setCurrentSidebarMenuItem, setShowLocationsFrom, getAroundId, aroundId,\r\n        showLocationsFrom, setCharacters, setShowCharactersFrom,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentLocation(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('location'); // изменить источник Characters\r\n\r\n        // записать в characters характеры из локации\r\n        if (charactersOfCurrentLocation) {\r\n            const charactersOfCurrentLocationData = {} as CharactersDataType;\r\n            charactersOfCurrentLocationData.results = charactersOfCurrentLocation\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentLocationData.info = {\r\n                count: charactersOfCurrentLocation.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            };\r\n            setCharacters(charactersOfCurrentLocationData)\r\n        }\r\n\r\n    }\r\n\r\n    const onBackToAllLocations = () => {\r\n        setShowLocationsFrom('all');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading} //\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous location\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllLocations}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<RoomIcon/>}>\r\n                    Back to all locations\r\n                </Button>\r\n\r\n                {(showLocationsFrom === 'search') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to locations from search\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next location\r\n                </Button>\r\n            </Grid>\r\n\r\n            { isLoading || !currentLocation || !charactersOfCurrentLocation || +match.params.id !== currentLocation.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5' className={classes.titleOfList}>\r\n                        {currentLocation.name}\r\n                    </Typography>\r\n\r\n                    <RowCustom leftContent='The type of the location:' rightContent={currentLocation.type}/>\r\n                    <RowCustom leftContent='The dimension in which the location is located:' rightContent={currentLocation.dimension}/>\r\n\r\n                    <div className={classes.titleOfList}>\r\n                        <Typography variant='h6' color='secondary' component='span'>\r\n                        {'List of character who have been last seen in the location '}\r\n                        </Typography>\r\n                        <Badge badgeContent={charactersOfCurrentLocation.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentLocation\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                   key={character.id}\r\n                                                   onClick={onCharacterClick}\r\n                                                   color={'default'}\r\n                                                   className={classes.characterItem}\r\n                                                   component={RouterLink}\r\n                                                   to={`/characters/${character.id}`}\r\n                                                   size='large'>\r\n                                        <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                        {character.name}\r\n                                    </Button>\r\n\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LocationInfo;\r\n\r\n//======================= TYPES ===========================\r\ntype PropsType = LocationInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n//======================= STYLES ==========================\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    }\r\n});","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, LocationType} from \"../../../../Types/Types\";\r\nimport {getAroundId, getCurrentLocation, locationsAC} from \"../../../../store/locations-reducer\";\r\nimport LocationInfo from \"./LocationInfo\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentLocation: LocationType | null\r\n    charactersOfCurrentLocation: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    showLocationsFrom: 'all' | 'search'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentLocation: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nexport type LocationInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentLocation: state.locations.currentLocation,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentLocation: state.locations.charactersOfCurrentLocation,\r\n    aroundId: state.locations.aroundId,\r\n    showLocationsFrom: state.locations.showLocationsFrom\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\nconst LocationInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCurrentLocation, setCurrentSidebarMenuItem,\r\n        setShowLocationsFrom,\r\n        getAroundId, setCharacters, setShowCharactersFrom\r\n    }), withRouter)(LocationInfo);\r\n\r\nexport default LocationInfoContainer;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport logo from './../../../assets/logo.png'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport useCommonQueryParams from \"../../../Hooks/useCommonQueryParams\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       alignItems: 'center'\r\n    },\r\n    img: {\r\n        maxWidth: 300,\r\n        width: '100%',\r\n        marginTop: 20\r\n    }\r\n}));\r\n\r\nconst Home: React.FC = () => {\r\n    useCommonQueryParams();\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography color='primary' variant=\"h6\" align='center'>\r\n                Welcome to Rick and Morty DB\r\n            </Typography>\r\n            <div>\r\n                <img className={classes.img} src={logo} alt=\"\"/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\n\r\nconst PageNotFound: React.FC = () => {\r\n    return (\r\n        <Typography align='center'\r\n                    color='secondary'\r\n                    variant='h6'>\r\n            Page not found\r\n        </Typography>\r\n    )\r\n\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n\r\n","import React, {Suspense} from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\nimport LocationsContainer from \"./Locations/LocationsContainer\";\r\nimport LocationInfoContainer from \"./Locations/LocationInfo/LocationInfoContainer\";\r\nimport {MainPropsType} from \"./MainContainer\";\r\nimport clsx from \"clsx\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\nimport Home from \"./Home/Home\";\r\nimport PageNotFound from \"../Common/PageNotFound\";\r\nimport Preloader from \"../Common/Preloader\";\r\n\r\nconst EpisodesContainer = React.lazy(() => import ('./Episodes/EpisodesContainer'))\r\n\r\nconst Main: React.FC<MainPropsType> = (props) => {\r\n    const {open} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={clsx(classes.content, {\r\n            [classes.contentShift]: open,\r\n        })}>\r\n            <div className={classes.drawerHeader}/>\r\n            <Suspense fallback={<Preloader/>}>\r\n                <Switch>\r\n                    <Route exact path='/' component={Home}/>\r\n                    <Route exact path='/characters' component={CharactersContainer}/>\r\n                    <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n                    <Route exact path='/locations' component={LocationsContainer}/>\r\n                    <Route path='/locations/:id' render={() => <LocationInfoContainer/>}/>\r\n                    <Route exact path='/episodes' component={EpisodesContainer}/>\r\n                    <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n                    <Route path='*' render={() => <PageNotFound/>}/>\r\n                </Switch>\r\n            </Suspense>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n\r\n//================================= STYLES ======================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}));","import {connect} from \"react-redux\";\r\nimport Main from \"./Main\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst MainContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {})(Main);\r\n\r\nexport default MainContainer;\r\n\r\n//--------------------------TYPES---------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type MainPropsType = MapStatePropsType & MapDispatchPropsType;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {OwnIndexEnum, SidebarItemPropsType} from \"./SidebarItemContainer\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst SidebarItem: React.FC<SidebarItemPropsType> = (props) => {\r\n    const {\r\n        to, primary, icon, currentItem, ownIndex, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setShowLocationsFrom,\r\n        setCurrentPage, setSearchingParams\r\n    } = props;\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n        setCurrentSidebarMenuItem(ownIndex);\r\n        setCurrentPage(1); // сброс номера страницы characters\r\n        setSearchingParams({name: '', gender: '', species: '', status: '', type: ''});\r\n        //if (ownIndex === OwnIndexEnum.characters) {\r\n            setShowCharactersFrom('all')\r\n        //}\r\n        //if (ownIndex === OwnIndexEnum.locations) {\r\n            setShowLocationsFrom('all')\r\n        //}\r\n        //if (ownIndex === OwnIndexEnum.episodes) {\r\n            setShowEpisodesFrom('all')\r\n        //}\r\n    };\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon className={clsx(ownIndex === currentItem && classes.icon)}>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//=================================== STYLES =====================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n        color: indigo[500]\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {SidebarPropsType} from \"./SidebarContainer\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\n\r\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\r\n    const {setOpen, open} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <SidebarItemContainer ownIndex={0} to={\"/\"} primary={'Home'} icon={<HomeIcon/>}/>\r\n                <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//===================================== STYLES =====================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n","import {connect} from \"react-redux\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst setOpen = appAC.setOpen;\r\n\r\nconst SidebarContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {setOpen})(Sidebar);\r\n\r\nexport default SidebarContainer;\r\n\r\n//--------------------------------------------------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    setOpen: (open: boolean) => void\r\n}\r\nexport type SidebarPropsType =  MapStatePropsType & MapDispatchPropsType;","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}","import React from 'react';\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport MainContainer from \"./Components/Main/MainContainer\";\nimport SidebarContainer from \"./Components/Sidebar/SidebarContainer\";\nimport ErrorBoundary from \"./Components/Common/ErrorBoundary\";\n// SSH\nconst App = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <ErrorBoundary>\n                <HeaderContainer/>\n                <SidebarContainer/>\n                <MainContainer/>\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;\n\n//=================== STYLE =======================\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        }\n    }),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport locationsReducer from \"./locations-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer,\r\n    app: appReducer,\r\n    locations: locationsReducer\r\n});\r\n\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n//================ TYPE =======================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter, Route} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\nimport {QueryParamProvider} from \"use-query-params\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <QueryParamProvider ReactRouterRoute={Route}>\n                <App/>\n            </QueryParamProvider>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n\n","import {GetActionsType} from \"./store\";\r\n\r\nconst SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype CharactersActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: CharactersActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => ({type: SET_CURRENT_ITEM, currentItem} as const)\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import {\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType,\r\n    SearchingEpisodesParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>,\r\n    showEpisodesFrom: 'all' as 'all' | 'search' | 'character',\r\n    searchingParams: {\r\n        name: '', episode: ''\r\n    },\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'EPISODES/SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'EPISODES/SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        case 'EPISODES/SET_SHOW_EPISODES_FROM': {\r\n            return {...state, showEpisodesFrom: action.showEpisodesFrom}\r\n        }\r\n        case 'EPISODES/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'EPISODES/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType | AppActionsType>\r\n\r\nexport const episodesAC = {\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'EPISODES/SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({\r\n        type: 'EPISODES/SET_CURRENT_EPISODE',\r\n        currentEpisode\r\n    } as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const),\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => ({\r\n        type: 'EPISODES/SET_SHOW_EPISODES_FROM', showEpisodesFrom\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => ({\r\n        type: 'EPISODES/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'EPISODES/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись ВСЕХ эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getEpisodesFromSearch = (searchingParams: SearchingEpisodesParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        console.log(searchingParams)\r\n        const resultWithTotalPageCount = await episodesAPI.searchEpisodes(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ эпизодов\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n\r\n        const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.searchEpisodes(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as EpisodesDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<EpisodeType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(episodesAC.setEpisodes(data));\r\n    } catch (e) {\r\n        const episodesData = {} as EpisodesDataType;\r\n        episodesData.results = []\r\n        episodesData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(episodesAC.setEpisodes(episodesData));\r\n\r\n\r\n\r\n\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const episodes = getState().episodes.episodes;\r\n        // позиция id, на который переходим, целевого, в массиве episodes (т.е. на текущей странице)\r\n        const positionTargetIdInEpisodes = getState().episodes.episodes.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes > 0) {// если целевой ид не первый\r\n            prevId = episodes[positionTargetIdInEpisodes - 1].id\r\n        } else {\r\n            prevId = null\r\n        }\r\n        // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes < episodes.length - 1) { //целевой ид не последний\r\n            nextId = episodes[positionTargetIdInEpisodes + 1].id;\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(episodesAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default episodesReducer;","import {TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const { label, input, meta: {touched, invalid, error}, ...custom} = props;\r\n\r\n    return (\r\n        <TextField\r\n            label={label}\r\n            placeholder={label}\r\n            error={touched && invalid}\r\n            helperText={touched && error}\r\n            {...input}\r\n            {...custom}/>\r\n        );\r\n};\r\n\r\nexport default RenderTextField;\r\n\r\n//================== TYPES ====================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n\r\n}","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {NumberParam, useQueryParam} from \"use-query-params\";\r\nimport {useEffect} from \"react\";\r\nimport {StateType} from \"../store/store\";\r\nimport {sidebarAC} from \"../store/sidebar-reducer\";\r\n\r\nconst useCommonQueryParams = () => {\r\n    const dispatch = useDispatch();\r\n    const currentItem = useSelector((state: StateType) => state.sidebar.currentItem);\r\n    const [sidebarItemQuery, setSidebarItemQuery] = useQueryParam('sidebarItem', NumberParam);\r\n\r\n    // URL => STATE\r\n    useEffect(() => {\r\n        dispatch(sidebarAC.setCurrentSidebarMenuItem(sidebarItemQuery ? sidebarItemQuery : currentItem));\r\n    }, [dispatch]);\r\n    // STATE => URL\r\n    useEffect(() => {\r\n        setSidebarItemQuery(currentItem !== 0 ? currentItem : undefined);\r\n    }, [\r\n        currentItem,\r\n    ]);\r\n}\r\nexport default useCommonQueryParams;"],"sourceRoot":""}