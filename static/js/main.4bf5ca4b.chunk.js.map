{"version":3,"sources":["assets/logo.png","Components/Header/Header.tsx","CONST/const.js","store/app-reducer.ts","Components/Header/HeaderContainer.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator/Paginator.tsx","Components/Common/RenderTextField/RenderTextField.jsx","Helpers/Validators.ts","Components/Common/renderSelectField.jsx","Components/Main/Characters/SearchCharacters/SearchCharacters.tsx","DAL/api.ts","store/characters-reducer.ts","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Common/Preloader/Preloader.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Common/RowCustom/RowCustom.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","store/sidebar-reducer.ts","store/episodes-reducer.ts","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","Components/Main/Episodes/Episode/Episode.tsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodes.tsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodesContainer.tsx","Components/Main/Episodes/Episodes.tsx","Components/Main/Episodes/EpisodesContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","store/locations-reducer.ts","Components/Main/Locations/Location/Location.tsx","Components/Main/Locations/SearchLocations/SearchLocations.tsx","Components/Main/Locations/SearchLocations/SearchLocationsContainer.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Locations/LocationsContainer.tsx","Components/Main/Locations/LocationInfo/LocationInfo.tsx","Components/Main/Locations/LocationInfo/LocationInfoContainer.tsx","Components/Main/Home/Home.tsx","Components/Main/Main.tsx","Components/Main/MainContainer.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","display","root","backgroundColor","indigo","color","lightBlue","Header","props","open","setOpen","classes","AppBar","position","className","clsx","Toolbar","IconButton","aria-label","onClick","edge","Typography","variant","noWrap","initialState","isLoading","lanError","appAC","type","appReducer","state","action","HeaderContainer","connect","app","media","height","Character","character","Grid","item","Card","CardActionArea","component","RouterLink","to","id","CardMedia","image","CardContent","gutterBottom","name","marginTop","marginBottom","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","currentPage","Pagination","onChange","event","page","showFirstButton","showLastButton","count","shape","RenderTextField","label","input","meta","touched","invalid","error","custom","TextField","placeholder","helperText","empty","str","test","RenderSelectField","children","FormControl","InputLabel","htmlFor","Select","native","inputProps","textField","selectField","button","textTransform","ReduxSearchCharactersForm","reduxForm","form","validate","values","errors","species","gender","status","_error","handleSubmit","submitting","pristine","reset","onSubmit","Field","size","value","Button","startIcon","disabled","SearchCharacters","setSearchingParams","setCurrentPage","setShowCharactersFrom","formValue","instance","axios","baseURL","charactersAPI","get","response","data","url","searchingParams","episodesAPI","episode","locationsAPI","dimension","characters","totalCharactersCount","totalPagesCount","currentCharacter","next","prev","showCharactersFrom","episodesOfCurrentCharacter","aroundId","prevId","nextId","charactersAC","charactersData","charactersReducer","results","info","pages","SearchCharactersContainer","circular","justifyContent","Preloader","CircularProgress","Characters","getCharacters","getCharactersFromSearch","currentEpisode","currentLocation","useState","panelIsOpen","setPanelIsOpen","useEffect","charactersElements","map","key","React","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","DialogTitle","DialogContent","DialogActions","autoFocus","Collapse","in","timeout","unmountOnExit","Badge","badgeContent","max","showZero","length","container","alignContent","justify","wrap","CharactersContainer","episodes","locations","dispatch","a","row","gridTemplateColumns","borderBottom","paddingLeft","RowCustom","leftContent","rightContent","card","borderRadius","boxShadow","cardContainer","paper","titleOfList","padding","textAlign","paddingTop","paddingBottom","characterInfoBlock","flexWrap","alignItems","characterInfo","flexGrow","ListItemLink","icon","primary","renderLink","itemProps","ref","ListItem","CharacterInfo","match","getCurrentCharacter","setCurrentSidebarMenuItem","getAroundId","setShowEpisodesFrom","setEpisodes","direction","setDirection","params","onEpisodeClick","episodesOfCurrentCharacterData","endIcon","origin","location","List","currentItem","sidebarAC","sidebarReducer","totalEpisodesCount","charactersOfCurrentEpisode","showEpisodesFrom","episodesAC","episodesData","episodesReducer","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","targetId","change","getState","positionTargetIdInCharacters","findIndex","el","prevCharactersData","nextCharactersData","withRouter","useMemo","forwardRef","Episode","field","ReduxSearchEpisodesForm","SearchEpisodes","SearchEpisodesContainer","Episodes","getEpisodes","getEpisodesFromSearch","episodesElements","EpisodesContainer","resultWithTotalPageCount","arrPages","i","push","pageNumber","resultsArray","console","log","characterItem","paddingRight","margin","buttons","avatar","EpisodeInfo","getCurrentEpisode","setCharacters","onCharacterClick","charactersOfCurrentEpisodeData","sort","b","toLocaleLowerCase","air_date","Avatar","alt","src","EpisodeInfoContainer","getCurrentEpisodeResponse","positionTargetIdInEpisodes","e","totalLocationsCount","charactersOfCurrentLocation","showLocationsFrom","currentLocationId","locationsAC","locationsData","locationsReducer","Location","setCurrentLocationId","ReduxSearchLocationsForm","SearchLocations","setShowLocationsFrom","SearchLocationsContainer","alphabetButton","minWidth","selected","Locations","getLocations","getLocationsFromSearch","selectedLetter","setSelectedLetter","locationsElements","alphabetCustom","forEach","includes","arrayOfButtons","LocationsContainer","LocationInfo","getCurrentLocation","charactersOfCurrentLocationData","LocationInfoContainer","currentLocationResponse","residents","positionTargetIdInLocations","flexDirection","img","Home","align","logo","drawerHeader","mixins","toolbar","content","contentShift","Main","exact","path","render","MainContainer","SidebarItem","ownIndex","SidebarItemContainer","sidebar","drawer","flexShrink","drawerPaper","title","Sidebar","useTheme","Drawer","anchor","Divider","SidebarContainer","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4bf5ca4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3de5ba72.png\";","import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        root: {\r\n            backgroundColor: indigo[900],\r\n            color: lightBlue[400]\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const {open, setOpen} = props;\r\n    const classes = useStyles();\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, open && classes.hide)}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Rick and Morty DB\r\n                </Typography>\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n//Rick and Morty DB\r\n","export const drawerWidth = 240;","import {GetActionsType, StateType} from \"./store\";\r\n\r\nconst initialState = {\r\n    open: false,\r\n    isLoading: false,\r\n    lanError: false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_OPEN': {\r\n            return {...state, open: action.open}\r\n        }\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setOpen: (open: boolean) => ({type: 'APP/SET_OPEN', open} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\n\r\n\r\nexport default appReducer;","import {connect} from \"react-redux\";\r\nimport Header from \"./Header\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType  => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst setOpen = appAC.setOpen;\r\n\r\n\r\nconst HeaderContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {setOpen})(Header);\r\n\r\nexport default HeaderContainer;\r\n\r\n//------------------------------------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setOpen: (open: boolean) => void\r\n}\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\ntype PropTypes = {\r\n    character: CharacterType\r\n    }\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n});\r\n\r\nconst Character: React.FC<PropTypes> = ({character}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`characters/${character.id}`}>\r\n                    <CardMedia className={classes.media}\r\n                               image={character.image}\r\n                    />\r\n                </CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\">\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(2),\r\n                marginBottom: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n","import {TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst RenderTextField = ({\r\n                             label,\r\n                             input,\r\n                             meta: {touched, invalid, error},\r\n                             ...custom\r\n                         }) => (\r\n\r\n    <TextField\r\n        label={label}\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n        {...input}\r\n        {...custom}\r\n    />\r\n);\r\n\r\nexport default RenderTextField;","type EmptyType = (str: string) => boolean\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport type SearchCharactersErrorsType = {\r\n    name?: string | undefined\r\n    species?: string | undefined\r\n    type?: string | undefined\r\n    status?: string | undefined\r\n    gender?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchCharactersValidateType = (values: SearchCharactersFormValuesType) => SearchCharactersErrorsType\r\n\r\nexport type SearchCharactersFormValuesType = {\r\n    name: string\r\n    species: string\r\n    type: string\r\n    status: '' | 'alive' | 'dead' | 'unknown'\r\n    gender: '' | 'female' | 'male' | 'genderless' | 'unknown'\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchEpisodesErrorsType = {\r\n    name?: string | undefined\r\n    episode?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchEpisodesValidateType = (values: SearchEpisodesFormValuesType) => SearchEpisodesErrorsType\r\n\r\nexport type SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchLocationsErrorsType = {\r\n    name?: string | undefined\r\n    type?: string | undefined\r\n    dimension?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchLocationsValidateType = (values: SearchLocationsFormValuesType) => SearchLocationsErrorsType\r\n\r\nexport type SearchLocationsFormValuesType = {\r\n    name: string\r\n    type: string\r\n    dimension: string\r\n}","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\n\r\n\r\nconst RenderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <InputLabel htmlFor=\"color-native-simple\">{label}</InputLabel>\r\n            <Select\r\n\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default RenderSelectField;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport {GetStringKeysType} from \"../../../../Types/Types\";\r\nimport {SearchCharactersPropsType} from \"./SearchCharactersContainer\";\r\nimport {\r\n    empty,\r\n    SearchCharactersErrorsType,\r\n    SearchCharactersFormValuesType,\r\n    SearchCharactersValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport RenderSelectField from \"../../../Common/renderSelectField\";\r\n\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        marginRight: 10,\r\n        marginBottom: 10\r\n    },\r\n    selectField: {\r\n        marginRight: 10,\r\n        marginTop: 10\r\n\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10,\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchCharactersForm: React.FC<InjectedFormProps<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType> & SearchCharactersFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Field name='status' component={RenderSelectField} label='Status' className={classes.selectField}>\r\n                    <option value={''}/>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={RenderSelectField} label='Gender' className={classes.selectField}>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={classes.button}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={classes.button}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n        </form>\r\n    )\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate: SearchCharactersValidateType = (values) => {\r\n    let errors = {} as SearchCharactersErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && (values.type !== '')) {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (\r\n        !values.gender\r\n        && !values.status\r\n        && (!values.name || empty(values.name))\r\n        && (!values.species || empty(values.species))\r\n        && (!values.type || empty(values.type))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchCharactersForm = reduxForm<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType>({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\nconst SearchCharacters: React.FC<SearchCharactersPropsType> = (props) => {\r\n    const {setSearchingParams, setCurrentPage, setShowCharactersFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchCharactersFormValuesType) => {\r\n\r\n        //console.log(formValue)\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFrom('search')\r\n\r\n    };\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\ntype SearchCharactersFormKeysType = GetStringKeysType<SearchCharactersFormValuesType>;\r\ntype SearchCharactersFormOwnPropsType = {}\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType, LocationsDataType, LocationType,\r\n    SearchingCharactersParamsType, SearchingEpisodesParamsType, SearchingLocationsParamsType,\r\n\r\n} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n        baseURL: 'https://rickandmortyapi.com/api/'\r\n    });\r\n\r\n    export const charactersAPI = {\r\n        async getCharacters(currentPage = 1) {\r\n            let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n            return response.data\r\n        },\r\n        async getCharacterByUrl(url: string) {\r\n            let response = await axios.get<CharacterType>(url);\r\n            return response.data\r\n        },\r\n        async getCurrentCharacter(id: number) {\r\n            let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingCharactersParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    },\r\n    async searchEpisodes(searchingParams: SearchingEpisodesParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.episode) str = `${str}&episode=${searchingParams.episode}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<EpisodesDataType>(`episode/?${str}`);\r\n        return response.data\r\n\r\n    }\r\n};\r\n\r\nexport const locationsAPI = {\r\n    async getLocations(currentPage = 1) {\r\n        let response = await instance.get<LocationsDataType>(`location/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentLocation(id: number) {\r\n        let response = await instance.get<LocationType>(`location/${id}`);\r\n        return response.data\r\n    },\r\n    async getLocationByUrl(url: string) {\r\n        let response = await axios.get<LocationType>(url);\r\n        return response.data\r\n    },\r\n    async searchLocations(searchingParams: SearchingLocationsParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.type) str = `${str}&episode=${searchingParams.type}`;\r\n        if (searchingParams.dimension) str = `${str}&episode=${searchingParams.dimension}`;\r\n        str = `${str}&page=${currentPage}`;\r\n        let response = await instance.get<LocationsDataType>(`location/?${str}`);\r\n        return response.data\r\n    }\r\n};","import {CharactersDataType, CharacterType, EpisodeType, SearchingCharactersParamsType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0,\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    showCharactersFrom: 'all' as 'all' | 'search' | 'episode' | 'location',\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {...state, searchingParams: action.searchingParams}\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM': {\r\n            return {...state, showCharactersFrom: action.showCharactersFrom}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType | null) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'CHARACTERS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM', showCharactersFrom\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType | AppActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.getCharacters(currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n        dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n        // получение информации о эпизодах, относящихся к текущему характеру:\r\n        // в currentCharacter содержится только массив ссылок на эпизоды\r\n        const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingCharactersParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        const charactersData = {} as CharactersDataType;\r\n        charactersData.results = []\r\n        charactersData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(charactersAC.setCharacters(charactersData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId = null, nextId = null;\r\n        const currentPage = getState().characters.currentPage;\r\n        const totalCharactersCount = getState().characters.totalCharactersCount;\r\n        const characters = getState().characters.characters;\r\n        const totalPagesCount = getState().characters.totalPagesCount;\r\n        const searchingParams = getState().characters.searchingParams;\r\n        const showCharactersFrom = getState().characters.showCharactersFrom;\r\n        // позиция id, на который переходим, целевого, в массиве characters (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInCharacters = getState().characters.characters.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА //////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'all') {\r\n            //console.log('ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА')\r\n            if (targetId > 1) {\r\n                prevId = targetId - 1;\r\n            } else {\r\n                prevId = null;\r\n            }\r\n            if (targetId < totalCharactersCount) {\r\n                nextId = targetId + 1;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n            // если целевой ид не на текущей странице и предыдущая страница существует\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ПОИСКА /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'search') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            prevId = null\r\n            // если целевой ид на текущей станице и не первый - prevId = characters[positionTargetIdInCharacters - 1]\r\n            if (positionTargetIdInCharacters > 0) {\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            }\r\n            // если целевой ид на текущей станице и первый и предыдущая страница существует - prevId - последний на предыдущей странице\r\n            if (positionTargetIdInCharacters === 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[19].id;\r\n            }\r\n            // если целевой ид не на текущей странице, предыдущая страница существует - prevId - предпоследний на предыдущей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[18].id;\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            nextId = null;\r\n            // целевой ид на текущий странице, но не последний - nextId = characters[positionCurrentIdInCharacters + 1]\r\n            if (positionTargetIdInCharacters > -1 && positionTargetIdInCharacters < characters.length - 1) { //целевой ид на текущий странице, но не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            }\r\n            // целевой ид на текущий странице и последний, следующая страница существует - nextId - первый на следующей странице\r\n            if (positionTargetIdInCharacters === characters.length - 1 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                nextId = nextCharactersData.results[0].id; // первый на следующей странице\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1 - nextId - второй на следующей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    nextId = nextCharactersData.results[1].id; // второй на следующей странице\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ЭПИЗОДА ИЛИ ИЗ ЛОКАЦИИ /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'episode' || showCharactersFrom === 'location') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters > 0) {// если целевой ид не первый\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            } else {\r\n                prevId = null\r\n            }\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters < characters.length - 1) { //целевой ид не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n        }\r\n        dispatch(charactersAC.setAroundId(prevId, nextId));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default charactersReducer;","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingCharactersParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setCurrentPage, setShowCharactersFrom})(SearchCharacters);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n}\r\n\r\nexport type SearchCharactersPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchCharactersContainer;\r\n","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nconst Preloader: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circular}>\r\n            <CircularProgress size={100} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport {\r\n    Badge,\r\n    Collapse,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharactersPropsType} from \"./CharactersContainer\";\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n});\r\n\r\nconst Characters: React.FC<CharactersPropsType> = (props) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage,\r\n        getCharacters, setCurrentPage, totalCharactersCount,\r\n        getCharactersFromSearch, searchingParams, isLoading,\r\n        lanError, setShowCharactersFrom, showCharactersFrom, currentEpisode,\r\n        currentLocation\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (showCharactersFrom === 'all') {\r\n            getCharacters(currentPage);\r\n        }\r\n        if (showCharactersFrom === 'search') {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFrom]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowCharactersFrom('all')\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            setOpen(true)\r\n        }\r\n    }, [lanError])\r\n\r\n    const handleOk = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"xs\"\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={open}\r\n                >\r\n                    <DialogTitle id=\"confirmation-dialog-title\">Error</DialogTitle>\r\n                    <DialogContent>\r\n                        Some error occurred on the network\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={handleOk} color=\"primary\">\r\n                            Ok\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchCharactersContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchCharactersClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showCharactersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showCharactersFrom === 'episode' && <div className={classes.count}>\r\n                    {`List of the characters from episode: ${currentEpisode.episode} - ${currentEpisode.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'location' && <div className={classes.count}>\r\n                    {currentLocation && `List of the characters from location: ${currentLocation.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the characters from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total characters count: `}\r\n                    <Badge badgeContent={totalCharactersCount} color=\"primary\" max={99999} showZero>\r\n                        <PeopleIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                {!characters.length || showCharactersFrom === 'episode' || showCharactersFrom === 'location' ? null :\r\n                    <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                               onPaginatorItemClick={onPaginatorItemClick}\r\n                               currentPage={currentPage}\r\n                    />}\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <Preloader/>\r\n                : <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                    {charactersElements}\r\n                </Grid>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, EpisodeType, LocationType, SearchingCharactersParamsType} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    searchingParams: SearchingCharactersParamsType\r\n    isLoading: boolean\r\n    lanError: boolean\r\n    totalCharactersCount: number\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n    currentEpisode: EpisodeType\r\n    currentLocation: null | LocationType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingCharactersParamsType, currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    currentLocation: state.locations.currentLocation\r\n});\r\n\r\nexport type CharactersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCharacters, setCurrentPage, getCharactersFromSearch,\r\n        setShowCharactersFrom\r\n    })(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        borderBottom: '1px #ccc solid',\r\n        paddingLeft: 10,\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n\r\n});\r\n\r\nconst RowCustom: React.FC<RowCustomPropsTypes> = (props) => {\r\n    const classes = useStyles()\r\n    const {leftContent, rightContent} = props\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1'>{leftContent}</Typography>\r\n            <Typography variant='h6' color='primary'>{rightContent}</Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RowCustom;\r\n\r\ntype RowCustomPropsTypes = {\r\n    leftContent: string\r\n    rightContent: string\r\n}","import * as React from \"react\";\r\nimport {useEffect} from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card, CardContent,\r\n    CardMedia,\r\n    CircularProgress,\r\n    Grid, List, ListItem,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodesDataType, PathParamsType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport {CharactersInfoPropsType} from \"./CharacterInfoContainer\";\r\nimport RowCustom from \"../../../Common/RowCustom/RowCustom\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        textTransform: 'none',\r\n        marginBottom: 10\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10,\r\n        marginRight: 20\r\n    },\r\n    cardContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    episode: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    },\r\n    name: {\r\n        textAlign: 'center',\r\n        paddingTop: 5,\r\n        paddingBottom: 5\r\n    },\r\n    characterInfoBlock: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'flex-start'\r\n    },\r\n    characterInfo: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\ntype ListItemLinkPropsType = {\r\n    icon?: React.ReactElement\r\n    primary: string\r\n    to: string\r\n    onClick: () => void\r\n    children: any\r\n}\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = (props) => {\r\n    const classes = useStyles()\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.episode}>\r\n            <ListItem button component={renderLink} onClick={onClick}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='textPrimary' variant='subtitle1'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\n\r\ntype PropsType = CharactersInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, match, getCurrentCharacter, isLoading,\r\n        episodesOfCurrentCharacter, setCurrentSidebarMenuItem, getAroundId, aroundId,\r\n        lanError, showCharactersFrom, setShowCharactersFrom, setShowEpisodesFrom,\r\n        setEpisodes\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentCharacter(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    }\r\n\r\n    const onEpisodeClick = () => {\r\n        setCurrentSidebarMenuItem(3);\r\n        setShowEpisodesFrom('character');\r\n        // записать в episodes эпизоды из характера\r\n        if (episodesOfCurrentCharacter) {\r\n            const episodesOfCurrentCharacterData = {} as EpisodesDataType;\r\n            episodesOfCurrentCharacterData.results = episodesOfCurrentCharacter\r\n\r\n            episodesOfCurrentCharacterData.info = {\r\n                count: episodesOfCurrentCharacter.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setEpisodes(episodesOfCurrentCharacterData)\r\n        }\r\n    };\r\n\r\n    const onBackToAllCharacters = () => {\r\n        setShowCharactersFrom('all');\r\n    }\r\n\r\n    if (lanError) {\r\n        return <Redirect to=\"/characters\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between'>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous character\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllCharacters}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to all characters\r\n                </Button>\r\n\r\n                {(showCharactersFrom === 'search' || showCharactersFrom === 'episode' || showCharactersFrom === 'location') &&\r\n                <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to characters from {showCharactersFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next character\r\n                </Button>\r\n            </Grid>\r\n\r\n            {(isLoading || !currentCharacter || !episodesOfCurrentCharacter\r\n                || +match.params.id !== currentCharacter.id)\r\n                ? <Preloader/>\r\n                : <div>\r\n                    <div className={classes.characterInfoBlock}>\r\n                        <div className={classes.cardContainer}>\r\n                            <Card className={classes.card}>\r\n                                <CardMedia\r\n                                    className={classes.media}\r\n                                    image={currentCharacter.image}/>\r\n                                <Typography color='error' variant='h5' className={classes.name}>\r\n                                    {currentCharacter.name}\r\n                                </Typography>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className={classes.characterInfo}>\r\n                            <RowCustom leftContent='Gender:' rightContent={currentCharacter.gender}/>\r\n                            <RowCustom leftContent='Status:' rightContent={currentCharacter.status}/>\r\n                            <RowCustom leftContent='Species:' rightContent={currentCharacter.species}/>\r\n                            {currentCharacter.type &&\r\n                            <RowCustom leftContent='Subspecies:' rightContent={currentCharacter.type}/>}\r\n                            <RowCustom leftContent='Origin location:' rightContent={currentCharacter.origin.name}/>\r\n                            <RowCustom leftContent='Last known location endpoint:'\r\n                                       rightContent={currentCharacter.location.name}/>\r\n\r\n                            <div className={classes.titleOfList}>\r\n                                <Typography variant='h6' color='secondary' component='span'>\r\n                                    {'List of episodes in which this character appeared: '}\r\n                                </Typography>\r\n                                <Badge badgeContent={episodesOfCurrentCharacter.length} color=\"secondary\" max={99999}\r\n                                       showZero>\r\n                                    <MovieIcon/>\r\n                                </Badge>\r\n                            </div>\r\n\r\n                            <List>\r\n                                {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                    onClick={onEpisodeClick}\r\n                                    key={episode.id}\r\n                                    to={`/episodes/${episode.id}`}\r\n                                    primary={`${episode.episode} - ${episode.name}`}>\r\n                                </ListItemLink>)}\r\n                            </List>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;","import {GetActionsType} from \"./store\";\r\nimport {charactersAC} from \"./characters-reducer\";\r\n\r\nconst SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype CharactersActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: CharactersActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => ({type: SET_CURRENT_ITEM, currentItem} as const)\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType,\r\n    SearchingEpisodesParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {charactersAC} from \"./characters-reducer\";\r\n\r\nconst initialState = {\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>,\r\n    showEpisodesFrom: 'all' as 'all' | 'search' | 'character',\r\n    searchingParams: {\r\n        name: '', episode: ''\r\n    },\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'EPISODES/SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'EPISODES/SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        case 'EPISODES/SET_SHOW_EPISODES_FROM': {\r\n            return {...state, showEpisodesFrom: action.showEpisodesFrom}\r\n        }\r\n        case 'EPISODES/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'EPISODES/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType | AppActionsType>\r\n\r\nexport const episodesAC = {\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'EPISODES/SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({\r\n        type: 'EPISODES/SET_CURRENT_EPISODE',\r\n        currentEpisode\r\n    } as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const),\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => ({\r\n        type: 'EPISODES/SET_SHOW_EPISODES_FROM', showEpisodesFrom\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => ({\r\n        type: 'EPISODES/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'EPISODES/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись ВСЕХ эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getEpisodesFromSearch = (searchingParams: SearchingEpisodesParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        console.log(searchingParams)\r\n        const resultWithTotalPageCount = await episodesAPI.searchEpisodes(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ эпизодов\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n\r\n        const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.searchEpisodes(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as EpisodesDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<EpisodeType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(episodesAC.setEpisodes(data));\r\n    } catch (e) {\r\n        const episodesData = {} as EpisodesDataType;\r\n        episodesData.results = []\r\n        episodesData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(episodesAC.setEpisodes(episodesData));\r\n\r\n\r\n\r\n\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const episodes = getState().episodes.episodes;\r\n        // позиция id, на который переходим, целевого, в массиве episodes (т.е. на текущей странице)\r\n        const positionTargetIdInEpisodes = getState().episodes.episodes.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes > 0) {// если целевой ид не первый\r\n            prevId = episodes[positionTargetIdInEpisodes - 1].id\r\n        } else {\r\n            prevId = null\r\n        }\r\n        // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes < episodes.length - 1) { //целевой ид не последний\r\n            nextId = episodes[positionTargetIdInEpisodes + 1].id;\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(episodesAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default episodesReducer;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getAroundId, getCurrentCharacter} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodesDataType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    isLoading: boolean\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    lanError: boolean\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    getAroundId: (currentCharacterId: number, change: null | 'prev' | 'next') => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setEpisodes: (episodesData: EpisodesDataType) => void\r\n}\r\n\r\nexport type CharactersInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n// currentCharacterId,setCurrentCharacterId, setStartGettingAroundId, startGettingAroundId,idChange, idForSearch, setCurrentCharacter,\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    currentCharacter: state.characters.currentCharacter,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter,\r\n    aroundId: state.characters.aroundId,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n});\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setEpisodes = episodesAC.setEpisodes;\r\n\r\nconst CharacterInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    {},\r\n    StateType>(mapStateToProps,\r\n    {\r\n        getCurrentCharacter, setCurrentSidebarMenuItem, getAroundId,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setEpisodes\r\n    }), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import React from \"react\";\r\nimport {EpisodeType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\ntype PropsType = {\r\n    episode: EpisodeType\r\n}\r\n\r\nconst onClick = () => {\r\n\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Episode = (props: PropsType) => {\r\n    const classes = useStyles();\r\n    const {episode} = props;\r\n    return (\r\n        <ListItemLink\r\n            to={`/episodes/${episode.id}`}\r\n            primary={`${episode.episode} - ${episode.name}`}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Episode;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport {GetStringKeysType} from \"../../../../Types/Types\";\r\nimport {SearchEpisodesPropsType} from \"./SearchEpisodesContainer\";\r\nimport {\r\n    empty,\r\n    SearchEpisodesErrorsType,\r\n    SearchEpisodesValidateType\r\n} from \"../../../../Helpers/Validators\";\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchEpisodesForm: React.FC<InjectedFormProps<SearchEpisodesFormValuesType, SearchEpisodesFormOwnPropsType> & SearchEpisodesFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='episode' component={RenderTextField} label='Episode' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate: SearchEpisodesValidateType = (values) => {\r\n    let errors = {} as SearchEpisodesErrorsType;\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.episode) && values.episode !== '') {\r\n        errors.episode = 'episode field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) && (!values.episode || empty(values.episode))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchEpisodesForm = reduxForm<SearchEpisodesFormValuesType, SearchEpisodesFormOwnPropsType>({\r\n    form: 'searchEpisodes',\r\n    validate\r\n})(SearchEpisodesForm);\r\n\r\nconst SearchEpisodes: React.FC<SearchEpisodesPropsType> = (props) => {\r\n    const {setShowEpisodesFrom, setSearchingParams} = props;\r\n    const onSubmit = (formValue: SearchEpisodesFormValuesType) => {\r\n        setSearchingParams(formValue);\r\n        setShowEpisodesFrom('search');\r\n    }\r\n    return (\r\n        <ReduxSearchEpisodesForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchEpisodes;\r\n\r\ntype SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\ntype SearchEpisodesFormKeysType = GetStringKeysType<SearchEpisodesFormValuesType>;\r\ntype SearchEpisodesFormOwnPropsType = {}\r\n","import SearchEpisodes from \"./SearchEpisodes\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {SearchingEpisodesParamsType} from \"../../../../Types/Types\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setSearchingParams = episodesAC.setSearchingParams;\r\n\r\nconst SearchEpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setShowEpisodesFrom, setSearchingParams})(SearchEpisodes);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => void\r\n   }\r\n\r\nexport type SearchEpisodesPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchEpisodesContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episode from \"./Episode/Episode\";\r\nimport {Badge, CircularProgress, Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchEpisodesContainer from \"./SearchEpisodes/SearchEpisodesContainer\";\r\nimport {EpisodesPropsType} from \"./EpisodesContainer\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nconst Episodes: React.FC<EpisodesPropsType> = (props) => {\r\n    const {\r\n        episodes, showEpisodesFrom, setShowEpisodesFrom,\r\n        getEpisodes, searchingParams, getEpisodesFromSearch,\r\n        isLoading, totalEpisodesCount, currentCharacter\r\n    } = props;\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    let episodesElements = episodes.map(item => <Episode key={item.id} episode={item}/>);\r\n\r\n    const onSearchEpisodesClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowEpisodesFrom('all')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (showEpisodesFrom === 'all') {\r\n            getEpisodes();\r\n        }\r\n        if (showEpisodesFrom === 'search') {\r\n            getEpisodesFromSearch(searchingParams);\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.episode, showEpisodesFrom]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchEpisodesContainer/>\r\n                </Collapse>\r\n            </div>\r\n\r\n            <Button onClick={onSearchEpisodesClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n\r\n            <Button onClick={onShowAllClick}\r\n                    disabled={showEpisodesFrom === 'all'}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n\r\n            {showEpisodesFrom === 'search' && <div className={classes.count}>\r\n                {'List of the episodes from search'}\r\n            </div>}\r\n\r\n            {showEpisodesFrom === 'character' && <div className={classes.count}>\r\n                {currentCharacter && `List of the episodes in which this character have been seen: ${currentCharacter.name}`}\r\n            </div>}\r\n\r\n            <div className={classes.count}>\r\n                {`Total episodes count: `}\r\n                <Badge badgeContent={totalEpisodesCount} color=\"primary\" max={99999} showZero>\r\n                    <MovieIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {episodesElements}\r\n                </List>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Episodes;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {CharacterType, EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episodes from \"./Episodes\";\r\nimport {episodesAC, getEpisodes, getEpisodesFromSearch} from \"../../../store/episodes-reducer\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n    searchingParams: SearchingEpisodesParamsType\r\n    isLoading: boolean\r\n    totalEpisodesCount: number\r\n    currentCharacter: CharacterType | null | undefined\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    getEpisodes: () => void\r\n    getEpisodesFromSearch: (searchingParams: SearchingEpisodesParamsType) => void\r\n}\r\n\r\nexport type EpisodesPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    episodes: state.episodes.episodes,\r\n    totalPagesCount: state.episodes.totalPagesCount,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n    searchingParams: state.episodes.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    currentCharacter: state.characters.currentCharacter\r\n});\r\n\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodesContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    {}, StateType>(mapStateToProps,\r\n    {\r\n        setShowEpisodesFrom, getEpisodes,\r\n        getEpisodesFromSearch\r\n    })(Episodes);\r\n\r\nexport default EpisodesContainer;","import React, {useEffect} from \"react\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    CircularProgress, Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodeInfoPropsType} from \"./EpisodeInfoContainer\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\n\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});\r\n\r\ntype PropsType = EpisodeInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode,\r\n        setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n        setCharacters, getAroundId, setShowEpisodesFrom, aroundId, showEpisodesFrom\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentEpisode(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onBackToAllEpisodes = () => {\r\n        setShowEpisodesFrom('all');\r\n    }\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('episode'); // изменить источник Characters\r\n        // записать в characters характеры из эпизода\r\n        if (charactersOfCurrentEpisode) {\r\n            const charactersOfCurrentEpisodeData = {} as CharactersDataType;\r\n            charactersOfCurrentEpisodeData.results = charactersOfCurrentEpisode\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentEpisodeData.info = {\r\n                count: charactersOfCurrentEpisode.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setCharacters(charactersOfCurrentEpisodeData)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous episode\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllEpisodes}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to all episodes\r\n                </Button>\r\n\r\n                {(showEpisodesFrom === 'search' || showEpisodesFrom === 'character') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to episodes from {showEpisodesFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next episode\r\n                </Button>\r\n            </Grid>\r\n\r\n            {isLoading || !currentEpisode || !charactersOfCurrentEpisode || +match.params.id !== currentEpisode.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5'>\r\n                        {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                    </Typography>\r\n\r\n                    <Typography color='textSecondary' variant='h6'>\r\n                        The air date: {currentEpisode.air_date}\r\n                    </Typography>\r\n\r\n                    <Typography color='textPrimary' variant='h6'>\r\n                        {'List of characters who have been seen in the episode '}\r\n                        <Badge badgeContent={charactersOfCurrentEpisode.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </Typography>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentEpisode\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                      key={character.id}\r\n                                                      onClick={onCharacterClick}\r\n                                                      color={'default'}\r\n                                                      className={classes.characterItem}\r\n                                                      component={RouterLink}\r\n                                                      to={`/characters/${character.id}`}\r\n                                                      size='large'>\r\n                                    <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                    {character.name}\r\n                                </Button>\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {episodesAC, getAroundId, getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    //totalEpisodesCount: number\r\n    aroundId: {prevId: null | number, nextId: null | number}\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n    //totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    aroundId: state.episodes.aroundId,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n});\r\n\r\nexport type EpisodeInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodeInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setCharacters, getAroundId,\r\n        setShowEpisodesFrom}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    LocationsDataType,\r\n    LocationType,\r\n    SearchingLocationsParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {charactersAPI, locationsAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    locations: [] as Array<LocationType>,\r\n    totalLocationsCount: 0,\r\n    totalPagesCount: 0,\r\n    currentLocation: null as null | LocationType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentLocation: null as null | Array<CharacterType>,\r\n    showLocationsFrom: 'all' as 'all' | 'search',\r\n    searchingParams: {\r\n        name: '', type: '', dimension: ''\r\n    },\r\n    currentLocationId: null as null | number,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst locationsReducer = (state = initialState, action: LocationsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOCATIONS/SET_LOCATIONS': {\r\n            return {\r\n                ...state,\r\n                locations: action.locationsData.results,\r\n                totalLocationsCount: action.locationsData.info.count,\r\n                totalPagesCount: action.locationsData.info.pages,\r\n                next: action.locationsData.info.next,\r\n                prev: action.locationsData.info.prev\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION': {\r\n            return {...state, currentLocation: action.currentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION': {\r\n            return {...state, charactersOfCurrentLocation: action.charactersOfCurrentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_SHOW_LOCATIONS_FROM': {\r\n            return {...state, showLocationsFrom: action.showLocationsFrom}\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION_ID': {\r\n            return {...state, currentLocationId: action.currentLocationId}\r\n        }\r\n        case 'LOCATIONS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype LocationsActionsType = GetActionsType<typeof locationsAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, LocationsActionsType | AppActionsType>\r\n\r\nexport const locationsAC = {\r\n    setLocations: (locationsData: LocationsDataType) => ({type: 'LOCATIONS/SET_LOCATIONS', locationsData} as const),\r\n    setCurrentLocation: (currentLocation: LocationType | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION',\r\n        currentLocation\r\n    } as const),\r\n    setCharactersOfCurrentLocation: (charactersOfCurrentLocation: Array<CharacterType>) => ({\r\n        type: 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION',\r\n        charactersOfCurrentLocation\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => ({\r\n        type: 'LOCATIONS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => ({\r\n        type: 'LOCATIONS/SET_SHOW_LOCATIONS_FROM', showLocationsFrom\r\n    } as const),\r\n    setCurrentLocationId: (currentLocationId: number | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION_ID',\r\n        currentLocationId\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'LOCATIONS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\nexport const getLocations = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await locationsAPI.getLocations();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ локаций\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.getLocations(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as LocationsDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<LocationType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    // 3 - сортировка локаций по имени\r\n    resultsArray.sort((a, b) => {\r\n        if (a.name > b.name) return 1;\r\n        if (a.name < b.name) return -1;\r\n        return 0;\r\n    });\r\n    data.results = resultsArray;\r\n    // 4 - запись ВСЕХ локаций в store\r\n    dispatch(locationsAC.setLocations(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentLocation = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let currentLocationResponse = await locationsAPI.getCurrentLocation(id);\r\n    dispatch(locationsAC.setCurrentLocation(currentLocationResponse));\r\n    // получение информации о персонажах, относящихся к текущей локации:\r\n    // в currentLocation содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты LocationInfo\r\n    const arrayOfRequests = currentLocationResponse.residents.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(locationsAC.setCharactersOfCurrentLocation(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getLocationsFromSearch = (searchingParams: SearchingLocationsParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        const resultWithTotalPageCount = await locationsAPI.searchLocations(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ локаций\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n        const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.searchLocations(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as LocationsDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<LocationType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(locationsAC.setLocations(data));\r\n    } catch (e) {\r\n        const locationsData = {} as LocationsDataType;\r\n        locationsData.results = []\r\n        locationsData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(locationsAC.setLocations(locationsData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const locations = getState().locations.locations;\r\n        // позиция id, на который переходим, целевого, в массиве locations (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInLocations = getState().locations.locations.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInLocations > 0) { // если целевой ид не первый\r\n            prevId = locations[positionTargetIdInLocations - 1].id\r\n        } else {\r\n            prevId = null;\r\n        }\r\n        if (positionTargetIdInLocations < locations.length - 1) {// если целевой ид не последний\r\n            nextId = locations[positionTargetIdInLocations + 1].id\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(locationsAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default locationsReducer;","import React from \"react\";\r\nimport {LocationType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\ntype PropsType = {\r\n    location: LocationType\r\n    setCurrentLocationId: (id: number | null) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem onClick={onClick} button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Location: React.FC<PropsType> = (props) => {\r\n    const {location, setCurrentLocationId} = props;\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n        setCurrentLocationId(location.id)\r\n    };\r\n    return (\r\n        <ListItemLink\r\n            to={`/locations/${location.id}`}\r\n            onClick={onClick}\r\n            primary={location.name}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Location;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport {GetStringKeysType} from \"../../../../Types/Types\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport Select from \"@material-ui/core/Select/Select\";\r\nimport {\r\n    empty,\r\n    SearchLocationsErrorsType,\r\n    SearchLocationsFormValuesType,\r\n    SearchLocationsValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport {SearchLocationsPropsType} from \"./SearchLocationsContainer\";\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\ntype PropsType = {\r\n    input: any\r\n    label: string\r\n    meta: { touched: boolean, error: boolean }\r\n    children: any\r\n}\r\n\r\nconst RenderSelectField: React.FC<PropsType> = (props) => {\r\n    const {input, label, meta: {touched, error}, children, ...custom} = props;\r\n    return (\r\n        <FormControl>\r\n            <InputLabel htmlFor={label}>{label}</InputLabel>\r\n            <Select\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: label,\r\n                    id: label\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n};\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchLocationsForm: React.FC<InjectedFormProps<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType> & SearchLocationsFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='dimension' component={RenderTextField} label='Dimension' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate: SearchLocationsValidateType = (values) => {\r\n    let errors = {} as SearchLocationsErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (empty(values.dimension) && (values.dimension !== '')) {\r\n        errors.dimension = 'dimension field is empty'\r\n    }\r\n    if (\r\n        (!values.name || empty(values.name))\r\n        && (!values.type || empty(values.type))\r\n        && (!values.dimension || empty(values.dimension))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchLocationsForm = reduxForm<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType>({\r\n    form: 'searchLocations',\r\n    validate\r\n})(SearchLocationsForm);\r\n\r\nconst SearchLocations: React.FC<SearchLocationsPropsType> = (props) => {\r\n    const {setSearchingParams, setShowLocationsFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchLocationsFormValuesType) => {\r\n        setSearchingParams(formValue)\r\n        setShowLocationsFrom('search')\r\n    };\r\n    return (\r\n        <ReduxSearchLocationsForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchLocations;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\ntype SearchLocationsFormKeysType = GetStringKeysType<SearchLocationsFormValuesType>;\r\ntype SearchLocationsFormOwnPropsType = {}\r\n\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {locationsAC} from \"../../../../store/locations-reducer\";\r\nimport SearchLocations from \"./SearchLocations\";\r\nimport {SearchingLocationsParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = locationsAC.setSearchingParams;\r\n//const setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\n\r\nconst SearchLocationsContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setShowLocationsFrom})(SearchLocations);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => void\r\n    //setCurrentPage: (currentPage: number) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\nexport type SearchLocationsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchLocationsContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Badge, Breadcrumbs, ButtonGroup, CircularProgress, Collapse, IconButton, Link, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Location from './Location/Location'\r\nimport {LocationsPropsType} from \"./LocationsContainer\";\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport SearchLocationsContainer from \"./SearchLocations/SearchLocationsContainer\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    alphabetButton: {\r\n        minWidth: 30,\r\n        width: 30,\r\n        height: 30,\r\n        padding: 0,\r\n        borderRadius: 15,\r\n        textTransform: 'none'\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    selected: {\r\n        backgroundColor: '#ccc'\r\n    }\r\n});\r\n\r\nconst Locations: React.FC<LocationsPropsType> = (props) => {\r\n    const {\r\n        locations, getLocations, searchingParams, getLocationsFromSearch,\r\n        showLocationsFrom, setShowLocationsFrom, totalLocationsCount,\r\n        setCurrentLocationId, isLoading\r\n    } = props;\r\n\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n    const [selectedLetter, setSelectedLetter] = useState('All');\r\n\r\n    const classes = useStyles();\r\n\r\n    const locationsElements = locations.map(item => {\r\n        if (selectedLetter === 'All') return <Location key={item.id} location={item}\r\n                                                       setCurrentLocationId={setCurrentLocationId}/>\r\n        if (selectedLetter !== 'All' && item.name[0] === selectedLetter) {\r\n            return <Location key={item.id} location={item} setCurrentLocationId={setCurrentLocationId}/>\r\n        }\r\n    });\r\n\r\n    const alphabetCustom = [] as Array<string>;\r\n    locations.forEach(location => {\r\n        if (!alphabetCustom.includes(location.name[0])) {\r\n            alphabetCustom.push(location.name[0])\r\n        }\r\n    });\r\n    alphabetCustom.sort((a, b) => {\r\n        if (a > b) return 1;\r\n        if (a < b) return -1;\r\n        return 0;\r\n    });\r\n    alphabetCustom.push('All');\r\n\r\n    const arrayOfButtons = alphabetCustom.map(item => {\r\n        const onAlphabetButtonClick = () => {\r\n            setSelectedLetter(item);\r\n        };\r\n        const className = (item === selectedLetter)\r\n            ? `${classes.alphabetButton} ${classes.selected}`\r\n            : `${classes.alphabetButton}`\r\n        return <Button className={className}\r\n                       onClick={onAlphabetButtonClick}\r\n                       key={item}\r\n                       size='small'\r\n                       variant='outlined'>\r\n            {item}\r\n        </Button>\r\n    });\r\n\r\n    const onSearchClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowLocationsFrom('all');\r\n        setSelectedLetter('All');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (showLocationsFrom === 'all') {\r\n            getLocations();\r\n        }\r\n        if (showLocationsFrom === 'search') {\r\n            getLocationsFromSearch(searchingParams);\r\n            setSelectedLetter('All')\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.type, searchingParams.dimension, showLocationsFrom]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchLocationsContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showLocationsFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showLocationsFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the locations from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total locations count: `}\r\n                    <Badge badgeContent={totalLocationsCount} color=\"primary\" max={99999} showZero>\r\n                        <RoomIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                <div>\r\n                    {arrayOfButtons}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {locationsElements}\r\n                </List>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Locations;\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {LocationType, SearchingLocationsParamsType} from \"../../../Types/Types\";\r\nimport {getLocations, getLocationsFromSearch, locationsAC} from \"../../../store/locations-reducer\";\r\nimport Locations from \"./Locations\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\n\r\nexport type MapStatePropsType = {\r\n    locations: Array<LocationType>\r\n    totalPagesCount: number\r\n    searchingParams: SearchingLocationsParamsType\r\n    showLocationsFrom: 'all' | 'search'\r\n    totalLocationsCount: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCurrentLocationId = locationsAC.setCurrentLocationId;\r\n\r\nexport type MapDispatchPropsType = {\r\n    getLocations: () => void\r\n    getLocationsFromSearch: (searchingParams: SearchingLocationsParamsType) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    setCurrentLocationId: (currentLocationId: number | null) => void\r\n}\r\n\r\nexport type LocationsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    locations: state.locations.locations,\r\n    totalPagesCount: state.locations.totalPagesCount,\r\n    searchingParams: state.locations.searchingParams,\r\n    showLocationsFrom: state.locations.showLocationsFrom,\r\n    totalLocationsCount: state.locations.totalLocationsCount,\r\n    isLoading: state.app.isLoading\r\n});\r\n\r\nconst LocationsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {getLocations, getLocationsFromSearch, setShowLocationsFrom,\r\n    setCurrentLocationId})(Locations);\r\n\r\nexport default LocationsContainer;","import React, {useEffect} from \"react\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    CircularProgress, Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {LocationInfoPropsType} from \"./LocationInfoContainer\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport RowCustom from \"../../../Common/RowCustom/RowCustom\";\r\n\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    }\r\n});\r\n\r\ntype PropsType = LocationInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst LocationInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentLocation, currentLocation, charactersOfCurrentLocation,\r\n        setCurrentSidebarMenuItem, setShowLocationsFrom, getAroundId, aroundId,\r\n        showLocationsFrom, setCharacters, setShowCharactersFrom,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentLocation(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('location'); // изменить источник Characters\r\n\r\n        // записать в characters характеры из локации\r\n        if (charactersOfCurrentLocation) {\r\n            const charactersOfCurrentLocationData = {} as CharactersDataType;\r\n            charactersOfCurrentLocationData.results = charactersOfCurrentLocation\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentLocationData.info = {\r\n                count: charactersOfCurrentLocation.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setCharacters(charactersOfCurrentLocationData)\r\n        }\r\n\r\n    }\r\n\r\n    const onBackToAllLocations = () => {\r\n        setShowLocationsFrom('all');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading} //\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous location\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllLocations}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<RoomIcon/>}>\r\n                    Back to all locations\r\n                </Button>\r\n\r\n                {(showLocationsFrom === 'search') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to locations from search\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next location\r\n                </Button>\r\n            </Grid>\r\n\r\n            { isLoading || !currentLocation || !charactersOfCurrentLocation || +match.params.id !== currentLocation.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5' className={classes.titleOfList}>\r\n                        {currentLocation.name}\r\n                    </Typography>\r\n\r\n                    <RowCustom leftContent='The type of the location:' rightContent={currentLocation.type}/>\r\n                    <RowCustom leftContent='The dimension in which the location is located:' rightContent={currentLocation.dimension}/>\r\n\r\n                    <div className={classes.titleOfList}>\r\n                        <Typography variant='h6' color='secondary' component='span'>\r\n                        {'List of character who have been last seen in the location '}\r\n                        </Typography>\r\n                        <Badge badgeContent={charactersOfCurrentLocation.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentLocation\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                   key={character.id}\r\n                                                   onClick={onCharacterClick}\r\n                                                   color={'default'}\r\n                                                   className={classes.characterItem}\r\n                                                   component={RouterLink}\r\n                                                   to={`/characters/${character.id}`}\r\n                                                   size='large'>\r\n                                        <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                        {character.name}\r\n                                    </Button>\r\n\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LocationInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, LocationsDataType, LocationType} from \"../../../../Types/Types\";\r\nimport {getAroundId, getCurrentLocation, locationsAC} from \"../../../../store/locations-reducer\";\r\nimport LocationInfo from \"./LocationInfo\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentLocation: LocationType | null\r\n    charactersOfCurrentLocation: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    showLocationsFrom: 'all' | 'search'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentLocation: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nexport type LocationInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentLocation: state.locations.currentLocation,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentLocation: state.locations.charactersOfCurrentLocation,\r\n    aroundId: state.locations.aroundId,\r\n    showLocationsFrom: state.locations.showLocationsFrom\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\nconst LocationInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCurrentLocation, setCurrentSidebarMenuItem,\r\n        setShowLocationsFrom,\r\n        getAroundId, setCharacters, setShowCharactersFrom\r\n    }), withRouter)(LocationInfo);\r\n\r\nexport default LocationInfoContainer;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport logo from './../../../assets/logo.png'\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       alignItems: 'center'\r\n    },\r\n    img: {\r\n        maxWidth: 300,\r\n        width: '100%',\r\n        marginTop: 20\r\n    }\r\n}));\r\n\r\nconst Home: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography color='primary' variant=\"h6\" align='center'>\r\n                Welcome to Rick and Morty DB\r\n            </Typography>\r\n            <div>\r\n                <img className={classes.img} src={logo} alt=\"\"/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Route} from \"react-router-dom\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodesContainer from \"./Episodes/EpisodesContainer\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\nimport LocationsContainer from \"./Locations/LocationsContainer\";\r\nimport LocationInfoContainer from \"./Locations/LocationInfo/LocationInfoContainer\";\r\nimport {MainPropsType} from \"./MainContainer\";\r\nimport clsx from \"clsx\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\nimport Home from \"./Home/Home\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}));\r\n\r\nconst Main: React.FC<MainPropsType> = (props) => {\r\n    const {open} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={clsx(classes.content, {\r\n            [classes.contentShift]: open,\r\n        })}>\r\n            <div className={classes.drawerHeader}/>\r\n            <Route exact path='/' component={Home}/>\r\n            <Route exact path='/characters' component={CharactersContainer}/>\r\n            <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n            <Route exact path='/locations' component={LocationsContainer}/>\r\n            <Route path='/locations/:id' render={() => <LocationInfoContainer/>}/>\r\n            <Route exact path='/episodes' component={EpisodesContainer}/>\r\n            <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;","import {connect} from \"react-redux\";\r\nimport Main from \"./Main\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst MainContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {})(Main);\r\n\r\nexport default MainContainer;\r\n\r\n//--------------------------TYPES---------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type MainPropsType = MapStatePropsType & MapDispatchPropsType;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {SidebarItemPropsType} from \"./SidebarItemContainer\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n        color: indigo[500]\r\n    }\r\n}));\r\n\r\nconst SidebarItem: React.FC<SidebarItemPropsType> = (props) => {\r\n    const {to, primary, icon, currentItem, ownIndex, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setShowLocationsFrom} = props;\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n        setCurrentSidebarMenuItem(ownIndex);\r\n        if (ownIndex === 1) {\r\n            setShowCharactersFrom('all')\r\n        }\r\n        if (ownIndex === 2) {\r\n            setShowLocationsFrom('all')\r\n        }\r\n        if (ownIndex === 3) {\r\n            setShowEpisodesFrom('all')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon className={clsx(ownIndex === currentItem && classes.icon)}>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;","import {connect} from \"react-redux\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {sidebarAC} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\nimport {episodesAC} from \"../../../store/episodes-reducer\";\r\nimport {locationsAC} from \"../../../store/locations-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\nexport type SidebarItemPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {\r\n    setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n    setShowEpisodesFrom, setShowLocationsFrom\r\n})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {SidebarPropsType} from \"./SidebarContainer\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n\r\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\r\n    const {setOpen, open} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <SidebarItemContainer ownIndex={0} to={\"/\"} primary={'Home'} icon={<HomeIcon/>}/>\r\n                <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default Sidebar;","import {connect} from \"react-redux\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst setOpen = appAC.setOpen;\r\n\r\nconst SidebarContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {setOpen})(Sidebar);\r\n\r\nexport default SidebarContainer;\r\n\r\n//--------------------------------------------------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    setOpen: (open: boolean) => void\r\n}\r\nexport type SidebarPropsType =  MapStatePropsType & MapDispatchPropsType;","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport MainContainer from \"./Components/Main/MainContainer\";\nimport SidebarContainer from \"./Components/Sidebar/SidebarContainer\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      root: {\n        display: 'flex',\n      }\n    }),\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n      <div className={classes.root}>\n        <HeaderContainer/>\n        <SidebarContainer/>\n        <MainContainer/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport locationsReducer from \"./locations-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer,\r\n    app: appReducer,\r\n    locations: locationsReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}