{"version":3,"sources":["Components/Header/Header.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","store/sidebar-reducer.ts","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Episodes/Episode/Episode.tsx","Components/Common/RenderTextField/RenderTextField.jsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodes.jsx","DAL/api.ts","store/episodes-reducer.ts","Components/Main/Episodes/SearchEpisodes/SearchEpisodesContainer.tsx","Components/Main/Episodes/Episodes.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator/Paginator.tsx","Components/Common/RenderSelectField/RenderSelectField.jsx","Components/Main/Characters/SearchCharacters/SearchCharacters.jsx","store/characters-reducer.ts","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","Components/Main/Episodes/EpisodesContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","Components/Main/Main.jsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","appBar","zIndex","drawer","Header","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","SidebarItem","to","primary","icon","currentItem","ownIndex","setCurrentItem","ListItem","onClick","selected","button","component","RouterLink","color","initialState","type","sidebarReducer","state","action","SidebarItemContainer","connect","sidebar","width","flexShrink","drawerPaper","drawerContainer","overflow","Sidebar","Drawer","paper","List","Locations","paragraph","item","backgroundColor","ListItemLink","props","renderLink","React","useMemo","forwardRef","itemProps","ref","Episode","episode","id","name","RenderTextField","label","input","meta","touched","invalid","error","custom","TextField","placeholder","helperText","field","marginRight","marginBottom","textTransform","ReduxSearchEpisodesForm","reduxForm","form","validate","values","empty","str","test","errors","_error","handleSubmit","submitting","pristine","reset","onSubmit","Field","size","Button","startIcon","disabled","SearchEpisodes","setShowEpisodesFromSearch","setSearchingParams","setCurrentPage","formValue","console","log","instance","axios","create","baseURL","charactersAPI","currentPage","get","response","data","url","searchingParams","gender","status","species","episodesAPI","initialized","episodes","totalEpisodesCount","totalPagesCount","currentEpisode","next","prev","isLoading","charactersOfCurrentEpisode","showEpisodesFromSearch","searchError","episodesAC","episodesData","episodesReducer","results","info","count","pages","SearchEpisodesContainer","marginTop","Episodes","getEpisodes","getEpisodesFromSearch","useState","panelIsOpen","setPanelIsOpen","episodesElements","map","key","useEffect","Collapse","in","timeout","unmountOnExit","root","media","height","Character","character","setCurrentCharacterId","Grid","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","spacing","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","Pagination","onChange","event","page","showFirstButton","showLastButton","shape","RenderSelectField","children","FormControl","htmlFor","native","inputProps","ReduxSearchCharactersForm","value","SearchCharacters","setShowCharactersFromSearch","characters","totalCharactersCount","currentCharacter","currentCharacterId","showCharactersFromSearch","episodesOfCurrentCharacter","gettingIdIsStart","idChange","undefined","charactersAC","charactersData","charactersReducer","SearchCharactersContainer","Characters","getCharacters","getCharactersFromSearch","setSearchError","charactersElements","totalOutputCount","Badge","badgeContent","max","showZero","CircularProgress","container","alignContent","justify","wrap","CharactersContainer","dispatch","a","buttons","card","borderRadius","boxShadow","row","display","gridTemplateColumns","borderBottom","paddingLeft","RowCustom","leftContent","rightContent","CharacterInfo","match","getCurrentCharacter","setGettingIdIsStart","getNextOrPrevId","setLocaleCurrentCharacterId","onEpisodeClick","endIcon","origin","location","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","getState","withRouter","EpisodesContainer","resultWithTotalPageCount","arrPages","i","push","pageNumber","resultsArray","characterItem","padding","paddingRight","margin","avatar","EpisodeInfo","getCurrentEpisode","params","localeCurrentEpisodeId","setLocaleCurrentEpisodeId","toLocaleLowerCase","air_date","sort","b","Avatar","alt","src","EpisodeInfoContainer","getCurrentEpisodeResponse","content","flexGrow","Main","exact","path","render","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.38c474fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Rick and Morty DB\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\ntype PropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    currentItem: number\r\n    ownIndex: number\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\n\r\nconst SidebarItem: React.FC<PropsType> = ({to, primary, icon, currentItem, ownIndex, setCurrentItem}) => {\r\n    const onClick = () => {\r\n        setCurrentItem(ownIndex);\r\n    }\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon color='primary'>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;","const SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype setCurrentItemType = {\r\n    type: typeof SET_CURRENT_ITEM\r\n    currentItem: number\r\n}\r\n\r\nexport const setCurrentItem = (currentItem: number): setCurrentItemType => ({type: SET_CURRENT_ITEM, currentItem});\r\n\r\nexport default sidebarReducer;","import {connect} from \"react-redux\";\r\n\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {setCurrentItem} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {setCurrentItem})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React, {useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n}));\r\n\r\nconst Sidebar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <Toolbar/>\r\n\r\n            <div className={classes.drawerContainer}>\r\n\r\n                <List>\r\n                    <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n                </List>\r\n\r\n            </div>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\n\r\nconst Locations = () => {\r\n    return (\r\n        <Typography paragraph>\r\n            Locations\r\n        </Typography>\r\n    )\r\n};\r\n\r\nexport default Locations;","import React from \"react\";\r\nimport {EpisodeType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\ntype PropsType = {\r\n    episode: EpisodeType\r\n}\r\n\r\nconst onClick = () => {\r\n\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Episode = (props: PropsType) => {\r\n    const classes = useStyles();\r\n    const {episode} = props;\r\n    return (\r\n        <ListItemLink\r\n            to={`/episodes/${episode.id}`}\r\n            primary={`${episode.episode} - ${episode.name}`}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Episode;","import {TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst RenderTextField = ({\r\n                             label,\r\n                             input,\r\n                             meta: {touched, invalid, error},\r\n                             ...custom\r\n                         }) => (\r\n\r\n    <TextField\r\n        label={label}\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n        {...input}\r\n        {...custom}\r\n    />\r\n);\r\n\r\nexport default RenderTextField;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchEpisodesForm = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='episode' component={RenderTextField} label='Episode' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate = (values) => {\r\n    const empty = (str) => /^\\s+$/.test(str)\r\n    let errors = {};\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.episode) && values.episode !== '') {\r\n        errors.episode = 'episode field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) && (!values.episode || empty(values.episode))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchEpisodesForm = reduxForm({\r\n    form: 'searchEpisodes',\r\n    validate\r\n})(SearchEpisodesForm);\r\n\r\nconst SearchEpisodes = (props) => {\r\n    const {setShowEpisodesFromSearch, setSearchingParams, setCurrentPage} = props;\r\n    const onSubmit = (formValue) => {\r\n        // if (в форму введены валидные данный) {\r\n        // setSearchingParams(formValue)\r\n        // setShowCharactersFromSearch(true);\r\n        // }\r\n        console.log(formValue);\r\n        setSearchingParams(formValue);\r\n        setShowEpisodesFromSearch(true);\r\n    }\r\n    return (\r\n        <ReduxSearchEpisodesForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchEpisodes","import axios from \"axios\";\r\nimport {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType,\r\n    SearchingCharactersParamsType, SearchingEpisodesParamsType,\r\n\r\n} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rickandmortyapi.com/api/'\r\n});\r\n\r\nexport const charactersAPI = {\r\n    async getCharacters(currentPage = 1) {\r\n        let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCharacterByUrl(url: string) {\r\n        let response = await axios.get<CharacterType>(url);\r\n        return response.data\r\n    },\r\n    async getCurrentCharacter(id: number) {\r\n        let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingCharactersParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        console.log(response)\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    },\r\n    async searchEpisodes(searchingParams: SearchingEpisodesParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.episode) str = `${str}&episode=${searchingParams.episode}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<EpisodesDataType>(`episode/?${str}`);\r\n        console.log(str)\r\n        console.log(response.data)\r\n        return response.data\r\n\r\n    }\r\n};","import {\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType,\r\n    SearchingEpisodesParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {charactersAC} from \"./characters-reducer\";\r\n\r\nconst initialState = {\r\n    initialized: false, // нужен?\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>,\r\n    showEpisodesFromSearch: false,\r\n    searchingParams: {\r\n        name: '', episode: ''\r\n    },\r\n    searchError: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'EPISODES/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'EPISODES/SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'EPISODES/SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        case 'EPISODES/SET_SHOW_EPISODES_FROM_SEARCH': {\r\n            return {...state, showEpisodesFromSearch: action.showEpisodesFromSearch}\r\n        }\r\n        case 'EPISODES/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType>\r\n\r\nexport const episodesAC = {\r\n    setInitialized: () => ({type: 'EPISODES/SET_INITIALIZED'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'EPISODES/TOGGLE_LOADING', isLoading} as const),\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'EPISODES/SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({\r\n        type: 'EPISODES/SET_CURRENT_EPISODE',\r\n        currentEpisode\r\n    } as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const),\r\n    setShowEpisodesFromSearch: (showEpisodesFromSearch: boolean) => ({\r\n        type: 'EPISODES/SET_SHOW_EPISODES_FROM_SEARCH',\r\n        showEpisodesFromSearch\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => ({\r\n        type: 'EPISODES/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setSearchError: (searchError: boolean) => ({type: 'EPISODES/SET_SEARCH_ERROR', searchError} as const),\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(episodesAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись ВСЕХ эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(episodesAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(episodesAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(episodesAC.toggleLoading(false));\r\n};\r\n\r\nexport const getEpisodesFromSearch = (searchingParams: SearchingEpisodesParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(episodesAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        console.log(searchingParams)\r\n        const resultWithTotalPageCount = await episodesAPI.searchEpisodes(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ эпизодов\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n\r\n        const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.searchEpisodes(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as EpisodesDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<EpisodeType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(episodesAC.setSearchError(false))\r\n        dispatch(episodesAC.setEpisodes(data));\r\n    } catch (e) {\r\n        dispatch(episodesAC.setSearchError(true));\r\n    } finally {\r\n        dispatch(episodesAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default episodesReducer;","import SearchEpisodes from \"./SearchEpisodes\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {SearchingEpisodesParamsType} from \"../../../../Types/Types\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowEpisodesFromSearch = episodesAC.setShowEpisodesFromSearch;\r\nconst setSearchingParams = episodesAC.setSearchingParams;\r\n\r\nconst SearchEpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {setShowEpisodesFromSearch, setSearchingParams})(SearchEpisodes);\r\n\r\ntype MapStatePropsType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFromSearch: (showEpisodesFromSearch: boolean) => void\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => void\r\n   }\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nexport default SearchEpisodesContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episode from \"./Episode/Episode\";\r\nimport {Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchEpisodesContainer from \"./SearchEpisodes/SearchEpisodesContainer\";\r\n\r\ntype PropTypes = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    showEpisodesFromSearch: boolean\r\n    searchingParams: SearchingEpisodesParamsType\r\n    getEpisodes: () => void\r\n    setCurrentEpisode: (currentPage: number) => void\r\n    setShowEpisodesFromSearch: (showEpisodesFromSearch: boolean) => void\r\n    getEpisodesFromSearch: (searchingParams: SearchingEpisodesParamsType) => void\r\n\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\nconst Episodes: React.FC<PropTypes> = (props) => {\r\n    const {episodes, showEpisodesFromSearch, setShowEpisodesFromSearch,\r\n        getEpisodes, searchingParams, getEpisodesFromSearch} = props;\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n    const classes = useStyles();\r\n    let episodesElements = episodes.map(item => <Episode key={item.id} episode={item}/>);\r\n    const onSearchEpisodesClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n    const onShowAllClick = () => {\r\n        setShowEpisodesFromSearch(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!showEpisodesFromSearch) {\r\n            getEpisodes();\r\n        } else {\r\n            getEpisodesFromSearch(searchingParams);\r\n            console.log('test')\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.episode, showEpisodesFromSearch]);\r\n\r\n    return (\r\n        <>\r\n            <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchEpisodesContainer/>\r\n            </Collapse>\r\n            <Button onClick={onSearchEpisodesClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n            <Button onClick={onShowAllClick}\r\n                    disabled={!showEpisodesFromSearch}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n            <List>\r\n                {episodesElements}\r\n            </List>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Episodes;\r\n","import React from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\ntype PropTypes = {\r\n    character: CharacterType\r\n    setCurrentCharacterId: (currentCharacterId: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n});\r\n\r\nconst Character: React.FC<PropTypes> = ({character, setCurrentCharacterId}) => {\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n        setCurrentCharacterId(character.id);\r\n    }\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                                onClick={onClick}\r\n                                to={`characters/${character.id}`}>\r\n                    <CardMedia className={classes.media}\r\n                               image={character.image}\r\n                    />\r\n                </CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\">\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(2),\r\n                marginBottom: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n","import FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport Select from \"@material-ui/core/Select/Select\";\r\nimport React from \"react\";\r\n\r\nconst RenderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => (\r\n    <FormControl>\r\n        <InputLabel htmlFor={label}>{label}</InputLabel>\r\n        <Select\r\n            native\r\n            {...input}\r\n            {...custom}\r\n            inputProps={{\r\n                name: label,\r\n                id: label\r\n            }}\r\n        >\r\n            {children}\r\n        </Select>\r\n\r\n    </FormControl>\r\n);\r\n\r\nexport default RenderSelectField;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField/RenderTextField\";\r\nimport RenderSelectField from \"../../../Common/RenderSelectField/RenderSelectField\";\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchCharactersForm = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'/>\r\n            </div>\r\n            <div>\r\n                <Field name='status' className={classes.field} component={RenderSelectField} label='Status'>\r\n                    <option value={''}></option>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={RenderSelectField} label='Gender'>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate = (values) => {\r\n    const empty = (str) => /^\\s+$/.test(str)\r\n    let errors = {};\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) &&\r\n        !values.gender && !values.gender\r\n        && (!values.species || empty(values.species)) &&\r\n        (!values.type || empty(values.type))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    console.log(errors)\r\n    return errors\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchCharactersForm = reduxForm({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\nconst SearchCharacters = (props) => {\r\n    const {setShowCharactersFromSearch, setSearchingParams, setCurrentPage} = props;\r\n\r\n    const onSubmit = (formValue) => {\r\n        // if (в форму введены валидные данный) {\r\n        // setSearchingParams(formValue)\r\n        // setShowCharactersFromSearch(true);\r\n        // }\r\n        console.log(formValue)\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFromSearch(true);\r\n\r\n    };\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters","import {CharactersDataType, CharacterType, EpisodeType, SearchingCharactersParamsType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    initialized: false, // нужен?\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    currentCharacterId: null as null | number,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    showCharactersFromSearch: false,\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    searchError: false,\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>,\r\n    gettingIdIsStart: false, // запрос на получение следующего/предыдущего id начат\r\n    idChange: undefined as undefined | 'next' | 'prev'\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER_ID': {\r\n            return {...state, currentCharacterId: action.currentCharacterId}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM_SEARCH': {\r\n            return {...state, showCharactersFromSearch: action.showCharactersFromSearch}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_SEARCH_ERROR': {\r\n            return {\r\n                ...state, searchError: action.searchError\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {\r\n                ...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_GETTING_ID_START': {\r\n            return {\r\n                ...state, gettingIdIsStart: action.gettingIdIsStart, idChange: action.idChange\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setInitialized: () => ({type: 'SET_INITIALIZED'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'CHARACTERS/TOGGLE_LOADING', isLoading} as const),\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentCharacterId: (currentCharacterId: number) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER_ID',\r\n        currentCharacterId\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM_SEARCH',\r\n        showCharactersFromSearch\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setSearchError: (searchError: boolean) => ({type: 'CHARACTERS/SET_SEARCH_ERROR', searchError} as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const),\r\n    setGettingIdIsStart: (gettingIdIsStart: boolean, idChange?: 'next' | 'prev') => ({\r\n        type: 'CHARACTERS/SET_GETTING_ID_START', gettingIdIsStart, idChange\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    dispatch(charactersAC.toggleLoading(true));\r\n    let data = await charactersAPI.getCharacters(currentPage);\r\n    dispatch(charactersAC.setCharacters(data));\r\n    dispatch(charactersAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(charactersAC.toggleLoading(true));\r\n    let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n    dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n    // получение информации о эпизодах, относящихся к текущему характеру:\r\n    // в currentCharacter содержится только массив ссылок на эпизоды\r\n    const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n    dispatch(charactersAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingCharactersParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(charactersAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setSearchError(false))\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        dispatch(charactersAC.setSearchError(true));\r\n    } finally {\r\n        dispatch(charactersAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getNextOrPrevId = (currentCharacterId: number, idChange: undefined | 'next' | 'prev'): ThunkType => async (dispatch, getState) => {\r\n    //dispatch(charactersAC.toggleLoading(true));\r\n    // если характеры НЕ из поиска\r\n    if (!getState().characters.showCharactersFromSearch) {\r\n        if (idChange === 'prev') {\r\n            dispatch(charactersAC.setCurrentCharacterId(currentCharacterId - 1))\r\n        }\r\n        if (idChange === 'next') {\r\n            dispatch(charactersAC.setCurrentCharacterId(currentCharacterId + 1))\r\n        }\r\n    }\r\n    dispatch(charactersAC.setGettingIdIsStart(false))\r\n}\r\n\r\nexport default charactersReducer;","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingCharactersParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowCharactersFromSearch = charactersAC.setShowCharactersFromSearch;\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {setShowCharactersFromSearch, setSearchingParams, setCurrentPage})(SearchCharacters);\r\n\r\ntype MapStatePropsType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nexport default SearchCharactersContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CharacterType, SearchingCharactersParamsType} from \"../../../Types/Types\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport {Badge, CircularProgress, Collapse} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\ntype PropTypes = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    showCharactersFromSearch: boolean\r\n    searchingParams: SearchingCharactersParamsType\r\n    isLoading: boolean\r\n    searchError: boolean\r\n    totalCharactersCount: number\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingCharactersParamsType, currentPage: number) => void\r\n    setSearchError: (searchError: boolean) => void\r\n    setCurrentCharacterId: (currentCharacterId: number) => void\r\n}\r\n\r\nconst Characters: React.FC<PropTypes> = (props: PropTypes) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage, totalCharactersCount,\r\n        getCharacters, setCurrentPage, searchError,\r\n        showCharactersFromSearch, setShowCharactersFromSearch,\r\n        getCharactersFromSearch, searchingParams, isLoading, setSearchError,\r\n        setCurrentCharacterId} = props;\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!showCharactersFromSearch) {\r\n            getCharacters(currentPage);\r\n        } else {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFromSearch]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               setCurrentCharacterId={setCurrentCharacterId}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setSearchError(false)\r\n        setShowCharactersFromSearch(false)\r\n        setCurrentPage(1);\r\n    }\r\n\r\n    let totalOutputCount = searchError ? 0 : totalCharactersCount;\r\n\r\n    return (\r\n        <>\r\n            <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchCharactersContainer/>\r\n            </Collapse>\r\n            <Button onClick={onSearchCharactersClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n            <Button onClick={onShowAllClick}\r\n                    disabled={!showCharactersFromSearch}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n\r\n            <div className={classes.count}>\r\n                {`Total characters count: `}\r\n                <Badge badgeContent={totalOutputCount} color=\"primary\" max={99999} showZero>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {searchError ? null : <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                                             onPaginatorItemClick={onPaginatorItemClick}\r\n                                             currentPage={currentPage}\r\n            />}\r\n            {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                searchError ? null :\r\n                    <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                        {charactersElements}\r\n                    </Grid>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, SearchingCharactersParamsType} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    showCharactersFromSearch: boolean\r\n    searchingParams: SearchingCharactersParamsType\r\n    isLoading: boolean\r\n    searchError: boolean\r\n    totalCharactersCount: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingCharactersParamsType, currentPage: number) => void\r\n    setSearchError: (searchError: boolean) => void\r\n    setCurrentCharacterId: (currentCharacterId: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    showCharactersFromSearch: state.characters.showCharactersFromSearch,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.characters.isLoading,\r\n    searchError: state.characters.searchError,\r\n    totalCharactersCount: state.characters.totalCharactersCount\r\n    });\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFromSearch = charactersAC.setShowCharactersFromSearch;\r\nconst setSearchError = charactersAC.setSearchError;\r\nconst setCurrentCharacterId = charactersAC.setCurrentCharacterId;\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {getCharacters, setCurrentPage,\r\n    setShowCharactersFromSearch, getCharactersFromSearch,\r\n    setSearchError, setCurrentCharacterId})(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardMedia,\r\n    CircularProgress,\r\n    Grid, List, ListItem,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\n\r\nconst useStyles = makeStyles({\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        borderBottom: '1px #ccc solid',\r\n        paddingLeft: 10,\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n    episode: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    }\r\n\r\n});\r\n\r\nfunction ListItemLink(props: any) {\r\n    const classes = useStyles()\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.episode}>\r\n            <ListItem button component={renderLink} onClick={onClick}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='subtitle1'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\ntype PropsType = {\r\n    currentCharacter: CharacterType\r\n    totalCharactersCount: number\r\n    isLoading: boolean\r\n    currentCharacterId: number\r\n    match: any\r\n    episodesOfCurrentCharacter: Array<EpisodeType>\r\n    gettingIdIsStart: boolean\r\n    idChange: 'prev' | 'next' | undefined\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentCharacterId: (id: number) => void\r\n    setCurrentItem: (currentItem: number) => void\r\n    setGettingIdIsStart: (gettingIdIsStart: boolean, IdChange?: 'next' | 'prev') => void\r\n    getNextOrPrevId: (currentCharacterId: number, idChange: undefined | 'next' | 'prev') => void\r\n    }\r\n\r\ntype PropTypes = {\r\n    leftContent: string\r\n    rightContent: string\r\n}\r\n\r\nconst RowCustom: React.FC<PropTypes> = (props: PropTypes) => {\r\n    const classes = useStyles()\r\n    const {leftContent, rightContent} = props\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1'>{leftContent}</Typography>\r\n            <Typography variant='h6' color='primary'>{rightContent}</Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, totalCharactersCount, match, currentCharacterId,\r\n        getCurrentCharacter, isLoading, setCurrentCharacterId, episodesOfCurrentCharacter,\r\n        setCurrentItem, setGettingIdIsStart, gettingIdIsStart, idChange, getNextOrPrevId} = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    //let id = +match.params.id;\r\n    let id = currentCharacterId\r\n\r\n    const [localeCurrentCharacterId, setLocaleCurrentCharacterId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (gettingIdIsStart) {\r\n            // запустить санку с получением Id  с параметрами idChange и currentCharacterId\r\n            getNextOrPrevId(currentCharacterId, idChange)\r\n        }\r\n    }, [gettingIdIsStart])\r\n\r\n    useEffect(() => {\r\n        setLocaleCurrentCharacterId(id);\r\n        getCurrentCharacter(id);\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     //     if (localeCurrentCharacterId) {\r\n    //     //         getCurrentCharacter(localeCurrentCharacterId);\r\n    //     //     }\r\n    //     // }, [localeCurrentCharacterId]);\r\n\r\n    useEffect(() => {\r\n        if (currentCharacterId) {\r\n            getCurrentCharacter(currentCharacterId);\r\n        }\r\n    }, [currentCharacterId]);\r\n\r\n    const onClickPrev = () => {\r\n        //setLocaleCurrentCharacterId(localeCurrentCharacterId - 1);\r\n        setGettingIdIsStart(true, 'prev');\r\n    }\r\n\r\n    const onClickNext = () => {\r\n        //setLocaleCurrentCharacterId(localeCurrentCharacterId + 1);\r\n        setGettingIdIsStart(true, 'next');\r\n    }\r\n\r\n    //let idNext = id + 1;\r\n    //let idPrev = id - 1;\r\n\r\n    const onEpisodeClick = () => {\r\n        setCurrentItem(3);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentCharacter &&\r\n            <>\r\n                <div>{currentCharacterId}</div>\r\n                <Grid container justify='space-between' className={classes.buttons}>\r\n                    <Button\r\n                        onClick={onClickPrev}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters/${id - 1}`}\r\n                        disabled={(currentCharacter.id === 1) || isLoading} //\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<ArrowBackIcon/>}>\r\n                        Previous character\r\n                    </Button>\r\n\r\n                    <Button\r\n                        disabled={isLoading}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters`}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<PeopleIcon/>}>\r\n                        Back to characters\r\n                    </Button>\r\n\r\n                    <Button\r\n                        onClick={onClickNext}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters/${id + 1}`}\r\n                        disabled={(currentCharacter.id === totalCharactersCount) || isLoading}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        endIcon={<ArrowForwardIcon/>}>\r\n                        Next character\r\n                    </Button>\r\n                </Grid>\r\n\r\n                {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                    <div>\r\n                        <Card className={classes.card}>\r\n                            <CardMedia\r\n                                className={classes.media}\r\n                                image={currentCharacter.image}/>\r\n                        </Card>\r\n                        <RowCustom leftContent='Name:' rightContent={currentCharacter.name}/>\r\n                        <RowCustom leftContent='Gender:' rightContent={currentCharacter.gender}/>\r\n                        <RowCustom leftContent='Status:' rightContent={currentCharacter.status}/>\r\n                        <RowCustom leftContent='Species:' rightContent={currentCharacter.species}/>\r\n                        {currentCharacter.type &&\r\n                        <RowCustom leftContent='Subspecies:' rightContent={currentCharacter.type}/>}\r\n                        <RowCustom leftContent='Origin location:' rightContent={currentCharacter.origin.name}/>\r\n                        <RowCustom leftContent='Last known location endpoint:'\r\n                                   rightContent={currentCharacter.location.name}/>\r\n\r\n                        <Typography variant='h6' color='primary'>\r\n                            List of episodes in which this character appeared:\r\n                        </Typography>\r\n                        <List>\r\n                            {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                onClick={onEpisodeClick}\r\n                                key={episode.id}\r\n                                to={`/episodes/${episode.id}`}\r\n                                primary={`${episode.episode} - ${episode.name}`}>\r\n                            </ListItemLink>)}\r\n                        </List>\r\n                    </div>\r\n                }\r\n            </>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getCurrentCharacter, getNextOrPrevId} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {setCurrentItem} from \"../../../../store/sidebar-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    totalCharactersCount: number\r\n    isLoading: boolean\r\n    currentCharacterId: number | null\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n    gettingIdIsStart: boolean\r\n    idChange: 'prev' | 'next' | undefined\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentCharacterId: (id: number) => void\r\n    setCurrentItem: (currentItem: number) => void\r\n    setGettingIdIsStart: (gettingIdIsStart: boolean, idChange?: 'next' | 'prev') => void\r\n    getNextOrPrevId: (currentCharacterId: number, idChange: undefined | 'next' | 'prev') => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentCharacter: state.characters.currentCharacter,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    isLoading: state.characters.isLoading,\r\n    currentCharacterId: state.characters.currentCharacterId,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter,\r\n    gettingIdIsStart: state.characters.gettingIdIsStart,\r\n    idChange: state.characters.idChange\r\n});\r\n\r\nconst setCurrentCharacterId = charactersAC.setCurrentCharacterId;\r\nconst setGettingIdIsStart = charactersAC.setGettingIdIsStart\r\n\r\nconst CharacterInfoContainer = compose(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps,\r\n    {getCurrentCharacter, setCurrentCharacterId,\r\n        setGettingIdIsStart, setCurrentItem, getNextOrPrevId}), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episodes from \"./Episodes\";\r\nimport {episodesAC, getEpisodes, getEpisodesFromSearch} from \"../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    showEpisodesFromSearch: boolean\r\n    searchingParams: SearchingEpisodesParamsType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFromSearch: (showEpisodesFromSearch: boolean) => void\r\n    getEpisodes: () => void\r\n    getEpisodesFromSearch: (searchingParams: SearchingEpisodesParamsType) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    episodes: state.episodes.episodes,\r\n    totalPagesCount: state.episodes.totalPagesCount,\r\n    showEpisodesFromSearch: state.episodes.showEpisodesFromSearch,\r\n    searchingParams: state.episodes.searchingParams\r\n});\r\n\r\nconst setShowEpisodesFromSearch = episodesAC.setShowEpisodesFromSearch;\r\n\r\nconst EpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {setShowEpisodesFromSearch, getEpisodes, getEpisodesFromSearch})(Episodes);\r\n\r\nexport default EpisodesContainer;","import React, {useEffect, useState} from \"react\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Button,\r\n    CircularProgress, Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\n\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});\r\n\r\ntype PropsType = {\r\n    currentEpisode: EpisodeType\r\n    isLoading: boolean\r\n    totalEpisodesCount: number\r\n    charactersOfCurrentEpisode: Array<CharacterType>\r\n    match: any\r\n    setCurrentItem: (currentItem: number) => void\r\n    getCurrentEpisode: (id: number) => void\r\n}\r\n\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode,\r\n        totalEpisodesCount, setCurrentItem\r\n    } = props;\r\n    let id = +match.params.id;\r\n    const classes = useStyles();\r\n    const [localeCurrentEpisodeId, setLocaleCurrentEpisodeId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        getCurrentEpisode(id);\r\n        setLocaleCurrentEpisodeId(id);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (localeCurrentEpisodeId) {\r\n            getCurrentEpisode(localeCurrentEpisodeId);\r\n        }\r\n    }, [localeCurrentEpisodeId]);\r\n\r\n    const onClickPrev = () => {\r\n        setLocaleCurrentEpisodeId(localeCurrentEpisodeId - 1);\r\n    }\r\n\r\n    const onClickNext = () => {\r\n        setLocaleCurrentEpisodeId(localeCurrentEpisodeId + 1);\r\n    }\r\n\r\n    // let idNext = id + 1;\r\n    //     // let idPrev = id - 1;\r\n\r\n    const onClick = () => {\r\n        setCurrentItem(1);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {currentEpisode && charactersOfCurrentEpisode &&\r\n            <>\r\n                <Grid container justify='space-between' className={classes.buttons}>\r\n                    <Button\r\n                        onClick={onClickPrev}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/episodes/${id - 1}`}\r\n                        disabled={(currentEpisode.id === 1) || isLoading} //\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<ArrowBackIcon/>}>\r\n                        Previous episode\r\n                    </Button>\r\n\r\n                    <Button\r\n                        disabled={isLoading}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/episodes`}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<MovieIcon/>}>\r\n                        Back to episodes\r\n                    </Button>\r\n\r\n                    <Button\r\n                        onClick={onClickNext}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/episodes/${id + 1}`}\r\n                        disabled={(currentEpisode.id === totalEpisodesCount) || isLoading}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        endIcon={<ArrowForwardIcon/>}>\r\n                        Next episode\r\n                    </Button>\r\n                </Grid>\r\n\r\n                {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                    <>\r\n                        <Typography color='error' variant='h5'>\r\n                            {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                        </Typography>\r\n                        <Typography color='textSecondary' variant='h6'>\r\n                            The air date: {currentEpisode.air_date}\r\n                        </Typography>\r\n                        <Typography color='textPrimary' variant='h6'>\r\n                            List of characters who have been seen in the episode:\r\n                        </Typography>\r\n\r\n                        {isLoading ? <CircularProgress/> : <div>\r\n                            {charactersOfCurrentEpisode\r\n                                .sort((a: CharacterType, b: CharacterType) => {\r\n                                    if (a.name > b.name) {return 1}\r\n                                    if (a.name < b.name) {return -1}\r\n                                    return 0\r\n                                })\r\n                                .map(character => <Button variant='contained'\r\n                                                                                 key={character.id}\r\n                                                                                 onClick={onClick}\r\n                                                                                 color={'default'}\r\n                                                                                 className={classes.characterItem}\r\n                                                                                 component={RouterLink}\r\n                                                                                 to={`/characters/${character.id}`}\r\n                                                                                 size='large'>\r\n                                    <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                    {character.name}\r\n                                </Button>\r\n                            )}\r\n                        </div>}\r\n                    </>}\r\n            </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {setCurrentItem} from \"../../../../store/sidebar-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    totalEpisodesCount: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.episodes.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n    totalEpisodesCount: state.episodes.totalEpisodesCount\r\n});\r\n\r\nconst EpisodeInfoContainer = compose(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentItem}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {Route} from \"react-router-dom\";\r\nimport Locations from \"./Locations/Locations\";\r\nimport Episodes from \"./Episodes/Episodes\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodesContainer from \"./Episodes/EpisodesContainer\";\r\nimport EpisodeInfo from \"./Episodes/EpisodeInfo/EpisodeInfo\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst Main = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n            <Toolbar/>\r\n            <Route exact path='/characters' component={CharactersContainer}/>\r\n            <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n            <Route path='/locations' component={Locations}/>\r\n            <Route exact path='/episodes' component={EpisodesContainer}/>\r\n            <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      root: {\n        display: 'flex',\n      }\n    }),\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n      <div className={classes.root}>\n        <Header/>\n        <Sidebar/>\n        <Main/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}