{"version":3,"sources":["Components/Main/Episodes/Episode/Episode.tsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodes.tsx","Components/Main/Episodes/SearchEpisodes/SearchEpisodesContainer.tsx","Components/Main/Episodes/Episodes.tsx","Components/Main/Episodes/EpisodesContainer.tsx"],"names":["ListItemLink","props","classes","useStyles","icon","primary","to","renderLink","React","useMemo","forwardRef","itemProps","ref","className","item","ListItem","button","component","ListItemIcon","Typography","color","variant","ListItemText","Episode","episode","id","name","makeStyles","backgroundColor","ReduxSearchEpisodesForm","reduxForm","form","validate","values","errors","empty","_error","handleSubmit","submitting","pristine","reset","error","onSubmit","Field","RenderTextField","label","size","field","Button","type","startIcon","disabled","onClick","SearchEpisodes","setShowEpisodesFrom","setSearchingParams","formValue","marginRight","marginBottom","textTransform","episodesAC","SearchEpisodesContainer","connect","state","Episodes","episodes","showEpisodesFrom","getEpisodes","searchingParams","getEpisodesFromSearch","isLoading","totalEpisodesCount","currentCharacter","useState","panelIsOpen","setPanelIsOpen","episodesElements","map","key","useEffect","Collapse","in","timeout","unmountOnExit","count","Badge","badgeContent","max","showZero","circular","CircularProgress","List","marginTop","display","justifyContent","EpisodesContainer","totalPagesCount","app","characters"],"mappings":"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","file":"static/js/3.b948d423.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {EpisodeType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nfunction ListItemLink(props: ListItemLinkPropsType) {\r\n    const classes = useStyles();\r\n    const {icon, primary, to} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Episode = (props: PropsType) => {\r\n    const {episode} = props;\r\n    return (\r\n        <ListItemLink\r\n            to={`/episodes/${episode.id}`}\r\n            primary={`${episode.episode} - ${episode.name}`}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Episode;\r\n\r\n//====================== TYPE =========================\r\ntype ListItemLinkPropsType = {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n    children: any\r\n}\r\ntype PropsType = {\r\n    episode: EpisodeType\r\n}\r\n\r\n//===================== STYLES ========================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField\";\r\nimport {GetStringKeysType} from \"../../../../Types/Types\";\r\nimport {SearchEpisodesPropsType} from \"./SearchEpisodesContainer\";\r\nimport {\r\n    empty,\r\n    SearchEpisodesErrorsType,\r\n    SearchEpisodesValidateType\r\n} from \"../../../../Helpers/Validators\";\r\n\r\n//============================== FORM =========================================\r\nconst SearchEpisodesForm: React.FC<InjectedFormProps<SearchEpisodesFormValuesType, SearchEpisodesFormOwnPropsType> & SearchEpisodesFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='episode' component={RenderTextField} label='Episode' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n//============================= VALIDATE ========================\r\nconst validate: SearchEpisodesValidateType = (values) => {\r\n    let errors = {} as SearchEpisodesErrorsType;\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.episode) && values.episode !== '') {\r\n        errors.episode = 'episode field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) && (!values.episode || empty(values.episode))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n//=============================== REDUX-FORM =====================================\r\nconst ReduxSearchEpisodesForm = reduxForm<SearchEpisodesFormValuesType, SearchEpisodesFormOwnPropsType>({\r\n    form: 'searchEpisodes',\r\n    validate\r\n})(SearchEpisodesForm);\r\n\r\n//================================= COMPONENT ==================================\r\nconst SearchEpisodes: React.FC<SearchEpisodesPropsType> = (props) => {\r\n    const {setShowEpisodesFrom, setSearchingParams} = props;\r\n    const onSubmit = (formValue: SearchEpisodesFormValuesType) => {\r\n        setSearchingParams(formValue);\r\n        setShowEpisodesFrom('search');\r\n    };\r\n    return (\r\n        <ReduxSearchEpisodesForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchEpisodes;\r\n\r\n//======================== TYPES =========================\r\ntype SearchEpisodesFormOwnPropsType = {}\r\ntype SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\n//========================= STYLES =======================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n","import SearchEpisodes from \"./SearchEpisodes\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {SearchingEpisodesParamsType} from \"../../../../Types/Types\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setSearchingParams = episodesAC.setSearchingParams;\r\n\r\nconst SearchEpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setShowEpisodesFrom, setSearchingParams})(SearchEpisodes);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => void\r\n   }\r\n\r\nexport type SearchEpisodesPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchEpisodesContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Episode from \"./Episode/Episode\";\r\nimport {Badge, CircularProgress, Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchEpisodesContainer from \"./SearchEpisodes/SearchEpisodesContainer\";\r\nimport {EpisodesPropsType} from \"./EpisodesContainer\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\n\r\nconst Episodes: React.FC<EpisodesPropsType> = (props) => {\r\n    const {\r\n        episodes, showEpisodesFrom, setShowEpisodesFrom,\r\n        getEpisodes, searchingParams, getEpisodesFromSearch,\r\n        isLoading, totalEpisodesCount, currentCharacter\r\n    } = props;\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    let episodesElements = episodes.map(item => <Episode key={item.id} episode={item}/>);\r\n\r\n    const onSearchEpisodesClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowEpisodesFrom('all')\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showEpisodesFrom === 'all') {\r\n            getEpisodes();\r\n        }\r\n        if (showEpisodesFrom === 'search') {\r\n            getEpisodesFromSearch(searchingParams);\r\n        }\r\n    }, [searchingParams.name, searchingParams.episode, showEpisodesFrom]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchEpisodesContainer/>\r\n                </Collapse>\r\n            </div>\r\n\r\n            <Button onClick={onSearchEpisodesClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n\r\n            <Button onClick={onShowAllClick}\r\n                    disabled={showEpisodesFrom === 'all'}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n\r\n            {showEpisodesFrom === 'search' && <div className={classes.count}>\r\n                {'List of the episodes from search'}\r\n            </div>}\r\n\r\n            {showEpisodesFrom === 'character' && <div className={classes.count}>\r\n                {currentCharacter && `List of the episodes in which this character have been seen: ${currentCharacter.name}`}\r\n            </div>}\r\n\r\n            <div className={classes.count}>\r\n                {`Total episodes count: `}\r\n                <Badge badgeContent={totalEpisodesCount} color=\"primary\" max={99999} showZero>\r\n                    <MovieIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {episodesElements}\r\n                </List>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Episodes;\r\n\r\n//============================= STYLES ======================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, EpisodeType, SearchingEpisodesParamsType} from \"../../../Types/Types\";\r\nimport Episodes from \"./Episodes\";\r\nimport {episodesAC, getEpisodes, getEpisodesFromSearch} from \"../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n    searchingParams: SearchingEpisodesParamsType\r\n    isLoading: boolean\r\n    totalEpisodesCount: number\r\n    currentCharacter: CharacterType | null | undefined\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    getEpisodes: () => void\r\n    getEpisodesFromSearch: (searchingParams: SearchingEpisodesParamsType) => void\r\n}\r\n\r\nexport type EpisodesPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    episodes: state.episodes.episodes,\r\n    totalPagesCount: state.episodes.totalPagesCount,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n    searchingParams: state.episodes.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    currentCharacter: state.characters.currentCharacter\r\n});\r\n\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodesContainer = connect<MapStatePropsType, MapDispatchPropsType,\r\n    {}, StateType>(mapStateToProps,\r\n    {\r\n        setShowEpisodesFrom, getEpisodes,\r\n        getEpisodesFromSearch\r\n    })(Episodes);\r\n\r\nexport default EpisodesContainer;"],"sourceRoot":""}