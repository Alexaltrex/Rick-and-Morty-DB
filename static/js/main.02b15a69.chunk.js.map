{"version":3,"sources":["store/app-reducer.ts","DAL/api.ts","assets/logo.png","Helpers/Validators.ts","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Header/Header.tsx","CONST/const.ts","Components/Header/HeaderContainer.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator.tsx","Components/Common/renderSelectField.jsx","Components/Main/Characters/SearchCharacters/SearchCharacters.tsx","store/characters-reducer.ts","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Common/Preloader.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Common/RowCustom.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","store/sidebar-reducer.ts","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","store/locations-reducer.ts","Components/Main/Locations/Location/Location.tsx","Components/Main/Locations/SearchLocations/SearchLocations.tsx","Components/Main/Locations/SearchLocations/SearchLocationsContainer.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Locations/LocationsContainer.tsx","Components/Main/Locations/LocationInfo/LocationInfo.tsx","Components/Main/Locations/LocationInfo/LocationInfoContainer.tsx","Components/Main/Home/Home.tsx","Components/Common/PageNotFound.tsx","Components/Main/Main.tsx","Components/Main/MainContainer.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","Components/Sidebar/Sidebar.tsx","Components/Sidebar/SidebarContainer.tsx","Components/Common/ErrorBoundary.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx","store/episodes-reducer.ts","Components/Common/RenderTextField.tsx"],"names":["initialState","open","isLoading","lanError","appAC","setOpen","type","toggleLoading","setLanError","appReducer","state","action","instance","axios","create","baseURL","charactersAPI","getCharacters","currentPage","get","response","data","getCharacterByUrl","url","getCurrentCharacter","id","searchCharacters","searchingParams","str","name","gender","status","species","episodesAPI","getEpisodes","getCurrentEpisode","getEpisodesByUrl","searchEpisodes","episode","locationsAPI","getLocations","getCurrentLocation","getLocationByUrl","searchLocations","dimension","module","exports","empty","test","OwnIndexEnum","Header","props","classes","useStyles","AppBar","position","className","clsx","appBar","appBarShift","Toolbar","IconButton","color","aria-label","onClick","edge","menuButton","hide","Link","component","RouterLink","to","underline","link","Typography","variant","noWrap","makeStyles","theme","createStyles","transition","transitions","easing","sharp","duration","leavingScreen","width","marginLeft","easeOut","enteringScreen","marginRight","spacing","display","root","backgroundColor","indigo","lightBlue","HeaderContainer","connect","app","Character","character","Grid","item","Card","elevation","CardActionArea","CardMedia","media","image","CardContent","cardContent","gutterBottom","align","height","padding","paddingBottom","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","Pagination","onChange","event","page","showFirstButton","showLastButton","count","size","shape","marginTop","marginBottom","renderSelectField","input","label","meta","touched","error","children","custom","FormControl","InputLabel","htmlFor","Select","native","inputProps","ReduxSearchCharactersForm","reduxForm","form","validate","values","errors","_error","handleSubmit","submitting","pristine","reset","onSubmit","Field","RenderTextField","textField","selectField","value","Button","startIcon","disabled","button","SearchCharacters","setSearchingParams","setCurrentPage","setShowCharactersFrom","formValue","textTransform","characters","totalCharactersCount","totalPagesCount","currentCharacter","next","prev","showCharactersFrom","episodesOfCurrentCharacter","aroundId","prevId","nextId","charactersAC","charactersData","charactersReducer","results","info","pages","SearchCharactersContainer","circular","justifyContent","Preloader","CircularProgress","Characters","getCharactersFromSearch","currentEpisode","currentLocation","useState","panelIsOpen","setPanelIsOpen","useEffect","charactersElements","map","key","React","Dialog","disableBackdropClick","disableEscapeKeyDown","maxWidth","aria-labelledby","DialogTitle","DialogContent","DialogActions","autoFocus","Collapse","in","timeout","unmountOnExit","Badge","badgeContent","max","showZero","length","container","alignContent","justify","wrap","CharactersContainer","episodes","locations","dispatch","a","row","gridTemplateColumns","borderBottom","paddingLeft","RowCustom","leftContent","rightContent","ListItemLink","icon","primary","renderLink","useMemo","forwardRef","itemProps","ref","ListItem","CharacterInfo","match","setCurrentSidebarMenuItem","getAroundId","setShowEpisodesFrom","setEpisodes","direction","setDirection","params","onEpisodeClick","episodesOfCurrentCharacterData","endIcon","characterInfoBlock","cardContainer","card","characterInfo","origin","location","titleOfList","List","borderRadius","boxShadow","paper","textAlign","paddingTop","flexWrap","alignItems","flexGrow","currentItem","sidebarAC","sidebarReducer","episodesAC","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","targetId","change","getState","positionTargetIdInCharacters","findIndex","el","prevCharactersData","nextCharactersData","withRouter","EpisodeInfo","charactersOfCurrentEpisode","setCharacters","showEpisodesFrom","onCharacterClick","charactersOfCurrentEpisodeData","sort","b","buttons","toLocaleLowerCase","air_date","characterItem","Avatar","alt","src","avatar","paddingRight","margin","EpisodeInfoContainer","totalLocationsCount","charactersOfCurrentLocation","showLocationsFrom","currentLocationId","locationsAC","locationsData","locationsReducer","Location","setCurrentLocationId","ReduxSearchLocationsForm","field","SearchLocations","setShowLocationsFrom","SearchLocationsContainer","Locations","getLocationsFromSearch","selectedLetter","setSelectedLetter","locationsElements","alphabetCustom","forEach","includes","push","arrayOfButtons","alphabetButton","selected","minWidth","LocationsContainer","resultWithTotalPageCount","arrPages","i","pageNumber","resultsArray","LocationInfo","charactersOfCurrentLocationData","LocationInfoContainer","currentLocationResponse","residents","positionTargetIdInLocations","e","flexDirection","img","Home","logo","PageNotFound","EpisodesContainer","lazy","Main","content","contentShift","drawerHeader","fallback","exact","path","render","mixins","toolbar","MainContainer","SidebarItem","ownIndex","SidebarItemContainer","sidebar","Sidebar","useTheme","Drawer","drawer","anchor","drawerPaper","Divider","flexShrink","title","SidebarContainer","ErrorBoundary","errorInfo","this","setState","style","whiteSpace","toString","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","episodesReducer","middleware","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","totalEpisodesCount","episodesData","setCurrentEpisode","setCharactersOfCurrentEpisode","setAroundId","getCurrentEpisodeResponse","getEpisodesFromSearch","log","positionTargetIdInEpisodes","invalid","placeholder","helperText"],"mappings":"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","file":"static/js/main.02b15a69.chunk.js","sourcesContent":["import {GetActionsType} from \"./store\";\r\n\r\nconst initialState = {\r\n    open: false, // бокавая панель открыта\r\n    isLoading: false, // загрузка происходит?\r\n    lanError: false, // ошибка сети\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type AppActionsType = GetActionsType<typeof appAC>\r\n\r\nconst appReducer = (state = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_OPEN': {\r\n            return {...state, open: action.open}\r\n        }\r\n        case 'APP/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'APP/SET_LAN_ERROR': {\r\n            return {...state, lanError: action.lanError}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const appAC = {\r\n    setOpen: (open: boolean) => ({type: 'APP/SET_OPEN', open} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'APP/TOGGLE_LOADING', isLoading} as const),\r\n    setLanError: (lanError: boolean) => ({type: 'APP/SET_LAN_ERROR', lanError} as const),\r\n};\r\n\r\nexport default appReducer;","import axios from \"axios\";\r\nimport {\r\n    CharactersDataType,\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType, LocationsDataType, LocationType,\r\n    SearchingCharactersParamsType, SearchingEpisodesParamsType, SearchingLocationsParamsType,\r\n\r\n} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n        baseURL: 'https://rickandmortyapi.com/api/'\r\n    });\r\n\r\n    export const charactersAPI = {\r\n        async getCharacters(currentPage = 1) {\r\n            let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n            return response.data\r\n        },\r\n        async getCharacterByUrl(url: string) {\r\n            let response = await axios.get<CharacterType>(url);\r\n            return response.data\r\n        },\r\n        async getCurrentCharacter(id: number) {\r\n            let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingCharactersParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    },\r\n    async searchEpisodes(searchingParams: SearchingEpisodesParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.episode) str = `${str}&episode=${searchingParams.episode}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<EpisodesDataType>(`episode/?${str}`);\r\n        return response.data\r\n\r\n    }\r\n};\r\n\r\nexport const locationsAPI = {\r\n    async getLocations(currentPage = 1) {\r\n        let response = await instance.get<LocationsDataType>(`location/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentLocation(id: number) {\r\n        let response = await instance.get<LocationType>(`location/${id}`);\r\n        return response.data\r\n    },\r\n    async getLocationByUrl(url: string) {\r\n        let response = await axios.get<LocationType>(url);\r\n        return response.data\r\n    },\r\n    async searchLocations(searchingParams: SearchingLocationsParamsType, currentPage = 1) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.type) str = `${str}&episode=${searchingParams.type}`;\r\n        if (searchingParams.dimension) str = `${str}&episode=${searchingParams.dimension}`;\r\n        str = `${str}&page=${currentPage}`;\r\n        let response = await instance.get<LocationsDataType>(`location/?${str}`);\r\n        return response.data\r\n    }\r\n};\r\n\r\n// @types/jest @types/node @types/react @types/react-dom @types/react-redux @types/react-router-dom @types/redux-form","module.exports = __webpack_public_path__ + \"static/media/logo.3de5ba72.png\";","type EmptyType = (str: string) => boolean\r\n\r\nexport const empty: EmptyType = (str) => /^\\s+$/.test(str);\r\n\r\nexport type SearchCharactersErrorsType = {\r\n    name?: string | undefined\r\n    species?: string | undefined\r\n    type?: string | undefined\r\n    status?: string | undefined\r\n    gender?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchCharactersValidateType = (values: SearchCharactersFormValuesType) => SearchCharactersErrorsType\r\n\r\nexport type SearchCharactersFormValuesType = {\r\n    name: string\r\n    species: string\r\n    type: string\r\n    status: '' | 'alive' | 'dead' | 'unknown'\r\n    gender: '' | 'female' | 'male' | 'genderless' | 'unknown'\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchEpisodesErrorsType = {\r\n    name?: string | undefined\r\n    episode?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchEpisodesValidateType = (values: SearchEpisodesFormValuesType) => SearchEpisodesErrorsType\r\n\r\nexport type SearchEpisodesFormValuesType = {\r\n    name: string\r\n    episode: string\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport type SearchLocationsErrorsType = {\r\n    name?: string | undefined\r\n    type?: string | undefined\r\n    dimension?: string | undefined\r\n    _error?: string | undefined\r\n}\r\n\r\nexport type SearchLocationsValidateType = (values: SearchLocationsFormValuesType) => SearchLocationsErrorsType\r\n\r\nexport type SearchLocationsFormValuesType = {\r\n    name: string\r\n    type: string\r\n    dimension: string\r\n}","import {connect} from \"react-redux\";\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {sidebarAC} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {charactersAC} from \"../../../store/characters-reducer\";\r\nimport {episodesAC} from \"../../../store/episodes-reducer\";\r\nimport {locationsAC} from \"../../../store/locations-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\nexport enum OwnIndexEnum {\r\n    characters = 1,\r\n    episodes = 2,\r\n    locations = 3\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: OwnIndexEnum\r\n}\r\n\r\nexport type SidebarItemPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {\r\n    setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n    setShowEpisodesFrom, setShowLocationsFrom\r\n})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\nimport {HeaderPropsType} from \"./HeaderContainer\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport clsx from 'clsx';\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const {open, setOpen} = props;\r\n    const classes = useStyles();\r\n\r\n    const handleDrawerOpen = (): void => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <IconButton\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={handleDrawerOpen}\r\n                    edge=\"start\"\r\n                    className={clsx(classes.menuButton, open && classes.hide)}\r\n                >\r\n                    <MenuIcon/>\r\n                </IconButton>\r\n                <Link component={RouterLink}\r\n                      to='/'\r\n                      underline='none'\r\n                      className={classes.link}>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        Rick and Morty DB\r\n                    </Typography>\r\n                </Link>\r\n\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n//============================= STYLES ===========================\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        appBarShift: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: 'none',\r\n        },\r\n        root: {\r\n            backgroundColor: indigo[900],\r\n            color: lightBlue[400]\r\n        },\r\n        link: {\r\n            color: 'white',\r\n        }\r\n    }),\r\n);\r\n\r\n\r\n","export const drawerWidth = 240;","import {connect} from \"react-redux\";\r\nimport Header from \"./Header\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType  => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst setOpen = appAC.setOpen;\r\n\r\n\r\nconst HeaderContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {setOpen})(Header);\r\n\r\nexport default HeaderContainer;\r\n\r\n//------------------------------------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setOpen: (open: boolean) => void\r\n}\r\n\r\nexport type HeaderPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\n","import React from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\nconst Character: React.FC<PropTypes> = ({character}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root} elevation={6}>\r\n                <CardActionArea component={RouterLink}\r\n                                to={`characters/${character.id}`}>\r\n                    <CardMedia className={classes.media}\r\n                               image={character.image}\r\n                    />\r\n                </CardActionArea>\r\n                <CardContent className={classes.cardContent}>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\" align='center'>\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n//================= TYPES =================\r\ntype PropTypes = {\r\n    character: CharacterType\r\n}\r\n//================= STYLES ================\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n    cardContent: {\r\n        padding: 5,\r\n        '&:last-child': {\r\n            paddingBottom: 5\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       size='small'\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n//========================== TYPES ===========================\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\n//========================== STYLES ===========================\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(1),\r\n                marginBottom: theme.spacing(1),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\n","import FormControl from \"@material-ui/core/FormControl\";\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\n\r\n\r\nconst renderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => {\r\n    return (\r\n\r\n        <FormControl error={touched && error}>\r\n            <InputLabel htmlFor=\"color-native-simple\">{label}</InputLabel>\r\n            <Select\r\n\r\n                native\r\n                {...input}\r\n                {...custom}\r\n                inputProps={{\r\n                    name: input.name,\r\n                    id: 'color-native-simple'\r\n                }}\r\n            >\r\n                {children}\r\n            </Select>\r\n\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport default renderSelectField;","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {SearchCharactersPropsType} from \"./SearchCharactersContainer\";\r\nimport {\r\n    empty,\r\n    SearchCharactersErrorsType,\r\n    SearchCharactersFormValuesType,\r\n    SearchCharactersValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport renderSelectField from \"../../../Common/renderSelectField\";\r\nimport RenderTextField from \"../../../Common/RenderTextField\";\r\n\r\n//================================= FORM ===================================\r\nconst SearchCharactersForm: React.FC<InjectedFormProps<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType> & SearchCharactersFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.textField}/>\r\n            </div>\r\n\r\n            <div>\r\n                <Field name='status' component={renderSelectField} label='Status' className={classes.selectField}>\r\n                    <option value={''}/>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={renderSelectField} label='Gender' className={classes.selectField}>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={classes.button}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={classes.button}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n        </form>\r\n    )\r\n};\r\n\r\n//===================== VALIDATE =============================\r\nconst validate: SearchCharactersValidateType = (values) => {\r\n    let errors = {} as SearchCharactersErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && (values.type !== '')) {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (\r\n        !values.gender\r\n        && !values.status\r\n        && (!values.name || empty(values.name))\r\n        && (!values.species || empty(values.species))\r\n        && (!values.type || empty(values.type))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n}\r\n\r\n//============================ REDUX-FORM ====================================\r\nconst ReduxSearchCharactersForm = reduxForm<SearchCharactersFormValuesType, SearchCharactersFormOwnPropsType>({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\n//=========================== COMPONENT =====================================\r\nconst SearchCharacters: React.FC<SearchCharactersPropsType> = (props) => {\r\n    const {setSearchingParams, setCurrentPage, setShowCharactersFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchCharactersFormValuesType) => {\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFrom('search')\r\n    };\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters;\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//======================== TYPES ==========================\r\ntype SearchCharactersFormOwnPropsType = {}\r\n\r\n//====================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        marginRight: 10,\r\n        marginBottom: 10\r\n    },\r\n    selectField: {\r\n        marginRight: 10,\r\n        marginTop: 10\r\n\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10,\r\n        marginTop: 10,\r\n        marginBottom: 10\r\n    }\r\n});\r\n\r\n\r\n","import {CharactersDataType, CharacterType, EpisodeType, SearchingCharactersParamsType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0,\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    showCharactersFrom: 'all' as 'all' | 'search' | 'episode' | 'location',\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {...state, searchingParams: action.searchingParams}\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM': {\r\n            return {...state, showCharactersFrom: action.showCharactersFrom}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType | null) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'CHARACTERS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM', showCharactersFrom\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType | AppActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.getCharacters(currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n        dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n        // получение информации о эпизодах, относящихся к текущему характеру:\r\n        // в currentCharacter содержится только массив ссылок на эпизоды\r\n        const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingCharactersParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        const charactersData = {} as CharactersDataType;\r\n        charactersData.results = []\r\n        charactersData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(charactersAC.setCharacters(charactersData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId = null, nextId = null;\r\n        const currentPage = getState().characters.currentPage;\r\n        const totalCharactersCount = getState().characters.totalCharactersCount;\r\n        const characters = getState().characters.characters;\r\n        const totalPagesCount = getState().characters.totalPagesCount;\r\n        const searchingParams = getState().characters.searchingParams;\r\n        const showCharactersFrom = getState().characters.showCharactersFrom;\r\n        // позиция id, на который переходим, целевого, в массиве characters (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInCharacters = getState().characters.characters.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА //////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'all') {\r\n            //console.log('ЕСЛИ ХАРАКТЕРЫ ИЗ ОСНОВНОГО НАБОРА')\r\n            if (targetId > 1) {\r\n                prevId = targetId - 1;\r\n            } else {\r\n                prevId = null;\r\n            }\r\n            if (targetId < totalCharactersCount) {\r\n                nextId = targetId + 1;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n            // если целевой ид не на текущей странице и предыдущая страница существует\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ПОИСКА /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'search') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            prevId = null\r\n            // если целевой ид на текущей станице и не первый - prevId = characters[positionTargetIdInCharacters - 1]\r\n            if (positionTargetIdInCharacters > 0) {\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            }\r\n            // если целевой ид на текущей станице и первый и предыдущая страница существует - prevId - последний на предыдущей странице\r\n            if (positionTargetIdInCharacters === 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[19].id;\r\n            }\r\n            // если целевой ид не на текущей странице, предыдущая страница существует - prevId - предпоследний на предыдущей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage > 1) {\r\n                let prevCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage - 1); // запрашиваем предыдущую страницу\r\n                prevId = prevCharactersData.results[18].id;\r\n                // получаем и загружаем предыдущую страницу в стор\r\n                if (change === 'prev') {\r\n                    dispatch(charactersAC.setCharacters(prevCharactersData));\r\n                    dispatch(charactersAC.setCurrentPage(currentPage - 1));\r\n                }\r\n            }\r\n\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            nextId = null;\r\n            // целевой ид на текущий странице, но не последний - nextId = characters[positionCurrentIdInCharacters + 1]\r\n            if (positionTargetIdInCharacters > -1 && positionTargetIdInCharacters < characters.length - 1) { //целевой ид на текущий странице, но не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            }\r\n            // целевой ид на текущий странице и последний, следующая страница существует - nextId - первый на следующей странице\r\n            if (positionTargetIdInCharacters === characters.length - 1 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                nextId = nextCharactersData.results[0].id; // первый на следующей странице\r\n            }\r\n            // целевой ид не на текущий странице, следующая страница существует и ее длина > 1 - nextId - второй на следующей странице\r\n            if (positionTargetIdInCharacters < 0 && currentPage < totalPagesCount) {\r\n                let nextCharactersData = await charactersAPI.searchCharacters(searchingParams, currentPage + 1); // запрашиваем следующую страницу\r\n                if (nextCharactersData.results.length > 1) {\r\n                    nextId = nextCharactersData.results[1].id; // второй на следующей странице\r\n                    // получаем и загружаем следующую страницу в стор\r\n                    if (change === 'next') {\r\n                        dispatch(charactersAC.setCharacters(nextCharactersData));\r\n                        dispatch(charactersAC.setCurrentPage(currentPage + 1));\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // ЕСЛИ ХАРАКТЕРЫ ИЗ ЭПИЗОДА ИЛИ ИЗ ЛОКАЦИИ /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (showCharactersFrom === 'episode' || showCharactersFrom === 'location') {\r\n            // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters > 0) {// если целевой ид не первый\r\n                prevId = characters[positionTargetIdInCharacters - 1].id\r\n            } else {\r\n                prevId = null\r\n            }\r\n            // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n            if (positionTargetIdInCharacters < characters.length - 1) { //целевой ид не последний\r\n                nextId = characters[positionTargetIdInCharacters + 1].id;\r\n            } else {\r\n                nextId = null;\r\n            }\r\n        }\r\n        dispatch(charactersAC.setAroundId(prevId, nextId));\r\n    } catch (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default charactersReducer;","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingCharactersParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setCurrentPage, setShowCharactersFrom})(SearchCharacters);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingCharactersParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n}\r\n\r\nexport type SearchCharactersPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchCharactersContainer;\r\n","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\nconst Preloader: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.circular}>\r\n            <CircularProgress size={100} color={'secondary'}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator\";\r\nimport {\r\n    Badge,\r\n    Collapse,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle\r\n} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharactersPropsType} from \"./CharactersContainer\";\r\nimport Preloader from \"../../Common/Preloader\";\r\n\r\nconst Characters: React.FC<CharactersPropsType> = (props) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage,\r\n        getCharacters, setCurrentPage, totalCharactersCount,\r\n        getCharactersFromSearch, searchingParams, isLoading,\r\n        lanError, setShowCharactersFrom, showCharactersFrom, currentEpisode,\r\n        currentLocation\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (showCharactersFrom === 'all') {\r\n            getCharacters(currentPage);\r\n        }\r\n        if (showCharactersFrom === 'search') {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFrom]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowCharactersFrom('all')\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        if (lanError) {\r\n            setOpen(true)\r\n        }\r\n    }, [lanError])\r\n\r\n    const handleOk = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Dialog\r\n                    disableBackdropClick\r\n                    disableEscapeKeyDown\r\n                    maxWidth=\"xs\"\r\n                    aria-labelledby=\"confirmation-dialog-title\"\r\n                    open={open}\r\n                >\r\n                    <DialogTitle id=\"confirmation-dialog-title\">Error</DialogTitle>\r\n                    <DialogContent>\r\n                        Some error occurred on the network\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button autoFocus onClick={handleOk} color=\"primary\">\r\n                            Ok\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchCharactersContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchCharactersClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showCharactersFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showCharactersFrom === 'episode' && <div className={classes.count}>\r\n                    {`List of the characters from episode: ${currentEpisode.episode} - ${currentEpisode.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'location' && <div className={classes.count}>\r\n                    {currentLocation && `List of the characters from location: ${currentLocation.name}`}\r\n                </div>}\r\n\r\n                {showCharactersFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the characters from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total characters count: `}\r\n                    <Badge badgeContent={totalCharactersCount} color=\"primary\" max={99999} showZero>\r\n                        <PeopleIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                {!characters.length || showCharactersFrom === 'episode' || showCharactersFrom === 'location' ? null :\r\n                    <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                               onPaginatorItemClick={onPaginatorItemClick}\r\n                               currentPage={currentPage}\r\n                    />}\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <Preloader/>\r\n                : <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                    {charactersElements}\r\n                </Grid>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n\r\n//=================== STYLES ==========================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 10\r\n    },\r\n});\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, EpisodeType, LocationType, SearchingCharactersParamsType} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    searchingParams: SearchingCharactersParamsType\r\n    isLoading: boolean\r\n    lanError: boolean\r\n    totalCharactersCount: number\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n    currentEpisode: EpisodeType\r\n    currentLocation: null | LocationType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingCharactersParamsType, currentPage: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    currentLocation: state.locations.currentLocation\r\n});\r\n\r\nexport type CharactersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCharacters, setCurrentPage, getCharactersFromSearch,\r\n        setShowCharactersFrom\r\n    })(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    row: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr',\r\n        borderBottom: '1px #ccc solid',\r\n        paddingLeft: 10,\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n\r\n});\r\n\r\nconst RowCustom: React.FC<RowCustomPropsTypes> = (props) => {\r\n    const classes = useStyles()\r\n    const {leftContent, rightContent} = props\r\n    return (\r\n        <div className={classes.row}>\r\n            <Typography variant='subtitle1'>{leftContent}</Typography>\r\n            <Typography variant='h6' color='primary'>{rightContent}</Typography>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RowCustom;\r\n\r\ntype RowCustomPropsTypes = {\r\n    leftContent: string\r\n    rightContent: string\r\n}","import React from \"react\";\r\nimport {useEffect} from \"react\";\r\nimport {\r\n    Badge,\r\n    Button,\r\n    Card, CardMedia,\r\n    Grid, List, ListItem,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodesDataType, PathParamsType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport {CharactersInfoPropsType} from \"./CharacterInfoContainer\";\r\nimport RowCustom from \"../../../Common/RowCustom\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkPropsType> = (props) => {\r\n    const classes = useStyles()\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.episode}>\r\n            <ListItem button component={renderLink} onClick={onClick}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='textPrimary' variant='subtitle1'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, match, getCurrentCharacter, isLoading,\r\n        episodesOfCurrentCharacter, setCurrentSidebarMenuItem, getAroundId, aroundId,\r\n        lanError, showCharactersFrom, setShowCharactersFrom, setShowEpisodesFrom,\r\n        setEpisodes\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentCharacter(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    }\r\n\r\n    const onEpisodeClick = () => {\r\n        setCurrentSidebarMenuItem(3);\r\n        setShowEpisodesFrom('character');\r\n        // записать в episodes эпизоды из характера\r\n        if (episodesOfCurrentCharacter) {\r\n            const episodesOfCurrentCharacterData = {} as EpisodesDataType;\r\n            episodesOfCurrentCharacterData.results = episodesOfCurrentCharacter\r\n\r\n            episodesOfCurrentCharacterData.info = {\r\n                count: episodesOfCurrentCharacter.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setEpisodes(episodesOfCurrentCharacterData)\r\n        }\r\n    };\r\n\r\n    const onBackToAllCharacters = () => {\r\n        setShowCharactersFrom('all');\r\n    }\r\n\r\n    if (lanError) {\r\n        return <Redirect to=\"/characters\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between'>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous character\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllCharacters}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to all characters\r\n                </Button>\r\n\r\n                {(showCharactersFrom === 'search' || showCharactersFrom === 'episode' || showCharactersFrom === 'location') &&\r\n                <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to characters from {showCharactersFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/characters/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next character\r\n                </Button>\r\n            </Grid>\r\n\r\n            {(isLoading || !currentCharacter || !episodesOfCurrentCharacter\r\n                || +match.params.id !== currentCharacter.id)\r\n                ? <Preloader/>\r\n                : <div>\r\n                    <div className={classes.characterInfoBlock}>\r\n                        <div className={classes.cardContainer}>\r\n                            <Card className={classes.card}>\r\n                                <CardMedia\r\n                                    className={classes.media}\r\n                                    image={currentCharacter.image}/>\r\n                                <Typography color='error' variant='h5' className={classes.name}>\r\n                                    {currentCharacter.name}\r\n                                </Typography>\r\n                            </Card>\r\n                        </div>\r\n\r\n                        <div className={classes.characterInfo}>\r\n                            <RowCustom leftContent='Gender:' rightContent={currentCharacter.gender}/>\r\n                            <RowCustom leftContent='Status:' rightContent={currentCharacter.status}/>\r\n                            <RowCustom leftContent='Species:' rightContent={currentCharacter.species}/>\r\n                            {currentCharacter.type &&\r\n                            <RowCustom leftContent='Subspecies:' rightContent={currentCharacter.type}/>}\r\n                            <RowCustom leftContent='Origin location:' rightContent={currentCharacter.origin.name}/>\r\n                            <RowCustom leftContent='Last known location endpoint:'\r\n                                       rightContent={currentCharacter.location.name}/>\r\n\r\n                            <div className={classes.titleOfList}>\r\n                                <Typography variant='h6' color='secondary' component='span'>\r\n                                    {'List of episodes in which this character appeared: '}\r\n                                </Typography>\r\n                                <Badge badgeContent={episodesOfCurrentCharacter.length} color=\"secondary\" max={99999}\r\n                                       showZero>\r\n                                    <MovieIcon/>\r\n                                </Badge>\r\n                            </div>\r\n\r\n                            <List>\r\n                                {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                    onClick={onEpisodeClick}\r\n                                    key={episode.id}\r\n                                    to={`/episodes/${episode.id}`}\r\n                                    primary={`${episode.episode} - ${episode.name}`}>\r\n                                </ListItemLink>)}\r\n                            </List>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;\r\n\r\n//=================== TYPES =====================\r\ntype ListItemLinkPropsType = {\r\n    icon?: React.ReactElement\r\n    primary: string\r\n    to: string\r\n    onClick: () => void\r\n    children: any\r\n};\r\ntype PropsType = CharactersInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n//=================== STYLES ====================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        textTransform: 'none',\r\n        marginBottom: 10\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10,\r\n        marginRight: 20\r\n    },\r\n    cardContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    episode: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#ccc',\r\n        },\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    },\r\n    name: {\r\n        textAlign: 'center',\r\n        paddingTop: 5,\r\n        paddingBottom: 5\r\n    },\r\n    characterInfoBlock: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'flex-start'\r\n    },\r\n    characterInfo: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n","import {GetActionsType} from \"./store\";\r\n\r\nconst SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype CharactersActionsType = GetActionsType<typeof sidebarAC>\r\n\r\nconst sidebarReducer = (state = initialState, action: CharactersActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sidebarAC = {\r\n    setCurrentSidebarMenuItem: (currentItem: number) => ({type: SET_CURRENT_ITEM, currentItem} as const)\r\n}\r\n\r\n\r\nexport default sidebarReducer;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getAroundId, getCurrentCharacter} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodesDataType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {episodesAC} from \"../../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    isLoading: boolean\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    lanError: boolean\r\n    showCharactersFrom: 'all' | 'search' | 'episode' | 'location'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    getAroundId: (currentCharacterId: number, change: null | 'prev' | 'next') => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => void\r\n    setEpisodes: (episodesData: EpisodesDataType) => void\r\n}\r\n\r\nexport type CharactersInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    isLoading: state.app.isLoading,\r\n    lanError: state.app.lanError,\r\n    currentCharacter: state.characters.currentCharacter,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter,\r\n    aroundId: state.characters.aroundId,\r\n    showCharactersFrom: state.characters.showCharactersFrom,\r\n});\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\nconst setEpisodes = episodesAC.setEpisodes;\r\n\r\nconst CharacterInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    {},\r\n    StateType>(mapStateToProps,\r\n    {\r\n        getCurrentCharacter, setCurrentSidebarMenuItem, getAroundId,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setEpisodes\r\n    }), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import React, {useEffect} from \"react\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {EpisodeInfoPropsType} from \"./EpisodeInfoContainer\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\n\r\ntype PropsType = EpisodeInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode,\r\n        setCurrentSidebarMenuItem, setShowCharactersFrom,\r\n        setCharacters, getAroundId, setShowEpisodesFrom, aroundId, showEpisodesFrom\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentEpisode(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onBackToAllEpisodes = () => {\r\n        setShowEpisodesFrom('all');\r\n    }\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('episode'); // изменить источник Characters\r\n        // записать в characters характеры из эпизода\r\n        if (charactersOfCurrentEpisode) {\r\n            const charactersOfCurrentEpisodeData = {} as CharactersDataType;\r\n            charactersOfCurrentEpisodeData.results = charactersOfCurrentEpisode\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentEpisodeData.info = {\r\n                count: charactersOfCurrentEpisode.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            }\r\n            setCharacters(charactersOfCurrentEpisodeData)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous episode\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllEpisodes}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to all episodes\r\n                </Button>\r\n\r\n                {(showEpisodesFrom === 'search' || showEpisodesFrom === 'character') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<MovieIcon/>}>\r\n                    Back to episodes from {showEpisodesFrom}\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/episodes/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next episode\r\n                </Button>\r\n            </Grid>\r\n\r\n            {isLoading || !currentEpisode || !charactersOfCurrentEpisode || +match.params.id !== currentEpisode.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5'>\r\n                        {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                    </Typography>\r\n\r\n                    <Typography color='textSecondary' variant='h6'>\r\n                        The air date: {currentEpisode.air_date}\r\n                    </Typography>\r\n\r\n                    <Typography color='textPrimary' variant='h6'>\r\n                        {'List of characters who have been seen in the episode '}\r\n                        <Badge badgeContent={charactersOfCurrentEpisode.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </Typography>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentEpisode\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                      key={character.id}\r\n                                                      onClick={onCharacterClick}\r\n                                                      color={'default'}\r\n                                                      className={classes.characterItem}\r\n                                                      component={RouterLink}\r\n                                                      to={`/characters/${character.id}`}\r\n                                                      size='large'>\r\n                                    <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                    {character.name}\r\n                                </Button>\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;\r\n\r\n//=========================== STYLES ============================\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {episodesAC, getAroundId, getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    //totalEpisodesCount: number\r\n    aroundId: {prevId: null | number, nextId: null | number}\r\n    showEpisodesFrom: 'all' | 'search' | 'character'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search') => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n    //totalEpisodesCount: state.episodes.totalEpisodesCount,\r\n    aroundId: state.episodes.aroundId,\r\n    showEpisodesFrom: state.episodes.showEpisodesFrom,\r\n});\r\n\r\nexport type EpisodeInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowEpisodesFrom = episodesAC.setShowEpisodesFrom;\r\n\r\nconst EpisodeInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setCharacters, getAroundId,\r\n        setShowEpisodesFrom}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import {\r\n    CharacterType,\r\n    LocationsDataType,\r\n    LocationType,\r\n    SearchingLocationsParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\nimport {charactersAPI, locationsAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    locations: [] as Array<LocationType>,\r\n    totalLocationsCount: 0,\r\n    totalPagesCount: 0,\r\n    currentLocation: null as null | LocationType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentLocation: null as null | Array<CharacterType>,\r\n    showLocationsFrom: 'all' as 'all' | 'search',\r\n    searchingParams: {\r\n        name: '', type: '', dimension: ''\r\n    },\r\n    currentLocationId: null as null | number,\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst locationsReducer = (state = initialState, action: LocationsActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOCATIONS/SET_LOCATIONS': {\r\n            return {\r\n                ...state,\r\n                locations: action.locationsData.results,\r\n                totalLocationsCount: action.locationsData.info.count,\r\n                totalPagesCount: action.locationsData.info.pages,\r\n                next: action.locationsData.info.next,\r\n                prev: action.locationsData.info.prev\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION': {\r\n            return {...state, currentLocation: action.currentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION': {\r\n            return {...state, charactersOfCurrentLocation: action.charactersOfCurrentLocation}\r\n        }\r\n        case 'LOCATIONS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'LOCATIONS/SET_SHOW_LOCATIONS_FROM': {\r\n            return {...state, showLocationsFrom: action.showLocationsFrom}\r\n        }\r\n        case 'LOCATIONS/SET_CURRENT_LOCATION_ID': {\r\n            return {...state, currentLocationId: action.currentLocationId}\r\n        }\r\n        case 'LOCATIONS/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype LocationsActionsType = GetActionsType<typeof locationsAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, LocationsActionsType | AppActionsType>\r\n\r\nexport const locationsAC = {\r\n    setLocations: (locationsData: LocationsDataType) => ({type: 'LOCATIONS/SET_LOCATIONS', locationsData} as const),\r\n    setCurrentLocation: (currentLocation: LocationType | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION',\r\n        currentLocation\r\n    } as const),\r\n    setCharactersOfCurrentLocation: (charactersOfCurrentLocation: Array<CharacterType>) => ({\r\n        type: 'LOCATIONS/SET_CHARACTERS_OF_CURRENT_LOCATION',\r\n        charactersOfCurrentLocation\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => ({\r\n        type: 'LOCATIONS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => ({\r\n        type: 'LOCATIONS/SET_SHOW_LOCATIONS_FROM', showLocationsFrom\r\n    } as const),\r\n    setCurrentLocationId: (currentLocationId: number | null) => ({\r\n        type: 'LOCATIONS/SET_CURRENT_LOCATION_ID',\r\n        currentLocationId\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'LOCATIONS/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\nexport const getLocations = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await locationsAPI.getLocations();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ локаций\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.getLocations(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as LocationsDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<LocationType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    // 3 - сортировка локаций по имени\r\n    resultsArray.sort((a, b) => {\r\n        if (a.name > b.name) return 1;\r\n        if (a.name < b.name) return -1;\r\n        return 0;\r\n    });\r\n    data.results = resultsArray;\r\n    // 4 - запись ВСЕХ локаций в store\r\n    dispatch(locationsAC.setLocations(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentLocation = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let currentLocationResponse = await locationsAPI.getCurrentLocation(id);\r\n    dispatch(locationsAC.setCurrentLocation(currentLocationResponse));\r\n    // получение информации о персонажах, относящихся к текущей локации:\r\n    // в currentLocation содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты LocationInfo\r\n    const arrayOfRequests = currentLocationResponse.residents.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(locationsAC.setCharactersOfCurrentLocation(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getLocationsFromSearch = (searchingParams: SearchingLocationsParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        const resultWithTotalPageCount = await locationsAPI.searchLocations(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ локаций\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n        const arrayOfRequests = arrPages.map(pageNumber => locationsAPI.searchLocations(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as LocationsDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<LocationType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(locationsAC.setLocations(data));\r\n    } catch (e) {\r\n        const locationsData = {} as LocationsDataType;\r\n        locationsData.results = []\r\n        locationsData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(locationsAC.setLocations(locationsData));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const locations = getState().locations.locations;\r\n        // позиция id, на который переходим, целевого, в массиве locations (т.е. на текущей странице)\r\n        // от 0 до getState().characters.characters.length - 1\r\n        const positionTargetIdInLocations = getState().locations.locations.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInLocations > 0) { // если целевой ид не первый\r\n            prevId = locations[positionTargetIdInLocations - 1].id\r\n        } else {\r\n            prevId = null;\r\n        }\r\n        if (positionTargetIdInLocations < locations.length - 1) {// если целевой ид не последний\r\n            nextId = locations[positionTargetIdInLocations + 1].id\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(locationsAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default locationsReducer;","import React from \"react\";\r\nimport {LocationType} from \"../../../../Types/Types\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nconst ListItemLink: React.FC<ListItemLinkProps> = (props) => {\r\n    const classes = useStyles();\r\n    const {icon, primary, to, onClick} = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li className={classes.item}>\r\n            <ListItem onClick={onClick} button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary}/>\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Location: React.FC<PropsType> = (props) => {\r\n    const {location, setCurrentLocationId} = props;\r\n    const onClick = () => {\r\n        setCurrentLocationId(location.id)\r\n    };\r\n    return (\r\n        <ListItemLink\r\n            to={`/locations/${location.id}`}\r\n            onClick={onClick}\r\n            primary={location.name}>\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Location;\r\n\r\n//============== TYPES ===============\r\ntype ListItemLinkProps = {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n    children: any\r\n    onClick: () => void\r\n}\r\ntype PropsType = {\r\n    location: LocationType\r\n    setCurrentLocationId: (id: number | null) => void\r\n};\r\n\r\n//================== STYLES ==================\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#eee',\r\n        },\r\n    }\r\n});","import React from 'react';\r\nimport {Button, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RenderTextField from \"../../../Common/RenderTextField\";\r\nimport {\r\n    empty,\r\n    SearchLocationsErrorsType,\r\n    SearchLocationsFormValuesType,\r\n    SearchLocationsValidateType\r\n} from \"../../../../Helpers/Validators\";\r\nimport {SearchLocationsPropsType} from \"./SearchLocationsContainer\";\r\n\r\n//===============================FORM =====================================\r\nconst SearchLocationsForm: React.FC<InjectedFormProps<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType> & SearchLocationsFormOwnPropsType> = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='dimension' component={RenderTextField} label='Dimension' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\n//========================== VALIDATE ============================\r\nconst validate: SearchLocationsValidateType = (values) => {\r\n    let errors = {} as SearchLocationsErrorsType;\r\n    if (empty(values.name) && (values.name !== '')) {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if (empty(values.dimension) && (values.dimension !== '')) {\r\n        errors.dimension = 'dimension field is empty'\r\n    }\r\n    if (\r\n        (!values.name || empty(values.name))\r\n        && (!values.type || empty(values.type))\r\n        && (!values.dimension || empty(values.dimension))\r\n    ) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    return errors;\r\n};\r\n\r\n//=========================== REDUX-FORM ======================================\r\nconst ReduxSearchLocationsForm = reduxForm<SearchLocationsFormValuesType, SearchLocationsFormOwnPropsType>({\r\n    form: 'searchLocations',\r\n    validate\r\n})(SearchLocationsForm);\r\n\r\n//=========================== COMPONENT ======================================\r\nconst SearchLocations: React.FC<SearchLocationsPropsType> = (props) => {\r\n    const {setSearchingParams, setShowLocationsFrom} = props;\r\n\r\n    const onSubmit = (formValue: SearchLocationsFormValuesType) => {\r\n        setSearchingParams(formValue)\r\n        setShowLocationsFrom('search')\r\n    };\r\n    return (\r\n        <ReduxSearchLocationsForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchLocations;\r\n\r\n//=========================== TYPES ==============================\r\ntype SearchLocationsFormOwnPropsType = {}\r\n\r\n//========================== STYLES ===============================\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {locationsAC} from \"../../../../store/locations-reducer\";\r\nimport SearchLocations from \"./SearchLocations\";\r\nimport {SearchingLocationsParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({});\r\n\r\nconst setSearchingParams = locationsAC.setSearchingParams;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\n\r\n\r\nconst SearchLocationsContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {setSearchingParams, setShowLocationsFrom})(SearchLocations);\r\n\r\ntype MapStatePropsType = {}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSearchingParams: (searchingParams: SearchingLocationsParamsType) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n}\r\n\r\nexport type SearchLocationsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nexport default SearchLocationsContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Badge, CircularProgress, Collapse, List} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Location from './Location/Location'\r\nimport {LocationsPropsType} from \"./LocationsContainer\";\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport SearchLocationsContainer from \"./SearchLocations/SearchLocationsContainer\";\r\n\r\nconst Locations: React.FC<LocationsPropsType> = (props) => {\r\n    const {\r\n        locations, getLocations, searchingParams, getLocationsFromSearch,\r\n        showLocationsFrom, setShowLocationsFrom, totalLocationsCount,\r\n        setCurrentLocationId, isLoading\r\n    } = props;\r\n\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n    const [selectedLetter, setSelectedLetter] = useState('All');\r\n\r\n    const classes = useStyles();\r\n\r\n    const locationsElements = locations.map(item => {\r\n        if (selectedLetter === 'All') return <Location key={item.id} location={item}\r\n                                                       setCurrentLocationId={setCurrentLocationId}/>\r\n        if (selectedLetter !== 'All' && item.name[0] === selectedLetter) {\r\n            return <Location key={item.id} location={item} setCurrentLocationId={setCurrentLocationId}/>\r\n        }\r\n    });\r\n\r\n    const alphabetCustom = [] as Array<string>;\r\n    locations.forEach(location => {\r\n        if (!alphabetCustom.includes(location.name[0])) {\r\n            alphabetCustom.push(location.name[0])\r\n        }\r\n    });\r\n    alphabetCustom.sort((a, b) => {\r\n        if (a > b) return 1;\r\n        if (a < b) return -1;\r\n        return 0;\r\n    });\r\n    alphabetCustom.push('All');\r\n\r\n    const arrayOfButtons = alphabetCustom.map(item => {\r\n        const onAlphabetButtonClick = () => {\r\n            setSelectedLetter(item);\r\n        };\r\n        const className = (item === selectedLetter)\r\n            ? `${classes.alphabetButton} ${classes.selected}`\r\n            : `${classes.alphabetButton}`\r\n        return <Button className={className}\r\n                       onClick={onAlphabetButtonClick}\r\n                       key={item}\r\n                       size='small'\r\n                       variant='outlined'>\r\n            {item}\r\n        </Button>\r\n    });\r\n\r\n    const onSearchClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowLocationsFrom('all');\r\n        setSelectedLetter('All');\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (showLocationsFrom === 'all') {\r\n            getLocations();\r\n        }\r\n        if (showLocationsFrom === 'search') {\r\n            getLocationsFromSearch(searchingParams);\r\n            setSelectedLetter('All')\r\n        }\r\n\r\n    }, [searchingParams.name, searchingParams.type, searchingParams.dimension, showLocationsFrom]);\r\n    //\r\n    return (\r\n        <>\r\n            <div>\r\n                <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                    <SearchLocationsContainer/>\r\n                </Collapse>\r\n\r\n                <Button onClick={onSearchClick}\r\n                        className={classes.button}\r\n                        startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                        variant='contained'>\r\n                    {panelIsOpen ? 'Close search' : 'Open search'}\r\n                </Button>\r\n                <Button onClick={onShowAllClick}\r\n                        disabled={showLocationsFrom === 'all'}\r\n                        className={classes.button}\r\n                        variant='contained'>\r\n                    Show all\r\n                </Button>\r\n\r\n                {showLocationsFrom === 'search' && <div className={classes.count}>\r\n                    {'List of the locations from search'}\r\n                </div>}\r\n\r\n                <div className={classes.count}>\r\n                    {`Total locations count: `}\r\n                    <Badge badgeContent={totalLocationsCount} color=\"primary\" max={99999} showZero>\r\n                        <RoomIcon/>\r\n                    </Badge>\r\n                </div>\r\n\r\n                <div>\r\n                    {arrayOfButtons}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {isLoading\r\n                ? <div className={classes.circular}>\r\n                    <CircularProgress size={100} color={'secondary'}/>\r\n                </div>\r\n                : <List>\r\n                    {locationsElements}\r\n                </List>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Locations;\r\n\r\n//=============================== STYLES ========================\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    },\r\n    alphabetButton: {\r\n        minWidth: 30,\r\n        width: 30,\r\n        height: 30,\r\n        padding: 0,\r\n        borderRadius: 15,\r\n        textTransform: 'none'\r\n    },\r\n    circular: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    selected: {\r\n        backgroundColor: '#ccc'\r\n    }\r\n});\r\n","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {LocationType, SearchingLocationsParamsType} from \"../../../Types/Types\";\r\nimport {getLocations, getLocationsFromSearch, locationsAC} from \"../../../store/locations-reducer\";\r\nimport Locations from \"./Locations\";\r\n\r\nexport type MapStatePropsType = {\r\n    locations: Array<LocationType>\r\n    totalPagesCount: number\r\n    searchingParams: SearchingLocationsParamsType\r\n    showLocationsFrom: 'all' | 'search'\r\n    totalLocationsCount: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCurrentLocationId = locationsAC.setCurrentLocationId;\r\n\r\nexport type MapDispatchPropsType = {\r\n    getLocations: () => void\r\n    getLocationsFromSearch: (searchingParams: SearchingLocationsParamsType) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    setCurrentLocationId: (currentLocationId: number | null) => void\r\n}\r\n\r\nexport type LocationsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    locations: state.locations.locations,\r\n    totalPagesCount: state.locations.totalPagesCount,\r\n    searchingParams: state.locations.searchingParams,\r\n    showLocationsFrom: state.locations.showLocationsFrom,\r\n    totalLocationsCount: state.locations.totalLocationsCount,\r\n    isLoading: state.app.isLoading\r\n});\r\n\r\nconst LocationsContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {getLocations, getLocationsFromSearch, setShowLocationsFrom,\r\n    setCurrentLocationId})(Locations);\r\n\r\nexport default LocationsContainer;","import React, {useEffect} from \"react\";\r\nimport {\r\n    Avatar, Badge, Button,\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, RouteComponentProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {LocationInfoPropsType} from \"./LocationInfoContainer\";\r\nimport {CharactersDataType, CharacterType, PathParamsType} from \"../../../../Types/Types\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\nimport RowCustom from \"../../../Common/RowCustom\";\r\n\r\nconst LocationInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        isLoading, match, getCurrentLocation, currentLocation, charactersOfCurrentLocation,\r\n        setCurrentSidebarMenuItem, setShowLocationsFrom, getAroundId, aroundId,\r\n        showLocationsFrom, setCharacters, setShowCharactersFrom,\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    const [direction, setDirection] = React.useState(null as null | 'prev' | 'next');\r\n\r\n    useEffect(() => {\r\n        getCurrentLocation(+match.params.id);\r\n        getAroundId(+match.params.id, direction);\r\n\r\n    }, [match.params.id]);\r\n\r\n    const onClickPrev = () => {\r\n        setDirection('prev');\r\n    };\r\n\r\n    const onClickNext = () => {\r\n        setDirection('next');\r\n    };\r\n\r\n    const onCharacterClick = () => {\r\n        setCurrentSidebarMenuItem(1);// выделяем соответствующий пункт бокового меню\r\n        setShowCharactersFrom('location'); // изменить источник Characters\r\n\r\n        // записать в characters характеры из локации\r\n        if (charactersOfCurrentLocation) {\r\n            const charactersOfCurrentLocationData = {} as CharactersDataType;\r\n            charactersOfCurrentLocationData.results = charactersOfCurrentLocation\r\n                .sort((a: CharacterType, b: CharacterType) => {\r\n                    if (a.name > b.name) {\r\n                        return 1\r\n                    }\r\n                    if (a.name < b.name) {\r\n                        return -1\r\n                    }\r\n                    return 0\r\n                });\r\n            charactersOfCurrentLocationData.info = {\r\n                count: charactersOfCurrentLocation.length,\r\n                pages: 1,\r\n                prev: null,\r\n                next: null\r\n            };\r\n            setCharacters(charactersOfCurrentLocationData)\r\n        }\r\n\r\n    }\r\n\r\n    const onBackToAllLocations = () => {\r\n        setShowLocationsFrom('all');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container justify='space-between' className={classes.buttons}>\r\n                <Button\r\n                    onClick={onClickPrev}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.prevId}`}\r\n                    disabled={!aroundId.prevId || isLoading} //\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<ArrowBackIcon/>}>\r\n                    Previous location\r\n                </Button>\r\n\r\n                <Button\r\n                    onClick={onBackToAllLocations}\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<RoomIcon/>}>\r\n                    Back to all locations\r\n                </Button>\r\n\r\n                {(showLocationsFrom === 'search') && <Button\r\n                    disabled={isLoading}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations`}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    startIcon={<PeopleIcon/>}>\r\n                    Back to locations from search\r\n                </Button>}\r\n\r\n                <Button\r\n                    onClick={onClickNext}\r\n                    className={classes.button}\r\n                    component={RouterLink}\r\n                    to={`/locations/${aroundId.nextId}`}\r\n                    disabled={!aroundId.nextId || isLoading}\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"medium\"\r\n                    endIcon={<ArrowForwardIcon/>}>\r\n                    Next location\r\n                </Button>\r\n            </Grid>\r\n\r\n            { isLoading || !currentLocation || !charactersOfCurrentLocation || +match.params.id !== currentLocation.id\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Typography color='error' variant='h5' className={classes.titleOfList}>\r\n                        {currentLocation.name}\r\n                    </Typography>\r\n\r\n                    <RowCustom leftContent='The type of the location:' rightContent={currentLocation.type}/>\r\n                    <RowCustom leftContent='The dimension in which the location is located:' rightContent={currentLocation.dimension}/>\r\n\r\n                    <div className={classes.titleOfList}>\r\n                        <Typography variant='h6' color='secondary' component='span'>\r\n                        {'List of character who have been last seen in the location '}\r\n                        </Typography>\r\n                        <Badge badgeContent={charactersOfCurrentLocation.length} color=\"primary\" max={99999}\r\n                               showZero>\r\n                            <PeopleIcon/>\r\n                        </Badge>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {charactersOfCurrentLocation\r\n                            .sort((a: CharacterType, b: CharacterType) => {\r\n                                if (a.name > b.name) {\r\n                                    return 1\r\n                                }\r\n                                if (a.name < b.name) {\r\n                                    return -1\r\n                                }\r\n                                return 0\r\n                            })\r\n                            .map(character => <Button variant='contained'\r\n                                                   key={character.id}\r\n                                                   onClick={onCharacterClick}\r\n                                                   color={'default'}\r\n                                                   className={classes.characterItem}\r\n                                                   component={RouterLink}\r\n                                                   to={`/characters/${character.id}`}\r\n                                                   size='large'>\r\n                                        <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                                        {character.name}\r\n                                    </Button>\r\n\r\n                            )}\r\n                    </div>\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default LocationInfo;\r\n\r\n//======================= TYPES ===========================\r\ntype PropsType = LocationInfoPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n//======================= STYLES ==========================\r\nconst useStyles = makeStyles({\r\n    characterItem: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 10,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    },\r\n    titleOfList: {\r\n        padding: 10\r\n    }\r\n});","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharactersDataType, CharacterType, LocationType} from \"../../../../Types/Types\";\r\nimport {getAroundId, getCurrentLocation, locationsAC} from \"../../../../store/locations-reducer\";\r\nimport LocationInfo from \"./LocationInfo\";\r\nimport {sidebarAC} from \"../../../../store/sidebar-reducer\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentLocation: LocationType | null\r\n    charactersOfCurrentLocation: Array<CharacterType> | null\r\n    isLoading: boolean\r\n    aroundId: { prevId: null | number, nextId: null | number }\r\n    showLocationsFrom: 'all' | 'search'\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentLocation: (id: number) => void\r\n    setCurrentSidebarMenuItem: (currentItem: number) => void\r\n    setShowLocationsFrom: (showLocationsFrom: 'all' | 'search') => void\r\n    getAroundId: (targetId: number, change: null | 'prev' | 'next') => void\r\n    setCharacters: (charactersData: CharactersDataType) => void\r\n    setShowCharactersFrom: (showCharactersFrom: 'all' | 'search' | 'episode' | 'location') => void\r\n}\r\n\r\nexport type LocationInfoPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentLocation: state.locations.currentLocation,\r\n    isLoading: state.app.isLoading,\r\n    charactersOfCurrentLocation: state.locations.charactersOfCurrentLocation,\r\n    aroundId: state.locations.aroundId,\r\n    showLocationsFrom: state.locations.showLocationsFrom\r\n});\r\n\r\nconst setCurrentSidebarMenuItem = sidebarAC.setCurrentSidebarMenuItem;\r\nconst setShowLocationsFrom = locationsAC.setShowLocationsFrom;\r\nconst setCharacters = charactersAC.setCharacters;\r\nconst setShowCharactersFrom = charactersAC.setShowCharactersFrom;\r\n\r\nconst LocationInfoContainer = compose<React.ComponentType>(connect<MapStatePropsType,\r\n    MapDispatchPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        getCurrentLocation, setCurrentSidebarMenuItem,\r\n        setShowLocationsFrom,\r\n        getAroundId, setCharacters, setShowCharactersFrom\r\n    }), withRouter)(LocationInfo);\r\n\r\nexport default LocationInfoContainer;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport logo from './../../../assets/logo.png'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       alignItems: 'center'\r\n    },\r\n    img: {\r\n        maxWidth: 300,\r\n        width: '100%',\r\n        marginTop: 20\r\n    }\r\n}));\r\n\r\nconst Home: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography color='primary' variant=\"h6\" align='center'>\r\n                Welcome to Rick and Morty DB\r\n            </Typography>\r\n            <div>\r\n                <img className={classes.img} src={logo} alt=\"\"/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\n\r\n\r\nconst PageNotFound: React.FC = () => {\r\n    return (\r\n        <Typography align='center'\r\n                    color='secondary'\r\n                    variant='h6'>\r\n            Page not found\r\n        </Typography>\r\n    )\r\n\r\n};\r\n\r\nexport default PageNotFound;\r\n\r\n\r\n","import React, {Suspense} from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\nimport LocationsContainer from \"./Locations/LocationsContainer\";\r\nimport LocationInfoContainer from \"./Locations/LocationInfo/LocationInfoContainer\";\r\nimport {MainPropsType} from \"./MainContainer\";\r\nimport clsx from \"clsx\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\nimport Home from \"./Home/Home\";\r\nimport PageNotFound from \"../Common/PageNotFound\";\r\nimport Preloader from \"../Common/Preloader\";\r\n\r\nconst EpisodesContainer = React.lazy(() => import ('./Episodes/EpisodesContainer'))\r\n\r\nconst Main: React.FC<MainPropsType> = (props) => {\r\n    const {open} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={clsx(classes.content, {\r\n            [classes.contentShift]: open,\r\n        })}>\r\n            <div className={classes.drawerHeader}/>\r\n            <Suspense fallback={<Preloader/>}>\r\n                <Switch>\r\n                    <Route exact path='/' component={Home}/>\r\n                    <Route exact path='/characters' component={CharactersContainer}/>\r\n                    <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n                    <Route exact path='/locations' component={LocationsContainer}/>\r\n                    <Route path='/locations/:id' render={() => <LocationInfoContainer/>}/>\r\n                    <Route exact path='/episodes' component={EpisodesContainer}/>\r\n                    <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n                    <Route path='*' render={() => <PageNotFound/>}/>\r\n                </Switch>\r\n            </Suspense>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n\r\n//================================= STYLES ======================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}));","import {connect} from \"react-redux\";\r\nimport Main from \"./Main\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst MainContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {})(Main);\r\n\r\nexport default MainContainer;\r\n\r\n//--------------------------TYPES---------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type MainPropsType = MapStatePropsType & MapDispatchPropsType;","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {OwnIndexEnum, SidebarItemPropsType} from \"./SidebarItemContainer\";\r\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport indigo from \"@material-ui/core/colors/indigo\";\r\n\r\nconst SidebarItem: React.FC<SidebarItemPropsType> = (props) => {\r\n    const {to, primary, icon, currentItem, ownIndex, setCurrentSidebarMenuItem,\r\n        setShowCharactersFrom, setShowEpisodesFrom, setShowLocationsFrom} = props;\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n        setCurrentSidebarMenuItem(ownIndex);\r\n        if (ownIndex === OwnIndexEnum.characters) {\r\n            setShowCharactersFrom('all')\r\n        }\r\n        if (ownIndex === OwnIndexEnum.locations) {\r\n            setShowLocationsFrom('all')\r\n        }\r\n        if (ownIndex === OwnIndexEnum.episodes) {\r\n            setShowEpisodesFrom('all')\r\n        }\r\n    };\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon className={clsx(ownIndex === currentItem && classes.icon)}>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;\r\n\r\n//=================================== STYLES =====================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    icon: {\r\n        color: indigo[500]\r\n    }\r\n}));","import React from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {SidebarPropsType} from \"./SidebarContainer\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {drawerWidth} from \"../../CONST/const\";\r\n\r\nconst Sidebar: React.FC<SidebarPropsType> = (props) => {\r\n    const {setOpen, open} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleDrawerClose}>\r\n                    {theme.direction === 'ltr' ? <ChevronLeftIcon/> : <ChevronRightIcon/>}\r\n                </IconButton>\r\n            </div>\r\n            <Divider/>\r\n            <List>\r\n                <SidebarItemContainer ownIndex={0} to={\"/\"} primary={'Home'} icon={<HomeIcon/>}/>\r\n                <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\n//===================================== STYLES =====================================\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    }\r\n}));\r\n","import {connect} from \"react-redux\";\r\nimport {appAC} from \"../../store/app-reducer\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport {StateType} from \"../../store/store\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    open: state.app.open\r\n});\r\n\r\nconst setOpen = appAC.setOpen;\r\n\r\nconst SidebarContainer = connect<MapStatePropsType, MapDispatchPropsType, {}, StateType>\r\n(mapStateToProps, {setOpen})(Sidebar);\r\n\r\nexport default SidebarContainer;\r\n\r\n//--------------------------------------------------------------------------------------\r\ntype MapStatePropsType = {\r\n    open: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    setOpen: (open: boolean) => void\r\n}\r\nexport type SidebarPropsType =  MapStatePropsType & MapDispatchPropsType;","import * as React from 'react';\r\nimport {ErrorInfo} from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<PropsType, StateType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            errorInfo: null\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong</h2>\r\n                    <details style={{whiteSpace: 'pre-wrap'}}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                    </details>\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n//==================== TYPES ========================\r\ntype PropsType = {\r\n\r\n};\r\ntype StateType = {\r\n    error: null | Error\r\n    errorInfo: null | ErrorInfo\r\n}","import React from 'react';\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport MainContainer from \"./Components/Main/MainContainer\";\nimport SidebarContainer from \"./Components/Sidebar/SidebarContainer\";\nimport ErrorBoundary from \"./Components/Common/ErrorBoundary\";\n\nconst App = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <ErrorBoundary>\n                <HeaderContainer/>\n                <SidebarContainer/>\n                <MainContainer/>\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;\n\n//=================== STYLE =======================\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        }\n    }),\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore, Middleware} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\nimport locationsReducer from \"./locations-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer,\r\n    app: appReducer,\r\n    locations: locationsReducer\r\n});\r\n\r\nconst middleware: Array<Middleware> = [thunkMiddleware];\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n//================ TYPE =======================\r\nexport type StateType = ReturnType<typeof rootReducer>\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n\n","import {\r\n    CharacterType,\r\n    EpisodesDataType,\r\n    EpisodeType,\r\n    SearchingEpisodesParamsType\r\n} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\nimport {appAC, AppActionsType} from \"./app-reducer\";\r\n\r\nconst initialState = {\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>,\r\n    showEpisodesFrom: 'all' as 'all' | 'search' | 'character',\r\n    searchingParams: {\r\n        name: '', episode: ''\r\n    },\r\n    aroundId: {prevId: null as null | number, nextId: null as null | number},\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'EPISODES/SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'EPISODES/SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        case 'EPISODES/SET_SHOW_EPISODES_FROM': {\r\n            return {...state, showEpisodesFrom: action.showEpisodesFrom}\r\n        }\r\n        case 'EPISODES/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: action.searchingParams\r\n            }\r\n        }\r\n        case 'EPISODES/SET_AROUND_ID': {\r\n            return {...state, aroundId: {prevId: action.prevId, nextId: action.nextId}}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType | AppActionsType>\r\n\r\nexport const episodesAC = {\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'EPISODES/SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({\r\n        type: 'EPISODES/SET_CURRENT_EPISODE',\r\n        currentEpisode\r\n    } as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'EPISODES/SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const),\r\n    setShowEpisodesFrom: (showEpisodesFrom: 'all' | 'search' | 'character') => ({\r\n        type: 'EPISODES/SET_SHOW_EPISODES_FROM', showEpisodesFrom\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingEpisodesParamsType) => ({\r\n        type: 'EPISODES/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setAroundId: (prevId: number | null, nextId: number | null) => ({\r\n        type: 'EPISODES/SET_AROUND_ID',\r\n        prevId,\r\n        nextId\r\n    } as const),\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount; i++) {  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись ВСЕХ эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(appAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(appAC.toggleLoading(false));\r\n};\r\n\r\nexport const getEpisodesFromSearch = (searchingParams: SearchingEpisodesParamsType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(appAC.toggleLoading(true));\r\n        // 1 - получение числа страниц totalPagesCount\r\n        console.log(searchingParams)\r\n        const resultWithTotalPageCount = await episodesAPI.searchEpisodes(searchingParams);\r\n        const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n        // 2 - получение ВСЕХ эпизодов\r\n        let arrPages = [];\r\n        for (let i = 1; i <= totalPagesCount; i++) {\r\n            arrPages.push(i)\r\n        }\r\n\r\n        const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.searchEpisodes(searchingParams, pageNumber))\r\n        let results = await Promise.all(arrayOfRequests);\r\n        let data = {} as EpisodesDataType;\r\n        data.info = results[0].info;\r\n        let resultsArray = [] as Array<EpisodeType>\r\n        for (let i = 0; i < totalPagesCount; i++) {\r\n            resultsArray = [...resultsArray, ...results[i].results]\r\n        }\r\n        data.results = resultsArray\r\n        // 3 - запись ВСЕХ эпизодов в store\r\n        dispatch(episodesAC.setEpisodes(data));\r\n    } catch (e) {\r\n        const episodesData = {} as EpisodesDataType;\r\n        episodesData.results = []\r\n        episodesData.info = {\r\n            count: 0,\r\n            pages: 1,\r\n            prev: null,\r\n            next: null\r\n        }\r\n        dispatch(episodesAC.setEpisodes(episodesData));\r\n\r\n\r\n\r\n\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport const getAroundId = (targetId: number, change: null | 'prev' | 'next'): ThunkType => async (dispatch, getState) => {\r\n    try {\r\n        /////////// ОБЩЕЕ ////////////////////////////////////////////////////////////////////////\r\n        dispatch(appAC.toggleLoading(true));\r\n        let prevId;\r\n        let nextId;\r\n        const episodes = getState().episodes.episodes;\r\n        // позиция id, на который переходим, целевого, в массиве episodes (т.е. на текущей странице)\r\n        const positionTargetIdInEpisodes = getState().episodes.episodes.findIndex(el => el.id === targetId);// -1 если нет\r\n        /////////////////////////////////////////////////////////////////////////////////////////\r\n        // ОПРЕДЕЛЕНИЕ prevId ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes > 0) {// если целевой ид не первый\r\n            prevId = episodes[positionTargetIdInEpisodes - 1].id\r\n        } else {\r\n            prevId = null\r\n        }\r\n        // ОПРЕДЕЛЕНИЕ nextId //////////////////////////////////////////////////////////////////////////////////////////////\r\n        if (positionTargetIdInEpisodes < episodes.length - 1) { //целевой ид не последний\r\n            nextId = episodes[positionTargetIdInEpisodes + 1].id;\r\n        } else {\r\n            nextId = null;\r\n        }\r\n        dispatch(episodesAC.setAroundId(prevId, nextId));\r\n    } catch\r\n        (e) {\r\n        dispatch(appAC.setLanError(true));\r\n    } finally {\r\n        dispatch(appAC.toggleLoading(false));\r\n    }\r\n};\r\n\r\nexport default episodesReducer;","import {TextField} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst RenderTextField: React.FC<PropsType> = (props) => {\r\n    const { label, input, meta: {touched, invalid, error}, ...custom} = props;\r\n\r\n    return (\r\n        <TextField\r\n            label={label}\r\n            placeholder={label}\r\n            error={touched && invalid}\r\n            helperText={touched && error}\r\n            {...input}\r\n            {...custom}/>\r\n        );\r\n};\r\n\r\nexport default RenderTextField;\r\n\r\n//================== TYPES ====================\r\ntype PropsType = {\r\n    label: string\r\n    input: any\r\n    meta: {\r\n        touched: boolean\r\n        invalid: boolean\r\n        error: string\r\n    }\r\n\r\n}"],"sourceRoot":""}