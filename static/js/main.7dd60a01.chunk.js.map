{"version":3,"sources":["Components/Header/Header.tsx","Components/Sidebar/SidebarItem/SidebarItem.tsx","store/sidebar-reducer.ts","Components/Sidebar/SidebarItem/SidebarItemContainer.tsx","Components/Sidebar/Sidebar.tsx","Components/Main/Locations/Locations.tsx","Components/Main/Episodes/Episode/Episode.tsx","Components/Main/Episodes/Episodes.tsx","Components/Main/Characters/Character/Character.tsx","Components/Common/Paginator/Paginator.tsx","Components/Main/Characters/SearchCharacters/SearchCharacters.jsx","DAL/api.ts","store/characters-reducer.ts","Components/Main/Characters/SearchCharacters/SearchCharactersContainer.tsx","Components/Main/Characters/Characters.tsx","Components/Main/Characters/CharactersContainer.tsx","Components/Main/Characters/CharacterInfo/CharacterInfo.tsx","Components/Main/Characters/CharacterInfo/CharacterInfoContainer.tsx","store/episodes-reducer.ts","Components/Main/Episodes/EpisodesContainer.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfo.tsx","Components/Main/Episodes/EpisodeInfo/EpisodeInfoContainer.tsx","Components/Main/Main.jsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","appBar","zIndex","drawer","Header","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","SidebarItem","to","primary","icon","currentItem","ownIndex","setCurrentItem","ListItem","onClick","selected","button","component","RouterLink","color","initialState","type","sidebarReducer","state","action","SidebarItemContainer","connect","sidebar","width","flexShrink","drawerPaper","drawerContainer","overflow","Sidebar","Drawer","paper","List","Locations","paragraph","chip","marginBottom","ListItemLink","props","renderLink","React","useMemo","forwardRef","itemProps","ref","Episode","episode","id","name","Episodes","episodes","currentPage","totalPagesCount","getEpisodes","episodesElements","setCurrentEpisode","map","item","key","useEffect","root","media","height","Character","character","Grid","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","marginTop","spacing","Paginator","totalPaginatorPagesCount","onPaginatorItemClick","Pagination","onChange","event","page","showFirstButton","showLastButton","count","shape","RenderTextField","label","input","meta","touched","invalid","error","custom","TextField","placeholder","helperText","RenderSelectField","children","FormControl","InputLabel","htmlFor","Select","native","inputProps","field","marginRight","textTransform","ReduxSearchCharactersForm","reduxForm","form","validate","values","empty","str","test","errors","species","gender","_error","console","log","handleSubmit","submitting","pristine","reset","onSubmit","Field","size","value","Button","startIcon","disabled","SearchCharacters","setShowCharactersFromSearch","setSearchingParams","setCurrentPage","formValue","instance","axios","create","baseURL","charactersAPI","get","response","data","url","searchingParams","status","episodesAPI","initialized","characters","totalCharactersCount","currentCharacter","currentCharacterId","next","prev","isLoading","showCharactersFromSearch","searchError","episodesOfCurrentCharacter","charactersAC","charactersData","charactersReducer","results","info","pages","SearchCharactersContainer","Characters","getCharacters","getCharactersFromSearch","useState","panelIsOpen","setPanelIsOpen","charactersElements","totalOutputCount","Collapse","in","timeout","unmountOnExit","Badge","badgeContent","max","CircularProgress","container","alignContent","justify","wrap","CharactersContainer","dispatch","a","buttons","card","borderRadius","boxShadow","withStyles","backgroundColor","palette","hover","TableRow","TableRowCustom","ceilLeftContent","ceilRightContent","TableCell","CharacterInfo","match","getCurrentCharacter","setCurrentCharacterId","params","localeCurrentCharacterId","setLocaleCurrentCharacterId","idNext","idPrev","endIcon","TableContainer","Paper","Table","TableBody","origin","location","CharacterInfoContainer","compose","getCurrentCharacterResponse","arrayOfRequests","episodeUrl","Promise","all","withRouter","totalEpisodesCount","currentEpisode","charactersOfCurrentEpisode","episodesAC","episodesData","episodesReducer","EpisodesContainer","getState","resultWithTotalPageCount","arrPages","i","push","pageNumber","resultsArray","margin","padding","paddingRight","avatar","EpisodeInfo","getCurrentEpisode","toLocaleLowerCase","air_date","Avatar","alt","src","EpisodeInfoContainer","getCurrentEpisodeResponse","content","flexGrow","Main","exact","path","render","display","App","Boolean","window","hostname","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7dd60a01.chunk.js","sourcesContent":["import React from 'react';\r\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" noWrap>\r\n                    Rick and Morty DB\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {Link as RouterLink} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\ntype PropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    currentItem: number\r\n    ownIndex: number\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\n\r\nconst SidebarItem: React.FC<PropsType> = ({to, primary, icon, currentItem, ownIndex, setCurrentItem}) => {\r\n    const onClick = () => {\r\n        setCurrentItem(ownIndex);\r\n    }\r\n\r\n    return (\r\n        <li>\r\n        <ListItem\r\n            onClick={onClick}\r\n            selected={ownIndex === currentItem}\r\n            button\r\n            component={RouterLink}\r\n            to={to}>\r\n            {icon ? <ListItemIcon color='primary'>\r\n                {icon}\r\n            </ListItemIcon> : null}\r\n            <ListItemText primary={primary}/>\r\n        </ListItem>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default SidebarItem;","const SET_CURRENT_ITEM = 'SIDEBAR/SET_CURRENT_ITEM';\r\n\r\nlet initialState = {\r\n    currentItem: 0\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_ITEM: {\r\n            return {...state, currentItem: action.currentItem}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype setCurrentItemType = {\r\n    type: typeof SET_CURRENT_ITEM\r\n    currentItem: number\r\n}\r\n\r\nexport const setCurrentItem = (currentItem: number): setCurrentItemType => ({type: SET_CURRENT_ITEM, currentItem});\r\n\r\nexport default sidebarReducer;","import {connect} from \"react-redux\";\r\n\r\nimport SidebarItem from \"./SidebarItem\";\r\nimport {setCurrentItem} from \"../../../store/sidebar-reducer\";\r\nimport React from \"react\";\r\nimport {StateType} from \"../../../store/store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentItem: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n    to: string\r\n    primary: string\r\n    icon?: React.ReactElement\r\n    ownIndex: number\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentItem: state.sidebar.currentItem\r\n});\r\n\r\nconst SidebarItemContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, StateType>\r\n(mapStateToProps, {setCurrentItem})(SidebarItem);\r\n\r\nexport default SidebarItemContainer;\r\n\r\n","import React, {useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport MovieIcon from '@material-ui/icons/Movie';\r\nimport SidebarItemContainer from \"./SidebarItem/SidebarItemContainer\";\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n}));\r\n\r\nconst Sidebar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <Toolbar/>\r\n\r\n            <div className={classes.drawerContainer}>\r\n\r\n                <List>\r\n                    <SidebarItemContainer ownIndex={1} to={\"/characters\"} primary={'Characters'} icon={<PersonIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={2} to={\"/locations\"} primary={'Locations'} icon={<RoomIcon/>}/>\r\n                    <SidebarItemContainer ownIndex={3} to={\"/episodes\"} primary={'Episodes'} icon={<MovieIcon/>}/>\r\n                </List>\r\n\r\n            </div>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\n\r\nconst Locations = () => {\r\n    return (\r\n        <Typography paragraph>\r\n            Locations\r\n        </Typography>\r\n    )\r\n};\r\n\r\nexport default Locations;","import React from \"react\";\r\nimport {EpisodeType} from \"../../../../Types/Types\";\r\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    chip: {\r\n        marginBottom: 5,\r\n    },\r\n});\r\n\r\ntype PropsType = {\r\n    episode: EpisodeType\r\n}\r\n\r\nconst onClick = () => {\r\n\r\n};\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: any) {\r\n    const { icon, primary, to } = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                <ListItemText primary={primary} />\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst Episode = (props: PropsType) => {\r\n    const classes = useStyles();\r\n    const {episode} = props;\r\n    return (\r\n        <ListItemLink\r\n                  to={`/episodes/${episode.id}`}\r\n                  primary={`${episode.episode} - ${episode.name}`}>\r\n            {/*<Chip label={`${episode.episode} - ${episode.name}`}*/}\r\n            {/*      clickable*/}\r\n            {/*      variant='outlined'*/}\r\n            {/*      className={classes.chip}*/}\r\n            {/*      onClick={onClick}*/}\r\n            {/*      component={RouterLink}*/}\r\n            {/*      to={`/episodes/${episode.id}`}*/}\r\n            {/*      color=\"primary\"/>*/}\r\n            {/*<Button color=\"primary\"*/}\r\n            {/*        variant='outlined'*/}\r\n            {/*        component={RouterLink}*/}\r\n            {/*        to={`/episodes/${episode.id}`}>*/}\r\n            {/*    {`${episode.episode} - ${episode.name}`}*/}\r\n            {/*</Button>*/}\r\n        </ListItemLink>\r\n    )\r\n};\r\n\r\nexport default Episode;","import Typography from \"@material-ui/core/Typography\";\r\nimport React, {useEffect} from \"react\";\r\nimport {EpisodeType} from \"../../../Types/Types\";\r\nimport Episode from \"./Episode/Episode\";\r\nimport {List} from \"@material-ui/core\";\r\n\r\ntype PropTypes = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    getEpisodes: (currentPage: number) => void\r\n    setCurrentEpisode: (currentPage: number) => void\r\n}\r\n\r\nconst Episodes: React.FC<PropTypes> = (props) => {\r\n    const {episodes, totalPagesCount, currentPage, getEpisodes, setCurrentEpisode} = props;\r\n    let episodesElements = episodes.map(item => <Episode key={item.id} episode={item}/>);\r\n    useEffect(() => {\r\n        getEpisodes(currentPage);\r\n    }, [currentPage]);\r\n    return (\r\n        <List>\r\n            {episodesElements}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default Episodes;\r\n","import React from \"react\";\r\nimport {CharacterType} from \"../../../../Types/Types\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\ntype PropTypes = {\r\n    character: CharacterType\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 150,\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n});\r\n\r\nconst Character: React.FC<PropTypes> = ({character}) => {\r\n    const classes = useStyles();\r\n    const onClick = () => {\r\n\r\n    }\r\n    return (\r\n        <Grid item>\r\n            <Card className={classes.root}>\r\n                <CardActionArea component={RouterLink}\r\n                onClick={onClick}\r\n                                to={`characters/${character.id}`}>\r\n                    <CardMedia className={classes.media}\r\n                               image={character.image}\r\n                    />\r\n                </CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"body2\" component=\"h6\">\r\n                        {character.name}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default Character;\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { createStyles } from '@material-ui/core';\r\nimport {Pagination} from \"@material-ui/lab\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                marginTop: theme.spacing(2),\r\n                marginBottom: theme.spacing(2),\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\ntype PropsType = {\r\n    totalPaginatorPagesCount: number\r\n    currentPage: number\r\n    onPaginatorItemClick: (currentPage: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props: any) => {\r\n    const {totalPaginatorPagesCount, onPaginatorItemClick, currentPage} = props\r\n    const classes = useStyles();\r\n    const onChange = (event: ChangeEvent<unknown>, currentPage: number) => {\r\n        onPaginatorItemClick(currentPage);\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n           <Pagination onChange={onChange}\r\n                       page={currentPage}\r\n                       showFirstButton\r\n                       showLastButton\r\n                       count={totalPaginatorPagesCount}\r\n                       variant=\"outlined\"\r\n                       shape=\"rounded\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;\r\n\r\n","import React from 'react';\r\nimport {Button, TextField, Typography} from \"@material-ui/core\";\r\nimport {reduxForm, Field} from 'redux-form'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n///////////////////////////////////////////////////////////////\r\nconst RenderTextField = ({\r\n                             label,\r\n                             input,\r\n                             meta: {touched, invalid, error},\r\n                             ...custom\r\n                         }) => (\r\n\r\n    <TextField\r\n        label={label}\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n        {...input}\r\n        {...custom}\r\n    />\r\n\r\n\r\n);\r\n\r\n/////////////////////////////////////////////////////////////\r\nconst RenderSelectField = ({\r\n                               input,\r\n                               label,\r\n                               meta: {touched, error},\r\n                               children,\r\n                               ...custom\r\n                           }) => (\r\n    <FormControl>\r\n        <InputLabel htmlFor={label}>{label}</InputLabel>\r\n        <Select\r\n            native\r\n            {...input}\r\n            {...custom}\r\n            inputProps={{\r\n                name: label,\r\n                id: label\r\n            }}\r\n        >\r\n            {children}\r\n        </Select>\r\n\r\n    </FormControl>\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n    field: {\r\n        marginRight: 10,\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n        marginRight: 10\r\n    }\r\n});\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\nconst SearchCharactersForm = (props) => {\r\n    const classes = useStyles();\r\n    const {handleSubmit, submitting, pristine, reset, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name='name' component={RenderTextField} label='Name' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='species' component={RenderTextField} label='Species' variant=\"outlined\" size='small'\r\n                       className={classes.field}/>\r\n                <Field name='type' component={RenderTextField} label='Type' variant=\"outlined\" size='small'/>\r\n            </div>\r\n            <div>\r\n                <Field name='status' className={classes.field} component={RenderSelectField} label='Status'>\r\n                    <option value={''}></option>\r\n                    <option value={'alive'}>Alive</option>\r\n                    <option value={'dead'}>Dead</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n                <Field name='gender' component={RenderSelectField} label='Gender'>\r\n                    <option value={''}></option>\r\n                    <option value={'female'}>Female</option>\r\n                    <option value={'male'}>Male</option>\r\n                    <option value={'genderless'}>Genderless</option>\r\n                    <option value={'unknown'}>Unknown</option>\r\n                </Field>\r\n            </div>\r\n\r\n            <Button type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SearchIcon/>}\r\n                    disabled={submitting || pristine}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Search\r\n            </Button>\r\n            <Button type=\"button\"\r\n                    variant=\"contained\"\r\n                    disabled={pristine || submitting}\r\n                    onClick={reset}\r\n                    className={`${classes.field} ${classes.button}`}>\r\n                Clear Values\r\n            </Button>\r\n            {error && !pristine &&\r\n            <Typography color='error' variant='h6'>\r\n                {error}\r\n            </Typography>}\r\n\r\n        </form>\r\n    )\r\n};\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\nconst validate = (values) => {\r\n    const empty = (str) => /^\\s+$/.test(str)\r\n    let errors = {};\r\n    if (empty(values.name) && values.name !== '') {\r\n        errors.name = 'name field is empty'\r\n    }\r\n    if (empty(values.species) && values.species !== '') {\r\n        errors.species = 'species field is empty'\r\n    }\r\n    if (empty(values.type) && values.type !== '') {\r\n        errors.type = 'type field is empty'\r\n    }\r\n    if ((!values.name || empty(values.name)) &&\r\n        !values.gender && !values.gender\r\n        && (!values.species || empty(values.species)) &&\r\n        (!values.type || empty(values.type))) {\r\n        errors._error = 'At least one member must be entered';\r\n    }\r\n    console.log(errors)\r\n    return errors\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nconst ReduxSearchCharactersForm = reduxForm({\r\n    form: 'searchCharacters',\r\n    validate\r\n})(SearchCharactersForm);\r\n\r\nconst SearchCharacters = (props) => {\r\n    const {setShowCharactersFromSearch, setSearchingParams, setCurrentPage} = props;\r\n\r\n    const onSubmit = (formValue) => {\r\n        // if (в форму введены валидные данный) {\r\n        // setSearchingParams(formValue)\r\n        // setShowCharactersFromSearch(true);\r\n        // }\r\n\r\n        console.log(formValue)\r\n        setCurrentPage(1)\r\n        setSearchingParams(formValue)\r\n        setShowCharactersFromSearch(true);\r\n\r\n    }\r\n    return (\r\n        <ReduxSearchCharactersForm onSubmit={onSubmit}/>\r\n    )\r\n};\r\n\r\nexport default SearchCharacters","import axios from \"axios\";\r\nimport {CharactersDataType, CharacterType, EpisodesDataType, EpisodeType, SearchingParamsType} from \"../Types/Types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rickandmortyapi.com/api/'\r\n});\r\n\r\nexport const charactersAPI = {\r\n    async getCharacters(currentPage = 1) {\r\n        let response = await instance.get<CharactersDataType>(`character/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCharacterByUrl(url: string) {\r\n        let response = await axios.get<CharacterType>(url);\r\n        return response.data\r\n    },\r\n    async getCurrentCharacter(id: number) {\r\n        let response = await instance.get<CharacterType>(`character/${id}`);\r\n        return response.data\r\n    },\r\n\r\n    async searchCharacters(searchingParams: SearchingParamsType, currentPage: number) {\r\n        let str = '';\r\n        if (searchingParams.name) str = `${str}name=${searchingParams.name}`;\r\n        if (searchingParams.gender) str = `${str}&gender=${searchingParams.gender}`;\r\n        if (searchingParams.status) str = `${str}&status=${searchingParams.status}`;\r\n        if (searchingParams.species) str = `${str}&species=${searchingParams.species}`;\r\n        if (searchingParams.type) str = `${str}&type=${searchingParams.type}`;\r\n        str = `${str}&page=${currentPage}`\r\n        let response = await instance.get<CharactersDataType>(`character/?${str}`);\r\n        console.log(response)\r\n        return response.data\r\n    }\r\n};\r\n\r\nexport const episodesAPI = {\r\n    async getEpisodes(currentPage = 1) {\r\n        let response = await instance.get<EpisodesDataType>(`episode/?page=${currentPage}`);\r\n        return response.data\r\n    },\r\n    async getCurrentEpisode(id: number) {\r\n        let response = await instance.get<EpisodeType>(`episode/${id}`);\r\n        return response.data\r\n    },\r\n    async getEpisodesByUrl(url: string) {\r\n        let response = await axios.get<EpisodeType>(url);\r\n        return response.data\r\n    }\r\n};","import {CharactersDataType, CharacterType, EpisodeType, InfoType, SearchingParamsType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    initialized: false, // нужен?\r\n    characters: [] as Array<CharacterType>, // персонажи на одной текущей странице (<=20)\r\n    totalCharactersCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentCharacter: null as CharacterType | null | undefined,\r\n    currentCharacterId: null as null | number,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    showCharactersFromSearch: false,\r\n    searchingParams: {\r\n        name: '', gender: '', status: '', species: '', type: ''\r\n    },\r\n    searchError: false,\r\n    episodesOfCurrentCharacter: null as null | Array<EpisodeType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst charactersReducer = (state = initialState, action: CharactersActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CHARACTERS/TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'CHARACTERS/SET_CHARACTERS': {\r\n            return {\r\n                ...state,\r\n                characters: action.charactersData.results,\r\n                totalCharactersCount: action.charactersData.info.count,\r\n                totalPagesCount: action.charactersData.info.pages,\r\n                next: action.charactersData.info.next,\r\n                prev: action.charactersData.info.prev\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER': {\r\n            return {...state, currentCharacter: action.currentCharacter}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_CHARACTER_ID': {\r\n            return {...state, currentCharacterId: action.currentCharacterId}\r\n        }\r\n        case 'CHARACTERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'CHARACTERS/SET_SHOW_CHARACTERS_FROM_SEARCH': {\r\n            return {...state, showCharactersFromSearch: action.showCharactersFromSearch}\r\n        }\r\n        case 'CHARACTERS/SET_SEARCHING_PARAMS': {\r\n            return {\r\n                ...state, searchingParams: {...state.searchingParams, ...action.searchingParams}\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_SEARCH_ERROR': {\r\n            return {\r\n                ...state, searchError: action.searchError\r\n            }\r\n        }\r\n        case 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER': {\r\n            return {\r\n                ...state, episodesOfCurrentCharacter: action.episodesOfCurrentCharacter\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const charactersAC = {\r\n    setInitialized: () => ({type: 'SET_INITIALIZED'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'CHARACTERS/TOGGLE_LOADING', isLoading} as const),\r\n    setCharacters: (charactersData: CharactersDataType) => ({\r\n        type: 'CHARACTERS/SET_CHARACTERS',\r\n        charactersData\r\n    } as const),\r\n    setCurrentCharacter: (currentCharacter: CharacterType) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER',\r\n        currentCharacter\r\n    } as const),\r\n    setCurrentCharacterId: (currentCharacterId: number) => ({\r\n        type: 'CHARACTERS/SET_CURRENT_CHARACTER_ID',\r\n        currentCharacterId\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'CHARACTERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => ({\r\n        type: 'CHARACTERS/SET_SHOW_CHARACTERS_FROM_SEARCH',\r\n        showCharactersFromSearch\r\n    } as const),\r\n    setSearchingParams: (searchingParams: SearchingParamsType) => ({\r\n        type: 'CHARACTERS/SET_SEARCHING_PARAMS',\r\n        searchingParams\r\n    } as const),\r\n    setSearchError: (searchError: boolean) => ({type: 'CHARACTERS/SET_SEARCH_ERROR', searchError} as const),\r\n    setEpisodesOfCurrentCharacter: (episodesOfCurrentCharacter: Array<EpisodeType>) => ({\r\n        type: 'CHARACTERS/SET_EPISODES_OF_CURRENT_CHARACTER',\r\n        episodesOfCurrentCharacter\r\n    } as const)\r\n};\r\n\r\ntype CharactersActionsType = GetActionsType<typeof charactersAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, CharactersActionsType>\r\n\r\nexport const getCharacters = (currentPage: number): ThunkType => async (dispatch) => {\r\n    dispatch(charactersAC.toggleLoading(true));\r\n    let data = await charactersAPI.getCharacters(currentPage);\r\n    dispatch(charactersAC.setCharacters(data));\r\n    dispatch(charactersAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentCharacter = (id: number): ThunkType => async (dispatch) => {\r\n    dispatch(charactersAC.toggleLoading(true));\r\n    let getCurrentCharacterResponse = await charactersAPI.getCurrentCharacter(id);\r\n    dispatch(charactersAC.setCurrentCharacter(getCurrentCharacterResponse));\r\n    // получение информации о эпизодах, относящихся к текущему характеру:\r\n    // в currentCharacter содержится только массив ссылок на эпизоды\r\n    const arrayOfRequests = getCurrentCharacterResponse.episode.map(episodeUrl => episodesAPI.getEpisodesByUrl(episodeUrl))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(charactersAC.setEpisodesOfCurrentCharacter(results));\r\n\r\n    dispatch(charactersAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCharactersFromSearch = (searchingParams: SearchingParamsType, currentPage: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(charactersAC.toggleLoading(true));\r\n        let data = await charactersAPI.searchCharacters(searchingParams, currentPage);\r\n        dispatch(charactersAC.setSearchError(false))\r\n        dispatch(charactersAC.setCharacters(data));\r\n    } catch (e) {\r\n        console.log('error')\r\n        // console.log(data)\r\n        dispatch(charactersAC.setSearchError(true));\r\n    } finally {\r\n        dispatch(charactersAC.toggleLoading(false));\r\n    }\r\n}\r\n\r\nexport default charactersReducer;","import SearchCharacters from \"./SearchCharacters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC} from \"../../../../store/characters-reducer\";\r\nimport {SearchingParamsType} from \"../../../../Types/Types\";\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n\r\n});\r\n\r\nconst setShowCharactersFromSearch = charactersAC.setShowCharactersFromSearch;\r\nconst setSearchingParams = charactersAC.setSearchingParams;\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\n\r\nconst SearchCharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {setShowCharactersFromSearch, setSearchingParams, setCurrentPage})(SearchCharacters);\r\n\r\ntype MapStatePropsType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    setSearchingParams: (searchingParams: SearchingParamsType) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n\r\n}\r\n\r\nexport default SearchCharactersContainer;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CharacterType, SearchingParamsType} from \"../../../Types/Types\";\r\nimport Character from \"./Character/Character\";\r\nimport Paginator from \"../../Common/Paginator/Paginator\";\r\nimport {Badge, CircularProgress, Collapse, Typography} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchCharactersContainer from \"./SearchCharacters/SearchCharactersContainer\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport SearchIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PeopleIcon from '@material-ui/icons/People';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginRight: 10,\r\n        textTransform: 'none'\r\n    },\r\n    count: {\r\n        marginTop: 20,\r\n        marginBottom: 20\r\n    }\r\n});\r\n\r\ntype PropTypes = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    showCharactersFromSearch: boolean\r\n    searchingParams: SearchingParamsType\r\n    isLoading: boolean\r\n    searchError: boolean\r\n    totalCharactersCount: number\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingParamsType, currentPage: number) => void\r\n}\r\n\r\nconst Characters: React.FC<PropTypes> = (props: PropTypes) => {\r\n    const {\r\n        characters, totalPagesCount, currentPage, totalCharactersCount,\r\n        getCharacters, setCurrentPage, searchError,\r\n        showCharactersFromSearch, setShowCharactersFromSearch,\r\n        getCharactersFromSearch, searchingParams, isLoading\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    const [panelIsOpen, setPanelIsOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!showCharactersFromSearch) {\r\n            getCharacters(currentPage);\r\n        } else {\r\n            getCharactersFromSearch(searchingParams, currentPage)\r\n        }\r\n\r\n    }, [currentPage, searchingParams.status, searchingParams.species,\r\n        searchingParams.name, searchingParams.gender, searchingParams.type, showCharactersFromSearch]);\r\n\r\n    let charactersElements = characters.map(item => <Character key={item.id}\r\n                                                               character={item}/>);\r\n\r\n    const onPaginatorItemClick = (currentPage: number) => {\r\n        setCurrentPage(currentPage);\r\n    };\r\n\r\n    const onSearchCharactersClick = () => {\r\n        setPanelIsOpen(!panelIsOpen);\r\n    };\r\n\r\n    const onShowAllClick = () => {\r\n        setShowCharactersFromSearch(false)\r\n        setCurrentPage(1);\r\n    }\r\n\r\n    let totalOutputCount = searchError ? 0 : totalCharactersCount;\r\n\r\n    return (\r\n        <>\r\n            <Collapse in={panelIsOpen} timeout=\"auto\" unmountOnExit>\r\n                <SearchCharactersContainer/>\r\n            </Collapse>\r\n            <Button onClick={onSearchCharactersClick}\r\n                    className={classes.button}\r\n                    startIcon={panelIsOpen ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    variant='contained'>\r\n                {panelIsOpen ? 'Close search' : 'Open search'}\r\n            </Button>\r\n            <Button onClick={onShowAllClick}\r\n                    className={classes.button}\r\n                    variant='contained'>\r\n                Show all\r\n            </Button>\r\n\r\n            <div className={classes.count}>\r\n                {`Total characters count: `}\r\n                <Badge badgeContent={totalOutputCount} color=\"primary\" max={99999}>\r\n                    <PeopleIcon/>\r\n                </Badge>\r\n            </div>\r\n\r\n\r\n            {searchError ? null : <Paginator totalPaginatorPagesCount={totalPagesCount}\r\n                                             onPaginatorItemClick={onPaginatorItemClick}\r\n                                             currentPage={currentPage}\r\n            />}\r\n            {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                searchError ? null :\r\n                    <Grid container alignContent='stretch' justify='space-between' wrap='wrap' spacing={1}>\r\n                        {charactersElements}\r\n                    </Grid>}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default Characters;\r\n","import Characters from \"./Characters\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport {CharacterType, SearchingParamsType} from \"../../../Types/Types\";\r\nimport {charactersAC, getCharacters, getCharactersFromSearch} from \"../../../store/characters-reducer\";\r\nimport React from \"react\";\r\n\r\ntype MapStatePropsType = {\r\n    characters: Array<CharacterType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n    showCharactersFromSearch: boolean\r\n    searchingParams: SearchingParamsType\r\n    isLoading: boolean\r\n    searchError: boolean\r\n    totalCharactersCount: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCharacters: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setShowCharactersFromSearch: (showCharactersFromSearch: boolean) => void\r\n    getCharactersFromSearch: (searchingParams: SearchingParamsType, currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    characters: state.characters.characters,\r\n    totalPagesCount: state.characters.totalPagesCount,\r\n    currentPage: state.characters.currentPage,\r\n    showCharactersFromSearch: state.characters.showCharactersFromSearch,\r\n    searchingParams: state.characters.searchingParams,\r\n    isLoading: state.characters.isLoading,\r\n    searchError: state.characters.searchError,\r\n    totalCharactersCount: state.characters.totalCharactersCount\r\n    });\r\n\r\nconst setCurrentPage = charactersAC.setCurrentPage;\r\nconst setShowCharactersFromSearch = charactersAC.setShowCharactersFromSearch\r\n\r\nconst CharactersContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {getCharacters, setCurrentPage, setShowCharactersFromSearch, getCharactersFromSearch})(Characters);\r\n\r\nexport default CharactersContainer;","import * as React from \"react\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardMedia,\r\n    CircularProgress, createStyles,\r\n    Grid, List, ListItem,\r\n    Paper,\r\n    Table, TableBody, TableCell,\r\n    TableContainer,\r\n    TableRow, Theme, withStyles\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps} from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\n\r\nconst useStyles = makeStyles({\r\n    buttons: {\r\n        marginTop: 5,\r\n        marginBottom: 20\r\n    },\r\n    button: {\r\n        textTransform: 'none',\r\n    },\r\n    card: {\r\n        width: 300,\r\n        borderRadius: 5,\r\n        boxShadow: '5px 5px 5px 0px rgba(0, 0, 0, .5)',\r\n        marginBottom: 10\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n    paper: {\r\n        width: 300,\r\n    },\r\n    image: {},\r\n});\r\n\r\nfunction ListItemLink(props: any) {\r\n    const { icon, primary, to } = props;\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n    return (\r\n        <li>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <Typography color='primary' variant='h6'>\r\n                    <ListItemText primary={primary} />\r\n                </Typography>\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }),\r\n)(TableRow);\r\n\r\ntype PropsType = {\r\n    currentCharacter: CharacterType\r\n    totalCharactersCount: number\r\n    isLoading: boolean\r\n    currentCharacterId: number\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentCharacterId: (id: number) => void\r\n    match: any\r\n    episodesOfCurrentCharacter: Array<EpisodeType>\r\n}\r\n\r\nconst TableRowCustom = (ceilLeftContent: string, ceilRightContent: string) => {\r\n    return (\r\n        <TableRow>\r\n            <TableCell>{ceilLeftContent}</TableCell>\r\n            <TableCell>{ceilRightContent}</TableCell>\r\n        </TableRow>\r\n    )\r\n};\r\n\r\nconst CharacterInfo: React.FC<PropsType> = (props) => {\r\n    const {\r\n        currentCharacter, totalCharactersCount, match, currentCharacterId,\r\n        getCurrentCharacter, isLoading, setCurrentCharacterId, episodesOfCurrentCharacter\r\n    } = props;\r\n\r\n    const classes = useStyles();\r\n    let id = +match.params.id;\r\n\r\n    const [localeCurrentCharacterId, setLocaleCurrentCharacterId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setLocaleCurrentCharacterId(id);\r\n        getCurrentCharacter(id);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (localeCurrentCharacterId) {\r\n            getCurrentCharacter(localeCurrentCharacterId);\r\n        }\r\n    }, [localeCurrentCharacterId]);\r\n\r\n    const onClickPrev = () => {\r\n        setLocaleCurrentCharacterId(localeCurrentCharacterId - 1);\r\n    }\r\n\r\n    const onClickNext = () => {\r\n        setLocaleCurrentCharacterId(localeCurrentCharacterId + 1);\r\n    }\r\n    let idNext = id + 1;\r\n    let idPrev = id - 1;\r\n\r\n    return (\r\n        <div>\r\n            {currentCharacter &&\r\n            <div>\r\n                <Grid container justify='space-between' className={classes.buttons}>\r\n                    <Button\r\n                        onClick={onClickPrev}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters/${idPrev}`}\r\n                        disabled={(currentCharacter.id === 1) || isLoading} //\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<ArrowBackIcon/>}\r\n                    >\r\n                        Previous character\r\n                    </Button>\r\n\r\n                    <Button\r\n                        disabled={isLoading}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters`}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        startIcon={<PeopleIcon/>}\r\n                    >\r\n                        Back to characters\r\n                    </Button>\r\n\r\n                    <Button\r\n                        onClick={onClickNext}\r\n                        className={classes.button}\r\n                        component={RouterLink}\r\n                        to={`/characters/${idNext}`}\r\n                        disabled={(currentCharacter.id === totalCharactersCount) || isLoading}\r\n                        variant=\"contained\"\r\n                        color=\"default\"\r\n                        size=\"medium\"\r\n                        endIcon={<ArrowForwardIcon/>}\r\n                    >\r\n                        Next character\r\n                    </Button>\r\n                </Grid>\r\n\r\n                {isLoading ? <CircularProgress size={100} color={'secondary'}/> :\r\n                    <div>\r\n                        <Card className={classes.card}>\r\n                            <CardMedia\r\n                                className={classes.media}\r\n                                image={currentCharacter.image}/>\r\n                        </Card>\r\n                        <TableContainer component={Paper}>\r\n                            <Table>\r\n                                <TableBody>\r\n                                    {TableRowCustom('Name', currentCharacter.name)}\r\n                                    {TableRowCustom('Gender', currentCharacter.gender)}\r\n                                    {TableRowCustom('Status', currentCharacter.status)}\r\n                                    {TableRowCustom('Species', currentCharacter.species)}\r\n                                    {currentCharacter.type && TableRowCustom('Subspecies', currentCharacter.type)}\r\n                                    {TableRowCustom('Origin location', currentCharacter.origin.name)}\r\n                                    {TableRowCustom('Last known location endpoint', currentCharacter.location.name)}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <List>\r\n                            {episodesOfCurrentCharacter.map(episode => <ListItemLink\r\n                                to={`/episodes/${episode.id}`}\r\n                                primary={`${episode.episode} - ${episode.name}`}>\r\n                            </ListItemLink> )}\r\n                        </List>\r\n                    </div>\r\n\r\n\r\n                }\r\n\r\n\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CharacterInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport CharacterInfo from \"./CharacterInfo\";\r\nimport {Link as RouterLink, LinkProps as RouterLinkProps, withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {charactersAC, getCurrentCharacter} from \"../../../../store/characters-reducer\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport React from \"react\";\r\nimport {ListItem} from \"@material-ui/core\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon/ListItemIcon\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\n\r\ntype MapStatePropsType = {\r\n    currentCharacter: CharacterType | undefined | null\r\n    totalCharactersCount: number\r\n    isLoading: boolean\r\n    currentCharacterId: number | null\r\n    episodesOfCurrentCharacter: Array<EpisodeType> | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentCharacter: (id: number) => void\r\n    setCurrentCharacterId: (id: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentCharacter: state.characters.currentCharacter,\r\n    totalCharactersCount: state.characters.totalCharactersCount,\r\n    isLoading: state.characters.isLoading,\r\n    currentCharacterId: state.characters.currentCharacterId,\r\n    episodesOfCurrentCharacter: state.characters.episodesOfCurrentCharacter\r\n});\r\n\r\nconst setCurrentCharacterId = charactersAC.setCurrentCharacterId;\r\n\r\nconst CharacterInfoContainer = compose(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps,\r\n    {getCurrentCharacter, setCurrentCharacterId}), withRouter)(CharacterInfo);\r\n\r\nexport default CharacterInfoContainer;","import {CharacterType, EpisodesDataType, EpisodeType, InfoType} from \"../Types/Types\";\r\nimport {GetActionsType, StateType} from \"./store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {charactersAPI, episodesAPI} from \"../DAL/api\";\r\n\r\nconst initialState = {\r\n    initialized: false, // нужен?\r\n    episodes: [] as Array<EpisodeType>,\r\n    totalEpisodesCount: 0, // нужен?\r\n    totalPagesCount: 0,\r\n    currentPage: 1,\r\n    currentEpisode: {} as EpisodeType,\r\n    next: null as string | null,\r\n    prev: null as string | null,\r\n    isLoading: false,\r\n    charactersOfCurrentEpisode: null as null | Array<CharacterType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst episodesReducer = (state = initialState, action: EpisodesActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_LOADING': {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case 'SET_EPISODES': {\r\n            return {\r\n                ...state,\r\n                episodes: action.episodesData.results,\r\n                totalEpisodesCount: action.episodesData.info.count,\r\n                totalPagesCount: action.episodesData.info.pages,\r\n                next: action.episodesData.info.next,\r\n                prev: action.episodesData.info.prev\r\n            }\r\n        }\r\n        case 'SET_CURRENT_EPISODE': {\r\n            return {...state, currentEpisode: action.currentEpisode}\r\n        }\r\n        case 'SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SET_CHARACTERS_OF_CURRENT_EPISODE': {\r\n            return {...state, charactersOfCurrentEpisode: action.charactersOfCurrentEpisode}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype EpisodesActionsType = GetActionsType<typeof episodesAC>\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, EpisodesActionsType>\r\n\r\nexport const episodesAC = {\r\n    setInitialized: () => ({type: 'SET_INITIALIZED'} as const),\r\n    toggleLoading: (isLoading: boolean) => ({type: 'TOGGLE_LOADING', isLoading} as const),\r\n    setEpisodes: (episodesData: EpisodesDataType) => ({type: 'SET_EPISODES', episodesData} as const),\r\n    setCurrentEpisode: (currentEpisode: EpisodeType) => ({type: 'SET_CURRENT_EPISODE', currentEpisode} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SET_CURRENT_PAGE', currentPage} as const),\r\n    setCharactersOfCurrentEpisode: (charactersOfCurrentEpisode: Array<CharacterType>) => ({\r\n        type: 'SET_CHARACTERS_OF_CURRENT_EPISODE',\r\n        charactersOfCurrentEpisode\r\n    } as const)\r\n}\r\n\r\n\r\nexport const getEpisodes = (): ThunkType => async (dispatch, getState) => {\r\n    dispatch(episodesAC.toggleLoading(true));\r\n    // 1 - получение числа страниц totalPagesCount\r\n    const resultWithTotalPageCount = await episodesAPI.getEpisodes();\r\n    const totalPagesCount = resultWithTotalPageCount.info.pages;\r\n    // 2 - получение ВСЕХ эпизодов\r\n    let arrPages = [];\r\n    for (let i = 1; i <= totalPagesCount ; i++){  //getState().episodes.totalPagesCount\r\n        arrPages.push(i)\r\n    }\r\n    const arrayOfRequests = arrPages.map(pageNumber => episodesAPI.getEpisodes(pageNumber))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    let data = {} as EpisodesDataType;\r\n    data.info = results[0].info;\r\n    let resultsArray = [] as Array<EpisodeType>\r\n    for (let i = 0; i < totalPagesCount; i++) {\r\n        resultsArray = [...resultsArray, ...results[i].results]\r\n    }\r\n    data.results = resultsArray\r\n    //data.results = [...results[0].results, ...results[1].results, ...results[2].results]\r\n    // 3 - запись всех эпизодов в store\r\n    dispatch(episodesAC.setEpisodes(data))\r\n    dispatch(episodesAC.toggleLoading(false));\r\n};\r\n\r\nexport const getCurrentEpisode = (id: number): ThunkType => async (dispatch, getState) => {\r\n    dispatch(episodesAC.toggleLoading(true));\r\n    let getCurrentEpisodeResponse = await episodesAPI.getCurrentEpisode(id);\r\n    dispatch(episodesAC.setCurrentEpisode(getCurrentEpisodeResponse));\r\n    // получение информации о персонажах, относящихся к текущему эпизоду:\r\n    // в currentEpisode содержится только массив ссылок на персонажей\r\n    // выполняется при монтировании компоненты EpisodeInfo\r\n    const arrayOfRequests = getCurrentEpisodeResponse.characters.map(url => charactersAPI.getCharacterByUrl(url))\r\n    let results = await Promise.all(arrayOfRequests);\r\n    dispatch(episodesAC.setCharactersOfCurrentEpisode(results));\r\n    dispatch(episodesAC.toggleLoading(false));\r\n};\r\n\r\nexport default episodesReducer;","import {connect} from \"react-redux\";\r\nimport {StateType} from \"../../../store/store\";\r\nimport React from \"react\";\r\nimport {EpisodeType} from \"../../../Types/Types\";\r\nimport Episodes from \"./Episodes\";\r\nimport {episodesAC, getEpisodes} from \"../../../store/episodes-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    episodes: Array<EpisodeType>\r\n    totalPagesCount: number\r\n    currentPage: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getEpisodes: (currentPage: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    episodes: state.episodes.episodes,\r\n    totalPagesCount: state.episodes.totalPagesCount,\r\n    currentPage: state.episodes.currentPage\r\n});\r\n\r\nconst setCurrentPage = episodesAC.setCurrentPage;\r\n\r\nconst EpisodesContainer = connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps, {getEpisodes, setCurrentPage})(Episodes);\r\n\r\nexport default EpisodesContainer;","import React, {useEffect} from \"react\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport {\r\n    Avatar, Button,\r\n    CircularProgress,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    chip: {\r\n        margin: 2,\r\n    },\r\n    button: {\r\n        borderRadius: 28,\r\n        padding: 2,\r\n        paddingRight: 5,\r\n        margin: 2,\r\n        marginBottom: 4,\r\n        textTransform: 'none'\r\n    },\r\n    avatar: {\r\n        marginRight: 5\r\n    }\r\n});\r\n\r\ntype PropsType = {\r\n    currentEpisode: EpisodeType\r\n    isLoading: boolean\r\n    getCurrentEpisode: (id: number) => void\r\n    charactersOfCurrentEpisode: Array<CharacterType>\r\n    match: any\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\n\r\nconst EpisodeInfo: React.FC<PropsType> = (props) => {\r\n    const {isLoading, match, getCurrentEpisode, currentEpisode, charactersOfCurrentEpisode, setCurrentItem} = props;\r\n    let id = match.params.id;\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        getCurrentEpisode(id);\r\n        console.log(currentEpisode)\r\n    }, []);\r\n\r\n    const onClick = () => {\r\n        setCurrentItem(2);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentEpisode && charactersOfCurrentEpisode &&\r\n            <div>\r\n                <Typography color='error' variant='h5'>\r\n                    {currentEpisode.episode.toLocaleLowerCase()} - {currentEpisode.name}\r\n                </Typography>\r\n                <Typography color='textSecondary' variant='h6'>\r\n                    The air date: {currentEpisode.air_date}\r\n                </Typography>\r\n                <Typography color='textPrimary' variant='h6'>\r\n                    List of characters who have been seen in the episode:\r\n                </Typography>\r\n                {isLoading ? <CircularProgress/> : <div>\r\n                    {charactersOfCurrentEpisode.map(character => <Button variant='contained'\r\n                                                                         key={character.id}\r\n                                                                         onClick={onClick}\r\n                                                                         color={'default'}\r\n                                                                         className={classes.button}\r\n                                                                         component={RouterLink}\r\n                                                                         to={`/characters/${character.id}`}\r\n                                                                         size='large'>\r\n                            <Avatar alt=\"\" src={character.image} className={classes.avatar}/>\r\n                            {character.name}\r\n                        </Button>\r\n                    )}\r\n                </div>}\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default EpisodeInfo;","import {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {StateType} from \"../../../../store/store\";\r\nimport {CharacterType, EpisodeType} from \"../../../../Types/Types\";\r\nimport EpisodeInfo from \"./EpisodeInfo\";\r\nimport {getCurrentEpisode} from \"../../../../store/episodes-reducer\";\r\nimport {setCurrentItem} from \"../../../../store/sidebar-reducer\";\r\n\r\ntype MapStatePropsType = {\r\n    currentEpisode: EpisodeType | undefined | null\r\n    charactersOfCurrentEpisode: Array<CharacterType> | null\r\n    isLoading: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getCurrentEpisode: (id: number) => void\r\n    setCurrentItem: (currentItem: number) => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: StateType): MapStatePropsType => ({\r\n    currentEpisode: state.episodes.currentEpisode,\r\n    isLoading: state.episodes.isLoading,\r\n    charactersOfCurrentEpisode: state.episodes.charactersOfCurrentEpisode,\r\n});\r\n\r\nconst EpisodeInfoContainer = compose(connect<MapStatePropsType,\r\n    MapDispatchPropsType,\r\n    OwnPropsType,\r\n    StateType>(mapStateToProps,\r\n    {getCurrentEpisode, setCurrentItem}), withRouter)(EpisodeInfo);\r\n\r\nexport default EpisodeInfoContainer;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport {Route} from \"react-router-dom\";\r\nimport Locations from \"./Locations/Locations\";\r\nimport Episodes from \"./Episodes/Episodes\";\r\nimport CharactersContainer from \"./Characters/CharactersContainer\";\r\nimport CharacterInfoContainer from \"./Characters/CharacterInfo/CharacterInfoContainer\";\r\nimport EpisodesContainer from \"./Episodes/EpisodesContainer\";\r\nimport EpisodeInfo from \"./Episodes/EpisodeInfo/EpisodeInfo\";\r\nimport EpisodeInfoContainer from \"./Episodes/EpisodeInfo/EpisodeInfoContainer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nconst Main = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n            <Toolbar/>\r\n            <Route exact path='/characters' component={CharactersContainer}/>\r\n            <Route path='/characters/:id' render={() => <CharacterInfoContainer/>}/>\r\n            <Route path='/locations' component={Locations}/>\r\n            <Route exact path='/episodes' component={EpisodesContainer}/>\r\n            <Route path='/episodes/:id' component={EpisodeInfoContainer}/>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Header from \"./Components/Header/Header\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Main from \"./Components/Main/Main\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      root: {\n        display: 'flex',\n      }\n    }),\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n      <div className={classes.root}>\n        <Header/>\n        <Sidebar/>\n        <Main/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport charactersReducer from \"./characters-reducer\";\r\nimport episodesReducer from \"./episodes-reducer\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n    sidebar: sidebarReducer,\r\n    characters: charactersReducer,\r\n    episodes: episodesReducer\r\n});\r\n\r\nexport type StateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\ntype PropertiesType<T> = T extends {[key: string]: infer U} ? U : never;\r\nexport type GetActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}